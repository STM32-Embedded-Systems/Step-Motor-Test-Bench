
Step-Motor-Controller-F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800dd10  0800dd10  0001dd10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1fc  0800e1fc  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1fc  0800e1fc  0001e1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e204  0800e204  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e204  0800e204  0001e204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e208  0800e208  0001e208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0800e20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f18  2000043c  0800e648  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003354  0800e648  00023354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044783  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000831c  00000000  00000000  00064bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  0006cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001810  00000000  00000000  0006ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020338  00000000  00000000  000702e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000289da  00000000  00000000  00090620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab24f  00000000  00000000  000b8ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a1c  00000000  00000000  0016429c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000043c 	.word	0x2000043c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dcf4 	.word	0x0800dcf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000440 	.word	0x20000440
 80001dc:	0800dcf4 	.word	0x0800dcf4

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001e6:	4919      	ldr	r1, [pc, #100]	; (800024c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001ec:	4818      	ldr	r0, [pc, #96]	; (8000250 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ee:	4917      	ldr	r1, [pc, #92]	; (800024c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000202:	4915      	ldr	r1, [pc, #84]	; (8000258 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000204:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000206:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800020a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800020c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000210:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000214:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000218:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800021e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000222:	4770      	bx	lr

08000224 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000224:	f7ff bffe 	b.w	8000224 <__tx_BadHandler>

08000228 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000228:	f7ff bffe 	b.w	8000228 <__tx_HardfaultHandler>

0800022c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800022c:	f7ff bffe 	b.w	800022c <__tx_SVCallHandler>

08000230 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000230:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000232:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000238:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800023a:	f000 f891 	bl	8000360 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000242:	4770      	bx	lr

08000244 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_NMIHandler>

08000248 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000250:	20002ad4 	.word	0x20002ad4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000258:	000cd13f 	.word	0x000cd13f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	40ff0000 	.word	0x40ff0000

08000260 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000260:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000264:	4a2a      	ldr	r2, [pc, #168]	; (8000310 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000266:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000268:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800026c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000270:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000274:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000276:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800027a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800027e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000282:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000286:	f3bf 8f6f 	isb	sy

0800028a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800028a:	e7fe      	b.n	800028a <__tx_wait_here>

0800028c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800028c:	4821      	ldr	r0, [pc, #132]	; (8000314 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800028e:	4a22      	ldr	r2, [pc, #136]	; (8000318 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000290:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000294:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000296:	b191      	cbz	r1, 80002be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000298:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800029a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800029e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002a6:	d101      	bne.n	80002ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ac:	4c1b      	ldr	r4, [pc, #108]	; (800031c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002b8:	b10d      	cbz	r5, 80002be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002bc:	6023      	str	r3, [r4, #0]

080002be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002c2:	b1b1      	cbz	r1, 80002f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002c6:	b662      	cpsie	i

080002c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ca:	4c14      	ldr	r4, [pc, #80]	; (800031c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002e2:	d101      	bne.n	80002e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002f0:	4770      	bx	lr

080002f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002f8:	b909      	cbnz	r1, 80002fe <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 80002fa:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80002fc:	e7f9      	b.n	80002f2 <__tx_ts_wait>

080002fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80002fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000302:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000306:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800030c:	e7dc      	b.n	80002c8 <__tx_ts_restore>

0800030e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800030e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000310:	20002ad8 	.word	0x20002ad8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000314:	20002adc 	.word	0x20002adc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000318:	20002ae0 	.word	0x20002ae0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800031c:	20002b70 	.word	0x20002b70

08000320 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000320:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000322:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000326:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800032a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800032e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000330:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000334:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000336:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000338:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800033a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800033c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800033e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000340:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000342:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000344:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000346:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000348:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800034c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800034e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000352:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000354:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800035a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800035c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800035e:	4770      	bx	lr

08000360 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000360:	4922      	ldr	r1, [pc, #136]	; (80003ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000362:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000364:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000368:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800036c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800036e:	b13a      	cbz	r2, 8000380 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000370:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000374:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000376:	b91a      	cbnz	r2, 8000380 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800037a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800037e:	6018      	str	r0, [r3, #0]

08000380 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000380:	491d      	ldr	r1, [pc, #116]	; (80003f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000382:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000384:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000386:	b122      	cbz	r2, 8000392 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800038a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800038e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000390:	e008      	b.n	80003a4 <__tx_timer_done>

08000392 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000392:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000398:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800039a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800039c:	d101      	bne.n	80003a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003a0:	6818      	ldr	r0, [r3, #0]

080003a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003a2:	6008      	str	r0, [r1, #0]

080003a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003a8:	b912      	cbnz	r2, 80003b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003aa:	4914      	ldr	r1, [pc, #80]	; (80003fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ae:	b1d0      	cbz	r0, 80003e6 <__tx_timer_nothing_expired>

080003b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003b4:	4911      	ldr	r1, [pc, #68]	; (80003fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003b8:	b108      	cbz	r0, 80003be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ba:	f009 fd1d 	bl	8009df8 <_tx_timer_expiration_process>

080003be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003c2:	b172      	cbz	r2, 80003e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003c4:	f009 fc8a 	bl	8009cdc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003cc:	b949      	cbnz	r1, 80003e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ce:	480f      	ldr	r0, [pc, #60]	; (800040c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003d2:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003d6:	480f      	ldr	r0, [pc, #60]	; (8000414 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003de:	d000      	beq.n	80003e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003e0:	6002      	str	r2, [r0, #0]

080003e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003ec:	20003048 	.word	0x20003048
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003f0:	20002b70 	.word	0x20002b70
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003f4:	20003044 	.word	0x20003044
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003f8:	20002ae8 	.word	0x20002ae8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003fc:	20002b6c 	.word	0x20002b6c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000400:	20002b78 	.word	0x20002b78
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000404:	20002c30 	.word	0x20002c30
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	20002ad8 	.word	0x20002ad8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040c:	20002adc 	.word	0x20002adc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000410:	20002ae0 	.word	0x20002ae0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000414:	e000ed04 	.word	0xe000ed04

08000418 <strcmp>:
 8000418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800041c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000420:	2a01      	cmp	r2, #1
 8000422:	bf28      	it	cs
 8000424:	429a      	cmpcs	r2, r3
 8000426:	d0f7      	beq.n	8000418 <strcmp>
 8000428:	1ad0      	subs	r0, r2, r3
 800042a:	4770      	bx	lr

0800042c <strlen>:
 800042c:	4603      	mov	r3, r0
 800042e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000432:	2a00      	cmp	r2, #0
 8000434:	d1fb      	bne.n	800042e <strlen+0x2>
 8000436:	1a18      	subs	r0, r3, r0
 8000438:	3801      	subs	r0, #1
 800043a:	4770      	bx	lr
 800043c:	0000      	movs	r0, r0
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_drsub>:
 80004e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e002      	b.n	80004ec <__adddf3>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dsub>:
 80004e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004ec <__adddf3>:
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	bf1f      	itttt	ne
 8000502:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000506:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800050e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000512:	f000 80e2 	beq.w	80006da <__adddf3+0x1ee>
 8000516:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800051e:	bfb8      	it	lt
 8000520:	426d      	neglt	r5, r5
 8000522:	dd0c      	ble.n	800053e <__adddf3+0x52>
 8000524:	442c      	add	r4, r5
 8000526:	ea80 0202 	eor.w	r2, r0, r2
 800052a:	ea81 0303 	eor.w	r3, r1, r3
 800052e:	ea82 0000 	eor.w	r0, r2, r0
 8000532:	ea83 0101 	eor.w	r1, r3, r1
 8000536:	ea80 0202 	eor.w	r2, r0, r2
 800053a:	ea81 0303 	eor.w	r3, r1, r3
 800053e:	2d36      	cmp	r5, #54	; 0x36
 8000540:	bf88      	it	hi
 8000542:	bd30      	pophi	{r4, r5, pc}
 8000544:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000548:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800054c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000550:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000554:	d002      	beq.n	800055c <__adddf3+0x70>
 8000556:	4240      	negs	r0, r0
 8000558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000560:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000564:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x84>
 800056a:	4252      	negs	r2, r2
 800056c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000570:	ea94 0f05 	teq	r4, r5
 8000574:	f000 80a7 	beq.w	80006c6 <__adddf3+0x1da>
 8000578:	f1a4 0401 	sub.w	r4, r4, #1
 800057c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000580:	db0d      	blt.n	800059e <__adddf3+0xb2>
 8000582:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000586:	fa22 f205 	lsr.w	r2, r2, r5
 800058a:	1880      	adds	r0, r0, r2
 800058c:	f141 0100 	adc.w	r1, r1, #0
 8000590:	fa03 f20e 	lsl.w	r2, r3, lr
 8000594:	1880      	adds	r0, r0, r2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	4159      	adcs	r1, r3
 800059c:	e00e      	b.n	80005bc <__adddf3+0xd0>
 800059e:	f1a5 0520 	sub.w	r5, r5, #32
 80005a2:	f10e 0e20 	add.w	lr, lr, #32
 80005a6:	2a01      	cmp	r2, #1
 80005a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005ac:	bf28      	it	cs
 80005ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b2:	fa43 f305 	asr.w	r3, r3, r5
 80005b6:	18c0      	adds	r0, r0, r3
 80005b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c0:	d507      	bpl.n	80005d2 <__adddf3+0xe6>
 80005c2:	f04f 0e00 	mov.w	lr, #0
 80005c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005d6:	d31b      	bcc.n	8000610 <__adddf3+0x124>
 80005d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005dc:	d30c      	bcc.n	80005f8 <__adddf3+0x10c>
 80005de:	0849      	lsrs	r1, r1, #1
 80005e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005e8:	f104 0401 	add.w	r4, r4, #1
 80005ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f4:	f080 809a 	bcs.w	800072c <__adddf3+0x240>
 80005f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	ea41 0105 	orr.w	r1, r1, r5
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000614:	4140      	adcs	r0, r0
 8000616:	eb41 0101 	adc.w	r1, r1, r1
 800061a:	3c01      	subs	r4, #1
 800061c:	bf28      	it	cs
 800061e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000622:	d2e9      	bcs.n	80005f8 <__adddf3+0x10c>
 8000624:	f091 0f00 	teq	r1, #0
 8000628:	bf04      	itt	eq
 800062a:	4601      	moveq	r1, r0
 800062c:	2000      	moveq	r0, #0
 800062e:	fab1 f381 	clz	r3, r1
 8000632:	bf08      	it	eq
 8000634:	3320      	addeq	r3, #32
 8000636:	f1a3 030b 	sub.w	r3, r3, #11
 800063a:	f1b3 0220 	subs.w	r2, r3, #32
 800063e:	da0c      	bge.n	800065a <__adddf3+0x16e>
 8000640:	320c      	adds	r2, #12
 8000642:	dd08      	ble.n	8000656 <__adddf3+0x16a>
 8000644:	f102 0c14 	add.w	ip, r2, #20
 8000648:	f1c2 020c 	rsb	r2, r2, #12
 800064c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000650:	fa21 f102 	lsr.w	r1, r1, r2
 8000654:	e00c      	b.n	8000670 <__adddf3+0x184>
 8000656:	f102 0214 	add.w	r2, r2, #20
 800065a:	bfd8      	it	le
 800065c:	f1c2 0c20 	rsble	ip, r2, #32
 8000660:	fa01 f102 	lsl.w	r1, r1, r2
 8000664:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000668:	bfdc      	itt	le
 800066a:	ea41 010c 	orrle.w	r1, r1, ip
 800066e:	4090      	lslle	r0, r2
 8000670:	1ae4      	subs	r4, r4, r3
 8000672:	bfa2      	ittt	ge
 8000674:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000678:	4329      	orrge	r1, r5
 800067a:	bd30      	popge	{r4, r5, pc}
 800067c:	ea6f 0404 	mvn.w	r4, r4
 8000680:	3c1f      	subs	r4, #31
 8000682:	da1c      	bge.n	80006be <__adddf3+0x1d2>
 8000684:	340c      	adds	r4, #12
 8000686:	dc0e      	bgt.n	80006a6 <__adddf3+0x1ba>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0220 	rsb	r2, r4, #32
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f302 	lsl.w	r3, r1, r2
 8000698:	ea40 0003 	orr.w	r0, r0, r3
 800069c:	fa21 f304 	lsr.w	r3, r1, r4
 80006a0:	ea45 0103 	orr.w	r1, r5, r3
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	f1c4 040c 	rsb	r4, r4, #12
 80006aa:	f1c4 0220 	rsb	r2, r4, #32
 80006ae:	fa20 f002 	lsr.w	r0, r0, r2
 80006b2:	fa01 f304 	lsl.w	r3, r1, r4
 80006b6:	ea40 0003 	orr.w	r0, r0, r3
 80006ba:	4629      	mov	r1, r5
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	fa21 f004 	lsr.w	r0, r1, r4
 80006c2:	4629      	mov	r1, r5
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	f094 0f00 	teq	r4, #0
 80006ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ce:	bf06      	itte	eq
 80006d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d4:	3401      	addeq	r4, #1
 80006d6:	3d01      	subne	r5, #1
 80006d8:	e74e      	b.n	8000578 <__adddf3+0x8c>
 80006da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006de:	bf18      	it	ne
 80006e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e4:	d029      	beq.n	800073a <__adddf3+0x24e>
 80006e6:	ea94 0f05 	teq	r4, r5
 80006ea:	bf08      	it	eq
 80006ec:	ea90 0f02 	teqeq	r0, r2
 80006f0:	d005      	beq.n	80006fe <__adddf3+0x212>
 80006f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006f6:	bf04      	itt	eq
 80006f8:	4619      	moveq	r1, r3
 80006fa:	4610      	moveq	r0, r2
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	ea91 0f03 	teq	r1, r3
 8000702:	bf1e      	ittt	ne
 8000704:	2100      	movne	r1, #0
 8000706:	2000      	movne	r0, #0
 8000708:	bd30      	popne	{r4, r5, pc}
 800070a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800070e:	d105      	bne.n	800071c <__adddf3+0x230>
 8000710:	0040      	lsls	r0, r0, #1
 8000712:	4149      	adcs	r1, r1
 8000714:	bf28      	it	cs
 8000716:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd30      	pop	{r4, r5, pc}
 800071c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000720:	bf3c      	itt	cc
 8000722:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000726:	bd30      	popcc	{r4, r5, pc}
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800072c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800073e:	bf1a      	itte	ne
 8000740:	4619      	movne	r1, r3
 8000742:	4610      	movne	r0, r2
 8000744:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000748:	bf1c      	itt	ne
 800074a:	460b      	movne	r3, r1
 800074c:	4602      	movne	r2, r0
 800074e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000752:	bf06      	itte	eq
 8000754:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000758:	ea91 0f03 	teqeq	r1, r3
 800075c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	bf00      	nop

08000764 <__aeabi_ui2d>:
 8000764:	f090 0f00 	teq	r0, #0
 8000768:	bf04      	itt	eq
 800076a:	2100      	moveq	r1, #0
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000774:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000778:	f04f 0500 	mov.w	r5, #0
 800077c:	f04f 0100 	mov.w	r1, #0
 8000780:	e750      	b.n	8000624 <__adddf3+0x138>
 8000782:	bf00      	nop

08000784 <__aeabi_i2d>:
 8000784:	f090 0f00 	teq	r0, #0
 8000788:	bf04      	itt	eq
 800078a:	2100      	moveq	r1, #0
 800078c:	4770      	bxeq	lr
 800078e:	b530      	push	{r4, r5, lr}
 8000790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000798:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800079c:	bf48      	it	mi
 800079e:	4240      	negmi	r0, r0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e73e      	b.n	8000624 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_f2d>:
 80007a8:	0042      	lsls	r2, r0, #1
 80007aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007b6:	bf1f      	itttt	ne
 80007b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c4:	4770      	bxne	lr
 80007c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ca:	bf08      	it	eq
 80007cc:	4770      	bxeq	lr
 80007ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d2:	bf04      	itt	eq
 80007d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007d8:	4770      	bxeq	lr
 80007da:	b530      	push	{r4, r5, lr}
 80007dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	e71c      	b.n	8000624 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_ul2d>:
 80007ec:	ea50 0201 	orrs.w	r2, r0, r1
 80007f0:	bf08      	it	eq
 80007f2:	4770      	bxeq	lr
 80007f4:	b530      	push	{r4, r5, lr}
 80007f6:	f04f 0500 	mov.w	r5, #0
 80007fa:	e00a      	b.n	8000812 <__aeabi_l2d+0x16>

080007fc <__aeabi_l2d>:
 80007fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000800:	bf08      	it	eq
 8000802:	4770      	bxeq	lr
 8000804:	b530      	push	{r4, r5, lr}
 8000806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080a:	d502      	bpl.n	8000812 <__aeabi_l2d+0x16>
 800080c:	4240      	negs	r0, r0
 800080e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000812:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000816:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800081e:	f43f aed8 	beq.w	80005d2 <__adddf3+0xe6>
 8000822:	f04f 0203 	mov.w	r2, #3
 8000826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082a:	bf18      	it	ne
 800082c:	3203      	addne	r2, #3
 800082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000832:	bf18      	it	ne
 8000834:	3203      	addne	r2, #3
 8000836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083a:	f1c2 0320 	rsb	r3, r2, #32
 800083e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000842:	fa20 f002 	lsr.w	r0, r0, r2
 8000846:	fa01 fe03 	lsl.w	lr, r1, r3
 800084a:	ea40 000e 	orr.w	r0, r0, lr
 800084e:	fa21 f102 	lsr.w	r1, r1, r2
 8000852:	4414      	add	r4, r2
 8000854:	e6bd      	b.n	80005d2 <__adddf3+0xe6>
 8000856:	bf00      	nop

08000858 <__aeabi_dmul>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000866:	bf1d      	ittte	ne
 8000868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800086c:	ea94 0f0c 	teqne	r4, ip
 8000870:	ea95 0f0c 	teqne	r5, ip
 8000874:	f000 f8de 	bleq	8000a34 <__aeabi_dmul+0x1dc>
 8000878:	442c      	add	r4, r5
 800087a:	ea81 0603 	eor.w	r6, r1, r3
 800087e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800088a:	bf18      	it	ne
 800088c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000898:	d038      	beq.n	800090c <__aeabi_dmul+0xb4>
 800089a:	fba0 ce02 	umull	ip, lr, r0, r2
 800089e:	f04f 0500 	mov.w	r5, #0
 80008a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008ae:	f04f 0600 	mov.w	r6, #0
 80008b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008b6:	f09c 0f00 	teq	ip, #0
 80008ba:	bf18      	it	ne
 80008bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80008c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008cc:	d204      	bcs.n	80008d8 <__aeabi_dmul+0x80>
 80008ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008d2:	416d      	adcs	r5, r5
 80008d4:	eb46 0606 	adc.w	r6, r6, r6
 80008d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f0:	bf88      	it	hi
 80008f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f6:	d81e      	bhi.n	8000936 <__aeabi_dmul+0xde>
 80008f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008fc:	bf08      	it	eq
 80008fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000910:	ea46 0101 	orr.w	r1, r6, r1
 8000914:	ea40 0002 	orr.w	r0, r0, r2
 8000918:	ea81 0103 	eor.w	r1, r1, r3
 800091c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	f300 80ab 	bgt.w	8000a90 <__aeabi_dmul+0x238>
 800093a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800093e:	bfde      	ittt	le
 8000940:	2000      	movle	r0, #0
 8000942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000946:	bd70      	pople	{r4, r5, r6, pc}
 8000948:	f1c4 0400 	rsb	r4, r4, #0
 800094c:	3c20      	subs	r4, #32
 800094e:	da35      	bge.n	80009bc <__aeabi_dmul+0x164>
 8000950:	340c      	adds	r4, #12
 8000952:	dc1b      	bgt.n	800098c <__aeabi_dmul+0x134>
 8000954:	f104 0414 	add.w	r4, r4, #20
 8000958:	f1c4 0520 	rsb	r5, r4, #32
 800095c:	fa00 f305 	lsl.w	r3, r0, r5
 8000960:	fa20 f004 	lsr.w	r0, r0, r4
 8000964:	fa01 f205 	lsl.w	r2, r1, r5
 8000968:	ea40 0002 	orr.w	r0, r0, r2
 800096c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000978:	fa21 f604 	lsr.w	r6, r1, r4
 800097c:	eb42 0106 	adc.w	r1, r2, r6
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f1c4 040c 	rsb	r4, r4, #12
 8000990:	f1c4 0520 	rsb	r5, r4, #32
 8000994:	fa00 f304 	lsl.w	r3, r0, r4
 8000998:	fa20 f005 	lsr.w	r0, r0, r5
 800099c:	fa01 f204 	lsl.w	r2, r1, r4
 80009a0:	ea40 0002 	orr.w	r0, r0, r2
 80009a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009ac:	f141 0100 	adc.w	r1, r1, #0
 80009b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b4:	bf08      	it	eq
 80009b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f1c4 0520 	rsb	r5, r4, #32
 80009c0:	fa00 f205 	lsl.w	r2, r0, r5
 80009c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009c8:	fa20 f304 	lsr.w	r3, r0, r4
 80009cc:	fa01 f205 	lsl.w	r2, r1, r5
 80009d0:	ea43 0302 	orr.w	r3, r3, r2
 80009d4:	fa21 f004 	lsr.w	r0, r1, r4
 80009d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009dc:	fa21 f204 	lsr.w	r2, r1, r4
 80009e0:	ea20 0002 	bic.w	r0, r0, r2
 80009e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009ec:	bf08      	it	eq
 80009ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f094 0f00 	teq	r4, #0
 80009f8:	d10f      	bne.n	8000a1a <__aeabi_dmul+0x1c2>
 80009fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009fe:	0040      	lsls	r0, r0, #1
 8000a00:	eb41 0101 	adc.w	r1, r1, r1
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	bf08      	it	eq
 8000a0a:	3c01      	subeq	r4, #1
 8000a0c:	d0f7      	beq.n	80009fe <__aeabi_dmul+0x1a6>
 8000a0e:	ea41 0106 	orr.w	r1, r1, r6
 8000a12:	f095 0f00 	teq	r5, #0
 8000a16:	bf18      	it	ne
 8000a18:	4770      	bxne	lr
 8000a1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	eb43 0303 	adc.w	r3, r3, r3
 8000a24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a28:	bf08      	it	eq
 8000a2a:	3d01      	subeq	r5, #1
 8000a2c:	d0f7      	beq.n	8000a1e <__aeabi_dmul+0x1c6>
 8000a2e:	ea43 0306 	orr.w	r3, r3, r6
 8000a32:	4770      	bx	lr
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3c:	bf18      	it	ne
 8000a3e:	ea95 0f0c 	teqne	r5, ip
 8000a42:	d00c      	beq.n	8000a5e <__aeabi_dmul+0x206>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	d1d1      	bne.n	80009f4 <__aeabi_dmul+0x19c>
 8000a50:	ea81 0103 	eor.w	r1, r1, r3
 8000a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a62:	bf06      	itte	eq
 8000a64:	4610      	moveq	r0, r2
 8000a66:	4619      	moveq	r1, r3
 8000a68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6c:	d019      	beq.n	8000aa2 <__aeabi_dmul+0x24a>
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	d102      	bne.n	8000a7a <__aeabi_dmul+0x222>
 8000a74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a78:	d113      	bne.n	8000aa2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_dmul+0x234>
 8000a80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a84:	bf1c      	itt	ne
 8000a86:	4610      	movne	r0, r2
 8000a88:	4619      	movne	r1, r3
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dmul+0x24a>
 8000a8c:	ea81 0103 	eor.w	r1, r1, r3
 8000a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}

08000aac <__aeabi_ddiv>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aba:	bf1d      	ittte	ne
 8000abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac0:	ea94 0f0c 	teqne	r4, ip
 8000ac4:	ea95 0f0c 	teqne	r5, ip
 8000ac8:	f000 f8a7 	bleq	8000c1a <__aeabi_ddiv+0x16e>
 8000acc:	eba4 0405 	sub.w	r4, r4, r5
 8000ad0:	ea81 0e03 	eor.w	lr, r1, r3
 8000ad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000adc:	f000 8088 	beq.w	8000bf0 <__aeabi_ddiv+0x144>
 8000ae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000aec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000af0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000af4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000af8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000afc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b04:	429d      	cmp	r5, r3
 8000b06:	bf08      	it	eq
 8000b08:	4296      	cmpeq	r6, r2
 8000b0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b12:	d202      	bcs.n	8000b1a <__aeabi_ddiv+0x6e>
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b1a:	1ab6      	subs	r6, r6, r2
 8000b1c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b20:	085b      	lsrs	r3, r3, #1
 8000b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b36:	bf22      	ittt	cs
 8000b38:	1ab6      	subcs	r6, r6, r2
 8000b3a:	4675      	movcs	r5, lr
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b66:	bf22      	ittt	cs
 8000b68:	1ab6      	subcs	r6, r6, r2
 8000b6a:	4675      	movcs	r5, lr
 8000b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7e:	bf22      	ittt	cs
 8000b80:	1ab6      	subcs	r6, r6, r2
 8000b82:	4675      	movcs	r5, lr
 8000b84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b88:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b8c:	d018      	beq.n	8000bc0 <__aeabi_ddiv+0x114>
 8000b8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000baa:	d1c0      	bne.n	8000b2e <__aeabi_ddiv+0x82>
 8000bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bb0:	d10b      	bne.n	8000bca <__aeabi_ddiv+0x11e>
 8000bb2:	ea41 0100 	orr.w	r1, r1, r0
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bbe:	e7b6      	b.n	8000b2e <__aeabi_ddiv+0x82>
 8000bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bc4:	bf04      	itt	eq
 8000bc6:	4301      	orreq	r1, r0
 8000bc8:	2000      	moveq	r0, #0
 8000bca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bce:	bf88      	it	hi
 8000bd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bd4:	f63f aeaf 	bhi.w	8000936 <__aeabi_dmul+0xde>
 8000bd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bdc:	bf04      	itt	eq
 8000bde:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000be6:	f150 0000 	adcs.w	r0, r0, #0
 8000bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bfc:	bfc2      	ittt	gt
 8000bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c06:	bd70      	popgt	{r4, r5, r6, pc}
 8000c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0c:	f04f 0e00 	mov.w	lr, #0
 8000c10:	3c01      	subs	r4, #1
 8000c12:	e690      	b.n	8000936 <__aeabi_dmul+0xde>
 8000c14:	ea45 0e06 	orr.w	lr, r5, r6
 8000c18:	e68d      	b.n	8000936 <__aeabi_dmul+0xde>
 8000c1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c1e:	ea94 0f0c 	teq	r4, ip
 8000c22:	bf08      	it	eq
 8000c24:	ea95 0f0c 	teqeq	r5, ip
 8000c28:	f43f af3b 	beq.w	8000aa2 <__aeabi_dmul+0x24a>
 8000c2c:	ea94 0f0c 	teq	r4, ip
 8000c30:	d10a      	bne.n	8000c48 <__aeabi_ddiv+0x19c>
 8000c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c36:	f47f af34 	bne.w	8000aa2 <__aeabi_dmul+0x24a>
 8000c3a:	ea95 0f0c 	teq	r5, ip
 8000c3e:	f47f af25 	bne.w	8000a8c <__aeabi_dmul+0x234>
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	e72c      	b.n	8000aa2 <__aeabi_dmul+0x24a>
 8000c48:	ea95 0f0c 	teq	r5, ip
 8000c4c:	d106      	bne.n	8000c5c <__aeabi_ddiv+0x1b0>
 8000c4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c52:	f43f aefd 	beq.w	8000a50 <__aeabi_dmul+0x1f8>
 8000c56:	4610      	mov	r0, r2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	e722      	b.n	8000aa2 <__aeabi_dmul+0x24a>
 8000c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c60:	bf18      	it	ne
 8000c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c66:	f47f aec5 	bne.w	80009f4 <__aeabi_dmul+0x19c>
 8000c6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c6e:	f47f af0d 	bne.w	8000a8c <__aeabi_dmul+0x234>
 8000c72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c76:	f47f aeeb 	bne.w	8000a50 <__aeabi_dmul+0x1f8>
 8000c7a:	e712      	b.n	8000aa2 <__aeabi_dmul+0x24a>

08000c7c <__gedf2>:
 8000c7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c80:	e006      	b.n	8000c90 <__cmpdf2+0x4>
 8000c82:	bf00      	nop

08000c84 <__ledf2>:
 8000c84:	f04f 0c01 	mov.w	ip, #1
 8000c88:	e002      	b.n	8000c90 <__cmpdf2+0x4>
 8000c8a:	bf00      	nop

08000c8c <__cmpdf2>:
 8000c8c:	f04f 0c01 	mov.w	ip, #1
 8000c90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ca6:	d01b      	beq.n	8000ce0 <__cmpdf2+0x54>
 8000ca8:	b001      	add	sp, #4
 8000caa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cae:	bf0c      	ite	eq
 8000cb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cb4:	ea91 0f03 	teqne	r1, r3
 8000cb8:	bf02      	ittt	eq
 8000cba:	ea90 0f02 	teqeq	r0, r2
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	4770      	bxeq	lr
 8000cc2:	f110 0f00 	cmn.w	r0, #0
 8000cc6:	ea91 0f03 	teq	r1, r3
 8000cca:	bf58      	it	pl
 8000ccc:	4299      	cmppl	r1, r3
 8000cce:	bf08      	it	eq
 8000cd0:	4290      	cmpeq	r0, r2
 8000cd2:	bf2c      	ite	cs
 8000cd4:	17d8      	asrcs	r0, r3, #31
 8000cd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cda:	f040 0001 	orr.w	r0, r0, #1
 8000cde:	4770      	bx	lr
 8000ce0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ce8:	d102      	bne.n	8000cf0 <__cmpdf2+0x64>
 8000cea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cee:	d107      	bne.n	8000d00 <__cmpdf2+0x74>
 8000cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cf8:	d1d6      	bne.n	8000ca8 <__cmpdf2+0x1c>
 8000cfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cfe:	d0d3      	beq.n	8000ca8 <__cmpdf2+0x1c>
 8000d00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_cdrcmple>:
 8000d08:	4684      	mov	ip, r0
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	4662      	mov	r2, ip
 8000d0e:	468c      	mov	ip, r1
 8000d10:	4619      	mov	r1, r3
 8000d12:	4663      	mov	r3, ip
 8000d14:	e000      	b.n	8000d18 <__aeabi_cdcmpeq>
 8000d16:	bf00      	nop

08000d18 <__aeabi_cdcmpeq>:
 8000d18:	b501      	push	{r0, lr}
 8000d1a:	f7ff ffb7 	bl	8000c8c <__cmpdf2>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	bf48      	it	mi
 8000d22:	f110 0f00 	cmnmi.w	r0, #0
 8000d26:	bd01      	pop	{r0, pc}

08000d28 <__aeabi_dcmpeq>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff fff4 	bl	8000d18 <__aeabi_cdcmpeq>
 8000d30:	bf0c      	ite	eq
 8000d32:	2001      	moveq	r0, #1
 8000d34:	2000      	movne	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_dcmplt>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffea 	bl	8000d18 <__aeabi_cdcmpeq>
 8000d44:	bf34      	ite	cc
 8000d46:	2001      	movcc	r0, #1
 8000d48:	2000      	movcs	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_dcmple>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffe0 	bl	8000d18 <__aeabi_cdcmpeq>
 8000d58:	bf94      	ite	ls
 8000d5a:	2001      	movls	r0, #1
 8000d5c:	2000      	movhi	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_dcmpge>:
 8000d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d68:	f7ff ffce 	bl	8000d08 <__aeabi_cdrcmple>
 8000d6c:	bf94      	ite	ls
 8000d6e:	2001      	movls	r0, #1
 8000d70:	2000      	movhi	r0, #0
 8000d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d76:	bf00      	nop

08000d78 <__aeabi_dcmpgt>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff ffc4 	bl	8000d08 <__aeabi_cdrcmple>
 8000d80:	bf34      	ite	cc
 8000d82:	2001      	movcc	r0, #1
 8000d84:	2000      	movcs	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_dcmpun>:
 8000d8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d94:	d102      	bne.n	8000d9c <__aeabi_dcmpun+0x10>
 8000d96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d9a:	d10a      	bne.n	8000db2 <__aeabi_dcmpun+0x26>
 8000d9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000da0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da4:	d102      	bne.n	8000dac <__aeabi_dcmpun+0x20>
 8000da6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000daa:	d102      	bne.n	8000db2 <__aeabi_dcmpun+0x26>
 8000dac:	f04f 0000 	mov.w	r0, #0
 8000db0:	4770      	bx	lr
 8000db2:	f04f 0001 	mov.w	r0, #1
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2iz>:
 8000db8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dc0:	d215      	bcs.n	8000dee <__aeabi_d2iz+0x36>
 8000dc2:	d511      	bpl.n	8000de8 <__aeabi_d2iz+0x30>
 8000dc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000dc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dcc:	d912      	bls.n	8000df4 <__aeabi_d2iz+0x3c>
 8000dce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dde:	fa23 f002 	lsr.w	r0, r3, r2
 8000de2:	bf18      	it	ne
 8000de4:	4240      	negne	r0, r0
 8000de6:	4770      	bx	lr
 8000de8:	f04f 0000 	mov.w	r0, #0
 8000dec:	4770      	bx	lr
 8000dee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000df2:	d105      	bne.n	8000e00 <__aeabi_d2iz+0x48>
 8000df4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000df8:	bf08      	it	eq
 8000dfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dfe:	4770      	bx	lr
 8000e00:	f04f 0000 	mov.w	r0, #0
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__aeabi_uldivmod>:
 8000e08:	b953      	cbnz	r3, 8000e20 <__aeabi_uldivmod+0x18>
 8000e0a:	b94a      	cbnz	r2, 8000e20 <__aeabi_uldivmod+0x18>
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	bf08      	it	eq
 8000e10:	2800      	cmpeq	r0, #0
 8000e12:	bf1c      	itt	ne
 8000e14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e1c:	f000 b96e 	b.w	80010fc <__aeabi_idiv0>
 8000e20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e28:	f000 f806 	bl	8000e38 <__udivmoddi4>
 8000e2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e34:	b004      	add	sp, #16
 8000e36:	4770      	bx	lr

08000e38 <__udivmoddi4>:
 8000e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e3c:	9d08      	ldr	r5, [sp, #32]
 8000e3e:	4604      	mov	r4, r0
 8000e40:	468c      	mov	ip, r1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8083 	bne.w	8000f4e <__udivmoddi4+0x116>
 8000e48:	428a      	cmp	r2, r1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	d947      	bls.n	8000ede <__udivmoddi4+0xa6>
 8000e4e:	fab2 f282 	clz	r2, r2
 8000e52:	b142      	cbz	r2, 8000e66 <__udivmoddi4+0x2e>
 8000e54:	f1c2 0020 	rsb	r0, r2, #32
 8000e58:	fa24 f000 	lsr.w	r0, r4, r0
 8000e5c:	4091      	lsls	r1, r2
 8000e5e:	4097      	lsls	r7, r2
 8000e60:	ea40 0c01 	orr.w	ip, r0, r1
 8000e64:	4094      	lsls	r4, r2
 8000e66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e6a:	0c23      	lsrs	r3, r4, #16
 8000e6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000e70:	fa1f fe87 	uxth.w	lr, r7
 8000e74:	fb08 c116 	mls	r1, r8, r6, ip
 8000e78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x60>
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e8a:	f080 8119 	bcs.w	80010c0 <__udivmoddi4+0x288>
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	f240 8116 	bls.w	80010c0 <__udivmoddi4+0x288>
 8000e94:	3e02      	subs	r6, #2
 8000e96:	443b      	add	r3, r7
 8000e98:	1a5b      	subs	r3, r3, r1
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x8c>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eb6:	f080 8105 	bcs.w	80010c4 <__udivmoddi4+0x28c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8102 	bls.w	80010c4 <__udivmoddi4+0x28c>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec8:	eba4 040e 	sub.w	r4, r4, lr
 8000ecc:	2600      	movs	r6, #0
 8000ece:	b11d      	cbz	r5, 8000ed8 <__udivmoddi4+0xa0>
 8000ed0:	40d4      	lsrs	r4, r2
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	b902      	cbnz	r2, 8000ee2 <__udivmoddi4+0xaa>
 8000ee0:	deff      	udf	#255	; 0xff
 8000ee2:	fab2 f282 	clz	r2, r2
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d150      	bne.n	8000f8c <__udivmoddi4+0x154>
 8000eea:	1bcb      	subs	r3, r1, r7
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	fa1f f887 	uxth.w	r8, r7
 8000ef4:	2601      	movs	r6, #1
 8000ef6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000efa:	0c21      	lsrs	r1, r4, #16
 8000efc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb08 f30c 	mul.w	r3, r8, ip
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0xe4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000f12:	d202      	bcs.n	8000f1a <__udivmoddi4+0xe2>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	f200 80e9 	bhi.w	80010ec <__udivmoddi4+0x2b4>
 8000f1a:	4684      	mov	ip, r0
 8000f1c:	1ac9      	subs	r1, r1, r3
 8000f1e:	b2a3      	uxth	r3, r4
 8000f20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f2c:	fb08 f800 	mul.w	r8, r8, r0
 8000f30:	45a0      	cmp	r8, r4
 8000f32:	d907      	bls.n	8000f44 <__udivmoddi4+0x10c>
 8000f34:	193c      	adds	r4, r7, r4
 8000f36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f3a:	d202      	bcs.n	8000f42 <__udivmoddi4+0x10a>
 8000f3c:	45a0      	cmp	r8, r4
 8000f3e:	f200 80d9 	bhi.w	80010f4 <__udivmoddi4+0x2bc>
 8000f42:	4618      	mov	r0, r3
 8000f44:	eba4 0408 	sub.w	r4, r4, r8
 8000f48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f4c:	e7bf      	b.n	8000ece <__udivmoddi4+0x96>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d909      	bls.n	8000f66 <__udivmoddi4+0x12e>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	f000 80b1 	beq.w	80010ba <__udivmoddi4+0x282>
 8000f58:	2600      	movs	r6, #0
 8000f5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f5e:	4630      	mov	r0, r6
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	fab3 f683 	clz	r6, r3
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d14a      	bne.n	8001004 <__udivmoddi4+0x1cc>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d302      	bcc.n	8000f78 <__udivmoddi4+0x140>
 8000f72:	4282      	cmp	r2, r0
 8000f74:	f200 80b8 	bhi.w	80010e8 <__udivmoddi4+0x2b0>
 8000f78:	1a84      	subs	r4, r0, r2
 8000f7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	468c      	mov	ip, r1
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d0a8      	beq.n	8000ed8 <__udivmoddi4+0xa0>
 8000f86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f8a:	e7a5      	b.n	8000ed8 <__udivmoddi4+0xa0>
 8000f8c:	f1c2 0320 	rsb	r3, r2, #32
 8000f90:	fa20 f603 	lsr.w	r6, r0, r3
 8000f94:	4097      	lsls	r7, r2
 8000f96:	fa01 f002 	lsl.w	r0, r1, r2
 8000f9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9e:	40d9      	lsrs	r1, r3
 8000fa0:	4330      	orrs	r0, r6
 8000fa2:	0c03      	lsrs	r3, r0, #16
 8000fa4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000fa8:	fa1f f887 	uxth.w	r8, r7
 8000fac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000fb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb4:	fb06 f108 	mul.w	r1, r6, r8
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbe:	d909      	bls.n	8000fd4 <__udivmoddi4+0x19c>
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000fc6:	f080 808d 	bcs.w	80010e4 <__udivmoddi4+0x2ac>
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	f240 808a 	bls.w	80010e4 <__udivmoddi4+0x2ac>
 8000fd0:	3e02      	subs	r6, #2
 8000fd2:	443b      	add	r3, r7
 8000fd4:	1a5b      	subs	r3, r3, r1
 8000fd6:	b281      	uxth	r1, r0
 8000fd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb00 f308 	mul.w	r3, r0, r8
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d907      	bls.n	8000ffc <__udivmoddi4+0x1c4>
 8000fec:	1879      	adds	r1, r7, r1
 8000fee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ff2:	d273      	bcs.n	80010dc <__udivmoddi4+0x2a4>
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	d971      	bls.n	80010dc <__udivmoddi4+0x2a4>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4439      	add	r1, r7
 8000ffc:	1acb      	subs	r3, r1, r3
 8000ffe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001002:	e778      	b.n	8000ef6 <__udivmoddi4+0xbe>
 8001004:	f1c6 0c20 	rsb	ip, r6, #32
 8001008:	fa03 f406 	lsl.w	r4, r3, r6
 800100c:	fa22 f30c 	lsr.w	r3, r2, ip
 8001010:	431c      	orrs	r4, r3
 8001012:	fa20 f70c 	lsr.w	r7, r0, ip
 8001016:	fa01 f306 	lsl.w	r3, r1, r6
 800101a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800101e:	fa21 f10c 	lsr.w	r1, r1, ip
 8001022:	431f      	orrs	r7, r3
 8001024:	0c3b      	lsrs	r3, r7, #16
 8001026:	fbb1 f9fe 	udiv	r9, r1, lr
 800102a:	fa1f f884 	uxth.w	r8, r4
 800102e:	fb0e 1119 	mls	r1, lr, r9, r1
 8001032:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001036:	fb09 fa08 	mul.w	sl, r9, r8
 800103a:	458a      	cmp	sl, r1
 800103c:	fa02 f206 	lsl.w	r2, r2, r6
 8001040:	fa00 f306 	lsl.w	r3, r0, r6
 8001044:	d908      	bls.n	8001058 <__udivmoddi4+0x220>
 8001046:	1861      	adds	r1, r4, r1
 8001048:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800104c:	d248      	bcs.n	80010e0 <__udivmoddi4+0x2a8>
 800104e:	458a      	cmp	sl, r1
 8001050:	d946      	bls.n	80010e0 <__udivmoddi4+0x2a8>
 8001052:	f1a9 0902 	sub.w	r9, r9, #2
 8001056:	4421      	add	r1, r4
 8001058:	eba1 010a 	sub.w	r1, r1, sl
 800105c:	b2bf      	uxth	r7, r7
 800105e:	fbb1 f0fe 	udiv	r0, r1, lr
 8001062:	fb0e 1110 	mls	r1, lr, r0, r1
 8001066:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800106a:	fb00 f808 	mul.w	r8, r0, r8
 800106e:	45b8      	cmp	r8, r7
 8001070:	d907      	bls.n	8001082 <__udivmoddi4+0x24a>
 8001072:	19e7      	adds	r7, r4, r7
 8001074:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001078:	d22e      	bcs.n	80010d8 <__udivmoddi4+0x2a0>
 800107a:	45b8      	cmp	r8, r7
 800107c:	d92c      	bls.n	80010d8 <__udivmoddi4+0x2a0>
 800107e:	3802      	subs	r0, #2
 8001080:	4427      	add	r7, r4
 8001082:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001086:	eba7 0708 	sub.w	r7, r7, r8
 800108a:	fba0 8902 	umull	r8, r9, r0, r2
 800108e:	454f      	cmp	r7, r9
 8001090:	46c6      	mov	lr, r8
 8001092:	4649      	mov	r1, r9
 8001094:	d31a      	bcc.n	80010cc <__udivmoddi4+0x294>
 8001096:	d017      	beq.n	80010c8 <__udivmoddi4+0x290>
 8001098:	b15d      	cbz	r5, 80010b2 <__udivmoddi4+0x27a>
 800109a:	ebb3 020e 	subs.w	r2, r3, lr
 800109e:	eb67 0701 	sbc.w	r7, r7, r1
 80010a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80010a6:	40f2      	lsrs	r2, r6
 80010a8:	ea4c 0202 	orr.w	r2, ip, r2
 80010ac:	40f7      	lsrs	r7, r6
 80010ae:	e9c5 2700 	strd	r2, r7, [r5]
 80010b2:	2600      	movs	r6, #0
 80010b4:	4631      	mov	r1, r6
 80010b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ba:	462e      	mov	r6, r5
 80010bc:	4628      	mov	r0, r5
 80010be:	e70b      	b.n	8000ed8 <__udivmoddi4+0xa0>
 80010c0:	4606      	mov	r6, r0
 80010c2:	e6e9      	b.n	8000e98 <__udivmoddi4+0x60>
 80010c4:	4618      	mov	r0, r3
 80010c6:	e6fd      	b.n	8000ec4 <__udivmoddi4+0x8c>
 80010c8:	4543      	cmp	r3, r8
 80010ca:	d2e5      	bcs.n	8001098 <__udivmoddi4+0x260>
 80010cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80010d0:	eb69 0104 	sbc.w	r1, r9, r4
 80010d4:	3801      	subs	r0, #1
 80010d6:	e7df      	b.n	8001098 <__udivmoddi4+0x260>
 80010d8:	4608      	mov	r0, r1
 80010da:	e7d2      	b.n	8001082 <__udivmoddi4+0x24a>
 80010dc:	4660      	mov	r0, ip
 80010de:	e78d      	b.n	8000ffc <__udivmoddi4+0x1c4>
 80010e0:	4681      	mov	r9, r0
 80010e2:	e7b9      	b.n	8001058 <__udivmoddi4+0x220>
 80010e4:	4666      	mov	r6, ip
 80010e6:	e775      	b.n	8000fd4 <__udivmoddi4+0x19c>
 80010e8:	4630      	mov	r0, r6
 80010ea:	e74a      	b.n	8000f82 <__udivmoddi4+0x14a>
 80010ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80010f0:	4439      	add	r1, r7
 80010f2:	e713      	b.n	8000f1c <__udivmoddi4+0xe4>
 80010f4:	3802      	subs	r0, #2
 80010f6:	443c      	add	r4, r7
 80010f8:	e724      	b.n	8000f44 <__udivmoddi4+0x10c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af02      	add	r7, sp, #8
 8001106:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001108:	2334      	movs	r3, #52	; 0x34
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <tx_application_define+0x34>)
 8001112:	4909      	ldr	r1, [pc, #36]	; (8001138 <tx_application_define+0x38>)
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <tx_application_define+0x3c>)
 8001116:	f009 f8a5 	bl	800a264 <_txe_byte_pool_create>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d104      	bne.n	800112a <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <tx_application_define+0x3c>)
 8001122:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f8a1 	bl	800126c <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000458 	.word	0x20000458
 8001138:	0800dd10 	.word	0x0800dd10
 800113c:	20000858 	.word	0x20000858

08001140 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_ADC1_Init+0x98>)
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <MX_ADC1_Init+0x9c>)
 8001156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_ADC1_Init+0x98>)
 800115a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800115e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_ADC1_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_ADC1_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_ADC1_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_ADC1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_ADC1_Init+0x98>)
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <MX_ADC1_Init+0xa0>)
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_ADC1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_ADC1_Init+0x98>)
 800118e:	2201      	movs	r2, #1
 8001190:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_ADC1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_ADC1_Init+0x98>)
 800119c:	2201      	movs	r2, #1
 800119e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_ADC1_Init+0x98>)
 80011a2:	f003 fcef 	bl	8004b84 <HAL_ADC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011ac:	f000 fa15 	bl	80015da <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_ADC1_Init+0x98>)
 80011c2:	f003 fd23 	bl	8004c0c <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 fa05 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200008dc 	.word	0x200008dc
 80011dc:	40012000 	.word	0x40012000
 80011e0:	0f000001 	.word	0x0f000001

080011e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_ADC_MspInit+0x7c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d127      	bne.n	8001256 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_ADC_MspInit+0x80>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <HAL_ADC_MspInit+0x80>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_ADC_MspInit+0x80>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_ADC_MspInit+0x80>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_ADC_MspInit+0x80>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_ADC_MspInit+0x80>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123e:	2310      	movs	r3, #16
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_ADC_MspInit+0x84>)
 8001252:	f004 f89f 	bl	8005394 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40012000 	.word	0x40012000
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	; 0x30
 8001270:	af08      	add	r7, sp, #32
 8001272:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60bb      	str	r3, [r7, #8]
//  		  task_GreenLED, 25,
//  		  stack_GreenLED_task, THREAD_STACK_SIZE, 10, 10, 1,
//  		  TX_AUTO_START);


    tx_thread_create(&ptr_Powerstep01_task, "task_Powerstep",
 800127c:	23b0      	movs	r3, #176	; 0xb0
 800127e:	9306      	str	r3, [sp, #24]
 8001280:	2301      	movs	r3, #1
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	2301      	movs	r3, #1
 8001286:	9304      	str	r3, [sp, #16]
 8001288:	2307      	movs	r3, #7
 800128a:	9303      	str	r3, [sp, #12]
 800128c:	2307      	movs	r3, #7
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <App_ThreadX_Init+0xac>)
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	231e      	movs	r3, #30
 800129c:	4a1f      	ldr	r2, [pc, #124]	; (800131c <App_ThreadX_Init+0xb0>)
 800129e:	4920      	ldr	r1, [pc, #128]	; (8001320 <App_ThreadX_Init+0xb4>)
 80012a0:	4820      	ldr	r0, [pc, #128]	; (8001324 <App_ThreadX_Init+0xb8>)
 80012a2:	f009 f9c3 	bl	800a62c <_txe_thread_create>
  		  task_Powerstep01, 30,
  		  stack_Powerstep01_task, THREAD_STACK_SIZE, 7, 7, 1,
  		  TX_AUTO_START);

    tx_thread_create(&ptr_Serial_task, "task_UART",
 80012a6:	23b0      	movs	r3, #176	; 0xb0
 80012a8:	9306      	str	r3, [sp, #24]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9305      	str	r3, [sp, #20]
 80012ae:	2301      	movs	r3, #1
 80012b0:	9304      	str	r3, [sp, #16]
 80012b2:	2309      	movs	r3, #9
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	2309      	movs	r3, #9
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <App_ThreadX_Init+0xbc>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	230a      	movs	r3, #10
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <App_ThreadX_Init+0xc0>)
 80012c8:	4919      	ldr	r1, [pc, #100]	; (8001330 <App_ThreadX_Init+0xc4>)
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <App_ThreadX_Init+0xc8>)
 80012cc:	f009 f9ae 	bl	800a62c <_txe_thread_create>
//                stack_Torque_task, THREAD_STACK_SIZE, 8, 8, 1,
//                TX_AUTO_START);


    /* Queue creation */
    tx_queue_create(&ptr_motor_cmd_queue, "motor command queue", 1, stack_motor_cmd_queue, QUEUE_STACK_SIZE);
 80012d0:	2338      	movs	r3, #56	; 0x38
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <App_ThreadX_Init+0xcc>)
 80012dc:	2201      	movs	r2, #1
 80012de:	4917      	ldr	r1, [pc, #92]	; (800133c <App_ThreadX_Init+0xd0>)
 80012e0:	4817      	ldr	r0, [pc, #92]	; (8001340 <App_ThreadX_Init+0xd4>)
 80012e2:	f009 f85f 	bl	800a3a4 <_txe_queue_create>
    tx_queue_create(&ptr_uart_cmd_queue, "uart command queue",1, stack_uart_cmd_queue, QUEUE_STACK_SIZE);
 80012e6:	2338      	movs	r3, #56	; 0x38
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <App_ThreadX_Init+0xd8>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	4914      	ldr	r1, [pc, #80]	; (8001348 <App_ThreadX_Init+0xdc>)
 80012f6:	4815      	ldr	r0, [pc, #84]	; (800134c <App_ThreadX_Init+0xe0>)
 80012f8:	f009 f854 	bl	800a3a4 <_txe_queue_create>
    /* tasks initialization */

    task_UART_Init(&ptr_motor_cmd_queue, &ptr_uart_cmd_queue);
 80012fc:	4913      	ldr	r1, [pc, #76]	; (800134c <App_ThreadX_Init+0xe0>)
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <App_ThreadX_Init+0xd4>)
 8001300:	f009 fc28 	bl	800ab54 <task_UART_Init>
    task_Powerstep01_Init(&ptr_motor_cmd_queue, &ptr_uart_cmd_queue);
 8001304:	4911      	ldr	r1, [pc, #68]	; (800134c <App_ThreadX_Init+0xe0>)
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <App_ThreadX_Init+0xd4>)
 8001308:	f009 faf2 	bl	800a8f0 <task_Powerstep01_Init>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20001c88 	.word	0x20001c88
 800131c:	0800a811 	.word	0x0800a811
 8001320:	0800dd24 	.word	0x0800dd24
 8001324:	20000958 	.word	0x20000958
 8001328:	200017d8 	.word	0x200017d8
 800132c:	0800aaa1 	.word	0x0800aaa1
 8001330:	0800dd34 	.word	0x0800dd34
 8001334:	20001278 	.word	0x20001278
 8001338:	20000e78 	.word	0x20000e78
 800133c:	0800dd40 	.word	0x0800dd40
 8001340:	20000a08 	.word	0x20000a08
 8001344:	20002088 	.word	0x20002088
 8001348:	0800dd54 	.word	0x0800dd54
 800134c:	20000e40 	.word	0x20000e40

08001350 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001354:	f007 fc3e 	bl	8008bd4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <MX_GPIO_Init+0x150>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a4c      	ldr	r2, [pc, #304]	; (80014ac <MX_GPIO_Init+0x150>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <MX_GPIO_Init+0x150>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <MX_GPIO_Init+0x150>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a45      	ldr	r2, [pc, #276]	; (80014ac <MX_GPIO_Init+0x150>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b43      	ldr	r3, [pc, #268]	; (80014ac <MX_GPIO_Init+0x150>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <MX_GPIO_Init+0x150>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <MX_GPIO_Init+0x150>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <MX_GPIO_Init+0x150>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b38      	ldr	r3, [pc, #224]	; (80014ac <MX_GPIO_Init+0x150>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a37      	ldr	r2, [pc, #220]	; (80014ac <MX_GPIO_Init+0x150>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <MX_GPIO_Init+0x150>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e8:	4831      	ldr	r0, [pc, #196]	; (80014b0 <MX_GPIO_Init+0x154>)
 80013ea:	f004 fa53 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_CS_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2140      	movs	r1, #64	; 0x40
 80013f2:	4830      	ldr	r0, [pc, #192]	; (80014b4 <MX_GPIO_Init+0x158>)
 80013f4:	f004 fa4e 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	482a      	ldr	r0, [pc, #168]	; (80014b8 <MX_GPIO_Init+0x15c>)
 8001410:	f003 ffc0 	bl	8005394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_Pin;
 8001414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4820      	ldr	r0, [pc, #128]	; (80014b0 <MX_GPIO_Init+0x154>)
 800142e:	f003 ffb1 	bl	8005394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_Pin;
 8001432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001438:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4819      	ldr	r0, [pc, #100]	; (80014b0 <MX_GPIO_Init+0x154>)
 800144a:	f003 ffa3 	bl	8005394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_Pin;
 800144e:	2320      	movs	r3, #32
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001452:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001458:	2301      	movs	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_GPIO_Init+0x158>)
 8001464:	f003 ff96 	bl	8005394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_Pin;
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_GPIO_Init+0x158>)
 8001480:	f003 ff88 	bl	8005394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2017      	movs	r0, #23
 800148a:	f003 feb9 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800148e:	2017      	movs	r0, #23
 8001490:	f003 fed2 	bl	8005238 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2028      	movs	r0, #40	; 0x28
 800149a:	f003 feb1 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800149e:	2028      	movs	r0, #40	; 0x28
 80014a0:	f003 feca 	bl	8005238 <HAL_NVIC_EnableIRQ>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f003 fafa 	bl	8004ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f810 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff48 	bl	800135c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014cc:	f000 fc1e 	bl	8001d0c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80014d0:	f000 f888 	bl	80015e4 <MX_SPI1_Init>
  MX_TIM4_Init();
 80014d4:	f000 fb1a 	bl	8001b0c <MX_TIM4_Init>
  MX_TIM3_Init();
 80014d8:	f000 fa9a 	bl	8001a10 <MX_TIM3_Init>
  MX_ADC1_Init();
 80014dc:	f7ff fe30 	bl	8001140 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  Powerstep01_Board_ReleaseReset(0);
//  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_CS_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80014e0:	f7ff ff36 	bl	8001350 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80014e4:	e7fe      	b.n	80014e4 <main+0x28>
	...

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	; 0x50
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 fcbe 	bl	800ae78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <SystemClock_Config+0xcc>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <SystemClock_Config+0xcc>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <SystemClock_Config+0xcc>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <SystemClock_Config+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <SystemClock_Config+0xd0>)
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <SystemClock_Config+0xd0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001548:	2302      	movs	r3, #2
 800154a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001550:	2310      	movs	r3, #16
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001554:	2302      	movs	r3, #2
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800155c:	2308      	movs	r3, #8
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001560:	2354      	movs	r3, #84	; 0x54
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001564:	2302      	movs	r3, #2
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001568:	2307      	movs	r3, #7
 800156a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4618      	mov	r0, r3
 8001572:	f004 f9cd 	bl	8005910 <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800157c:	f000 f82d 	bl	80015da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	2302      	movs	r3, #2
 8001586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fc2f 	bl	8005e00 <HAL_RCC_ClockConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015a8:	f000 f817 	bl	80015da <Error_Handler>
  }
}
 80015ac:	bf00      	nop
 80015ae:	3750      	adds	r7, #80	; 0x50
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000

080015bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ce:	f003 fa95 	bl	8004afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015de:	b672      	cpsid	i
}
 80015e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <Error_Handler+0x8>

080015e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_SPI1_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_SPI1_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_SPI1_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SPI1_Init+0x64>)
 8001604:	2202      	movs	r2, #2
 8001606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_SPI1_Init+0x64>)
 800160a:	2201      	movs	r2, #1
 800160c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SPI1_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_SPI1_Init+0x64>)
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_SPI1_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_SPI1_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_SPI1_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_SPI1_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_SPI1_Init+0x64>)
 8001636:	f004 fe11 	bl	800625c <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001640:	f7ff ffcb 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20002888 	.word	0x20002888
 800164c:	40013000 	.word	0x40013000

08001650 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_SPI_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12b      	bne.n	80016ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 800167c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016aa:	23e0      	movs	r3, #224	; 0xe0
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ba:	2305      	movs	r3, #5
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_SPI_MspInit+0x8c>)
 80016c6:	f003 fe65 	bl	8005394 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40013000 	.word	0x40013000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_MspInit+0x4c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	201c      	movs	r0, #28
 8001746:	f003 fd5b 	bl	8005200 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174a:	201c      	movs	r0, #28
 800174c:	f003 fd74 	bl	8005238 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_InitTick+0xa8>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <HAL_InitTick+0xa8>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_InitTick+0xa8>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f004 fd3e 	bl	80061f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800177c:	f004 fd14 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8001780:	4603      	mov	r3, r0
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_InitTick+0xac>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	3b01      	subs	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0xb0>)
 8001796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_InitTick+0xb0>)
 800179e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_InitTick+0xb0>)
 80017a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_InitTick+0xb0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_InitTick+0xb0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80017b6:	480a      	ldr	r0, [pc, #40]	; (80017e0 <HAL_InitTick+0xb0>)
 80017b8:	f005 f846 	bl	8006848 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <HAL_InitTick+0xb0>)
 80017c4:	f005 f890 	bl	80068e8 <HAL_TIM_Base_Start_IT>
 80017c8:	4603      	mov	r3, r0
 80017ca:	e000      	b.n	80017ce <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	431bde83 	.word	0x431bde83
 80017e0:	200028e0 	.word	0x200028e0

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_BUSY_Pin);
 8001814:	2020      	movs	r0, #32
 8001816:	f004 f857 	bl	80058c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM2_IRQHandler+0x10>)
 8001826:	f005 fac1 	bl	8006dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200028e0 	.word	0x200028e0

08001834 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <USART2_IRQHandler+0x10>)
 800183a:	f006 fa43 	bl	8007cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200029b8 	.word	0x200029b8

08001848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_FLAG_Pin);
 800184c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001850:	f004 f83a 	bl	80058c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001858:	f004 f836 	bl	80058c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800187a:	f009 fad3 	bl	800ae24 <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018a2:	e7fe      	b.n	80018a2 <_exit+0x12>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
	}

return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
	}
	return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f009 fa38 	bl	800ae24 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20018000 	.word	0x20018000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	2000088c 	.word	0x2000088c
 80019e8:	20003358 	.word	0x20003358

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a40:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <MX_TIM3_Init+0xf8>)
 8001a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a48:	223f      	movs	r2, #63	; 0x3f
 8001a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a64:	4827      	ldr	r0, [pc, #156]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a66:	f004 feef 	bl	8006848 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001a70:	f7ff fdb3 	bl	80015da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a82:	f005 fb5d 	bl	8007140 <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001a8c:	f7ff fda5 	bl	80015da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a90:	481c      	ldr	r0, [pc, #112]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001a92:	f004 ff8b 	bl	80069ac <HAL_TIM_PWM_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001a9c:	f7ff fd9d 	bl	80015da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 0320 	add.w	r3, r7, #32
 8001aac:	4619      	mov	r1, r3
 8001aae:	4815      	ldr	r0, [pc, #84]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001ab0:	f005 ff02 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001aba:	f7ff fd8e 	bl	80015da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	; 0x60
 8001ac0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480b      	ldr	r0, [pc, #44]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001ad6:	f005 fa71 	bl	8006fbc <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ae0:	f7ff fd7b 	bl	80015da <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM3_Init+0xf4>)
 8001af6:	f000 f8a7 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8001afa:	bf00      	nop
 8001afc:	3738      	adds	r7, #56	; 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20002970 	.word	0x20002970
 8001b08:	40000400 	.word	0x40000400

08001b0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b30:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <MX_TIM4_Init+0xb0>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64;
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b54:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b56:	f004 ff29 	bl	80069ac <HAL_TIM_PWM_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001b60:	f7ff fd3b 	bl	80015da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b6c:	f107 0320 	add.w	r3, r7, #32
 8001b70:	4619      	mov	r1, r3
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b74:	f005 fea0 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001b7e:	f7ff fd2c 	bl	80015da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	2360      	movs	r3, #96	; 0x60
 8001b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	220c      	movs	r2, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001b9a:	f005 fa0f 	bl	8006fbc <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ba4:	f7ff fd19 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM4_Init+0xac>)
 8001baa:	f000 f84d 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20002928 	.word	0x20002928
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_TIM_Base_MspInit+0x3c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10d      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_TIM_Base_MspInit+0x40>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_TIM_Base_MspInit+0x40>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_TIM_Base_MspInit+0x40>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10d      	bne.n	8001c32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_TIM_PWM_MspInit+0x40>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_TIM_PWM_MspInit+0x40>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_TIM_PWM_MspInit+0x40>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40000800 	.word	0x40000800
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <HAL_TIM_MspPostInit+0xb0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d11e      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK_Pin;
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c96:	2302      	movs	r3, #2
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4817      	ldr	r0, [pc, #92]	; (8001d00 <HAL_TIM_MspPostInit+0xb8>)
 8001ca2:	f003 fb77 	bl	8005394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ca6:	e023      	b.n	8001cf0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <HAL_TIM_MspPostInit+0xbc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_BRAKE_Pin;
 8001cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_BRAKE_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <HAL_TIM_MspPostInit+0xc0>)
 8001cec:	f003 fb52 	bl	8005394 <HAL_GPIO_Init>
}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40020400 	.word	0x40020400

08001d0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <MX_USART2_UART_Init+0x50>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d46:	f005 fe39 	bl	80079bc <HAL_UART_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001d50:	f7ff fc43 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200029b8 	.word	0x200029b8
 8001d5c:	40004400 	.word	0x40004400

08001d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <HAL_UART_MspInit+0x94>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d133      	bne.n	8001dea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dba:	230c      	movs	r3, #12
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dca:	2307      	movs	r3, #7
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <HAL_UART_MspInit+0x9c>)
 8001dd6:	f003 fadd 	bl	8005394 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2026      	movs	r0, #38	; 0x26
 8001de0:	f003 fa0e 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001de4:	2026      	movs	r0, #38	; 0x26
 8001de6:	f003 fa27 	bl	8005238 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40004400 	.word	0x40004400
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_UART_MspDeInit+0x34>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10c      	bne.n	8001e2c <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_UART_MspDeInit+0x38>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <HAL_UART_MspDeInit+0x38>)
 8001e18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001e1e:	210c      	movs	r1, #12
 8001e20:	4806      	ldr	r0, [pc, #24]	; (8001e3c <HAL_UART_MspDeInit+0x3c>)
 8001e22:	f003 fc3b 	bl	800569c <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001e26:	2026      	movs	r0, #38	; 0x26
 8001e28:	f003 fa14 	bl	8005254 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40004400 	.word	0x40004400
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e46:	490e      	ldr	r1, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e5c:	4c0b      	ldr	r4, [pc, #44]	; (8001e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e6a:	f7ff fdbf 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f008 ffdf 	bl	800ae30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7ff fb23 	bl	80014bc <main>
  bx  lr    
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8001e84:	0800e20c 	.word	0x0800e20c
  ldr r2, =_sbss
 8001e88:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8001e8c:	20003354 	.word	0x20003354

08001e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>
	...

08001e94 <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <Powerstep01_AttachErrorHandler+0x1c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200029fc 	.word	0x200029fc

08001eb4 <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <Powerstep01_AttachFlagInterrupt+0x1c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20002a04 	.word	0x20002a04

08001ed4 <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <Powerstep01_AttachBusyInterrupt+0x1c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20002a00 	.word	0x20002a00

08001ef4 <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <Powerstep01_ReadId+0x14>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200008ae 	.word	0x200008ae

08001f0c <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <Powerstep01_Init+0x84>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fabb 	bl	8004496 <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 8001f20:	f002 fb20 	bl	8004564 <Powerstep01_Board_SpiInit>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 8001f2a:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001f2e:	f001 f961 	bl	80031f4 <Powerstep01_ErrorHandler>
  }
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 8001f32:	f002 fabb 	bl	80044ac <Powerstep01_Board_StepClockInit>

  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <Powerstep01_Init+0x84>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 faed 	bl	800451c <Powerstep01_Board_ReleaseReset>

  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f002 fa8a 	bl	800445c <Powerstep01_Board_Delay>

  if (pInit == 0)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <Powerstep01_Init+0x84>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 fa41 	bl	80033dc <Powerstep01_SetRegisterToPredefinedValues>
 8001f5a:	e006      	b.n	8001f6a <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <Powerstep01_Init+0x84>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fdf9 	bl	8003b5c <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <Powerstep01_Init+0x84>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fa2a 	bl	80023ca <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 8001f76:	f000 fbdb 	bl	8002730 <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <Powerstep01_Init+0x84>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <Powerstep01_Init+0x84>)
 8001f84:	801a      	strh	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200008ae 	.word	0x200008ae

08001f94 <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 8001f98:	f002 fb2a 	bl	80045f0 <Powerstep01_Board_BUSY_PIN_GetState>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 8001fa6:	2300      	movs	r3, #0
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}

08001fac <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 8001fb0:	f002 fb2a 	bl	8004608 <Powerstep01_Board_FLAG_PIN_GetState>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 8001fbe:	2300      	movs	r3, #0
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	; (80021c0 <Powerstep01_CmdGetParam+0x1fc>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f080 80ea 	bcs.w	80021b6 <Powerstep01_CmdGetParam+0x1f2>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <Powerstep01_CmdGetParam+0x1fc>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8001ffa:	4b72      	ldr	r3, [pc, #456]	; (80021c4 <Powerstep01_CmdGetParam+0x200>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8002006:	f002 fa3d 	bl	8004484 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 800200a:	2300      	movs	r3, #0
 800200c:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e030      	b.n	8002076 <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8002014:	4a6c      	ldr	r2, [pc, #432]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 800201e:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	3303      	adds	r3, #3
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800202a:	4a67      	ldr	r2, [pc, #412]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	3306      	adds	r3, #6
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8002036:	4a64      	ldr	r2, [pc, #400]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	3309      	adds	r3, #9
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 8002042:	4a62      	ldr	r2, [pc, #392]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 800204c:	4a5f      	ldr	r2, [pc, #380]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	3303      	adds	r3, #3
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 8002058:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	3306      	adds	r3, #6
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;
 8002064:	4a59      	ldr	r2, [pc, #356]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	3309      	adds	r3, #9
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	3301      	adds	r3, #1
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <Powerstep01_CmdGetParam+0x1fc>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4293      	cmp	r3, r2
 8002082:	d3c7      	bcc.n	8002014 <Powerstep01_CmdGetParam+0x50>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	2b1a      	cmp	r3, #26
 800208a:	d851      	bhi.n	8002130 <Powerstep01_CmdGetParam+0x16c>
 800208c:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <Powerstep01_CmdGetParam+0xd0>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	08002101 	.word	0x08002101
 8002098:	08002117 	.word	0x08002117
 800209c:	08002101 	.word	0x08002101
 80020a0:	08002101 	.word	0x08002101
 80020a4:	08002117 	.word	0x08002117
 80020a8:	08002117 	.word	0x08002117
 80020ac:	08002117 	.word	0x08002117
 80020b0:	08002117 	.word	0x08002117
 80020b4:	08002131 	.word	0x08002131
 80020b8:	08002131 	.word	0x08002131
 80020bc:	08002131 	.word	0x08002131
 80020c0:	08002131 	.word	0x08002131
 80020c4:	08002117 	.word	0x08002117
 80020c8:	08002131 	.word	0x08002131
 80020cc:	08002131 	.word	0x08002131
 80020d0:	08002131 	.word	0x08002131
 80020d4:	08002131 	.word	0x08002131
 80020d8:	08002131 	.word	0x08002131
 80020dc:	08002131 	.word	0x08002131
 80020e0:	08002131 	.word	0x08002131
 80020e4:	08002117 	.word	0x08002117
 80020e8:	08002131 	.word	0x08002131
 80020ec:	08002131 	.word	0x08002131
 80020f0:	08002117 	.word	0x08002117
 80020f4:	08002131 	.word	0x08002131
 80020f8:	08002117 	.word	0x08002117
 80020fc:	08002117 	.word	0x08002117
      switch (param)
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	7b7b      	ldrb	r3, [r7, #13]
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	b2d1      	uxtb	r1, r2
 800210c:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 800210e:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 8002110:	2303      	movs	r3, #3
 8002112:	73fb      	strb	r3, [r7, #15]
          break;
 8002114:	e018      	b.n	8002148 <Powerstep01_CmdGetParam+0x184>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	7b7b      	ldrb	r3, [r7, #13]
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	b2d1      	uxtb	r1, r2
 8002122:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 8002124:	4413      	add	r3, r2
 8002126:	460a      	mov	r2, r1
 8002128:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 2;
 800212a:	2302      	movs	r3, #2
 800212c:	73fb      	strb	r3, [r7, #15]
          break;
 800212e:	e00b      	b.n	8002148 <Powerstep01_CmdGetParam+0x184>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	7b7b      	ldrb	r3, [r7, #13]
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d1      	uxtb	r1, r2
 800213c:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 800213e:	4413      	add	r3, r2
 8002140:	460a      	mov	r2, r1
 8002142:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8002148:	f002 f993 	bl	8004472 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 800214c:	2301      	movs	r3, #1
 800214e:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <Powerstep01_CmdGetParam+0x200>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f47f af4f 	bne.w	8001ffa <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	f1c3 0303 	rsb	r3, r3, #3
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e011      	b.n	800218a <Powerstep01_CmdGetParam+0x1c6>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <Powerstep01_CmdGetParam+0x204>)
 8002170:	1898      	adds	r0, r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 800217c:	4413      	add	r3, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f001 fee8 	bl	8003f54 <Powerstep01_WriteBytes>
         loop++)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	3301      	adds	r3, #1
 8002188:	613b      	str	r3, [r7, #16]
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d9ea      	bls.n	8002166 <Powerstep01_CmdGetParam+0x1a2>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 8002194:	4413      	add	r3, r2
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	041b      	lsls	r3, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 800219a:	7b7a      	ldrb	r2, [r7, #13]
 800219c:	490b      	ldr	r1, [pc, #44]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 800219e:	440a      	add	r2, r1
 80021a0:	7992      	ldrb	r2, [r2, #6]
 80021a2:	0212      	lsls	r2, r2, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80021a4:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);
 80021a6:	7b7a      	ldrb	r2, [r7, #13]
 80021a8:	4908      	ldr	r1, [pc, #32]	; (80021cc <Powerstep01_CmdGetParam+0x208>)
 80021aa:	440a      	add	r2, r1
 80021ac:	7a52      	ldrb	r2, [r2, #9]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80021b2:	f002 f967 	bl	8004484 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 80021b6:	697b      	ldr	r3, [r7, #20]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000890 	.word	0x20000890
 80021c4:	200008ac 	.word	0x200008ac
 80021c8:	20000894 	.word	0x20000894
 80021cc:	200008a0 	.word	0x200008a0

080021d0 <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 80021de:	4b48      	ldr	r3, [pc, #288]	; (8002300 <Powerstep01_CmdGetStatus+0x130>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	79fa      	ldrb	r2, [r7, #7]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	f080 8084 	bcs.w	80022f4 <Powerstep01_CmdGetStatus+0x124>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80021ec:	4b44      	ldr	r3, [pc, #272]	; (8002300 <Powerstep01_CmdGetStatus+0x130>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 8002200:	4b40      	ldr	r3, [pc, #256]	; (8002304 <Powerstep01_CmdGetStatus+0x134>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <Powerstep01_CmdGetStatus+0x44>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800220c:	f002 f93a 	bl	8004484 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e030      	b.n	800227c <Powerstep01_CmdGetStatus+0xac>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 800221a:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <Powerstep01_CmdGetStatus+0x138>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002224:	4a38      	ldr	r2, [pc, #224]	; (8002308 <Powerstep01_CmdGetStatus+0x138>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	3303      	adds	r3, #3
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <Powerstep01_CmdGetStatus+0x138>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	3306      	adds	r3, #6
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 800223c:	4a32      	ldr	r2, [pc, #200]	; (8002308 <Powerstep01_CmdGetStatus+0x138>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	3309      	adds	r3, #9
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 8002248:	4a30      	ldr	r2, [pc, #192]	; (800230c <Powerstep01_CmdGetStatus+0x13c>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 8002252:	4a2e      	ldr	r2, [pc, #184]	; (800230c <Powerstep01_CmdGetStatus+0x13c>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	3303      	adds	r3, #3
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 800225e:	4a2b      	ldr	r2, [pc, #172]	; (800230c <Powerstep01_CmdGetStatus+0x13c>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	3306      	adds	r3, #6
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;
 800226a:	4a28      	ldr	r2, [pc, #160]	; (800230c <Powerstep01_CmdGetStatus+0x13c>)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	3309      	adds	r3, #9
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3301      	adds	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <Powerstep01_CmdGetStatus+0x130>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4293      	cmp	r3, r2
 8002288:	d3c7      	bcc.n	800221a <Powerstep01_CmdGetStatus+0x4a>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 800228a:	7bbb      	ldrb	r3, [r7, #14]
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <Powerstep01_CmdGetStatus+0x138>)
 800228e:	21d0      	movs	r1, #208	; 0xd0
 8002290:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8002292:	f002 f8ee 	bl	8004472 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <Powerstep01_CmdGetStatus+0x134>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ad      	bne.n	8002200 <Powerstep01_CmdGetStatus+0x30>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	e011      	b.n	80022ce <Powerstep01_CmdGetStatus+0xfe>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <Powerstep01_CmdGetStatus+0x138>)
 80022b4:	1898      	adds	r0, r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <Powerstep01_CmdGetStatus+0x13c>)
 80022c0:	4413      	add	r3, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f001 fe46 	bl	8003f54 <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	3301      	adds	r3, #1
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d9ea      	bls.n	80022aa <Powerstep01_CmdGetStatus+0xda>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 80022d4:	7bbb      	ldrb	r3, [r7, #14]
 80022d6:	4a0d      	ldr	r2, [pc, #52]	; (800230c <Powerstep01_CmdGetStatus+0x13c>)
 80022d8:	4413      	add	r3, r2
 80022da:	78db      	ldrb	r3, [r3, #3]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <Powerstep01_CmdGetStatus+0x13c>)
 80022e4:	440b      	add	r3, r1
 80022e6:	799b      	ldrb	r3, [r3, #6]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 80022f0:	f002 f8c8 	bl	8004484 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 80022f4:	8afb      	ldrh	r3, [r7, #22]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000890 	.word	0x20000890
 8002304:	200008ac 	.word	0x200008ac
 8002308:	20000894 	.word	0x20000894
 800230c:	200008a0 	.word	0x200008a0

08002310 <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2200      	movs	r2, #0
 800231e:	2170      	movs	r1, #112	; 0x70
 8002320:	4618      	mov	r0, r3
 8002322:	f000 ff93 	bl	800324c <Powerstep01_SendCommand>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2200      	movs	r2, #0
 800233c:	2178      	movs	r1, #120	; 0x78
 800233e:	4618      	mov	r0, r3
 8002340:	f000 ff84 	bl	800324c <Powerstep01_SendCommand>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2160      	movs	r1, #96	; 0x60
 800235e:	4618      	mov	r0, r3
 8002360:	f000 ff74 	bl	800324c <Powerstep01_SendCommand>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	603a      	str	r2, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
 8002378:	460b      	mov	r3, r1
 800237a:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8002382:	b2d9      	uxtb	r1, r3
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 ff5f 	bl	800324c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
 80023a2:	460b      	mov	r3, r1
 80023a4:	71bb      	strb	r3, [r7, #6]
 80023a6:	4613      	mov	r3, r2
 80023a8:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 80023aa:	79ba      	ldrb	r2, [r7, #6]
 80023ac:	797b      	ldrb	r3, [r7, #5]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f063 037d 	orn	r3, r3, #125	; 0x7d
 80023b6:	b2d9      	uxtb	r1, r3
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 ff45 	bl	800324c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	2200      	movs	r2, #0
 80023d8:	21a8      	movs	r1, #168	; 0xa8
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 ff36 	bl	800324c <Powerstep01_SendCommand>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	2200      	movs	r2, #0
 80023f6:	21b8      	movs	r1, #184	; 0xb8
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 ff27 	bl	800324c <Powerstep01_SendCommand>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	603a      	str	r2, [r7, #0]
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	460b      	mov	r3, r1
 8002414:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241c:	b2d9      	uxtb	r1, r3
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 ff12 	bl	800324c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 ff03 	bl	800324c <Powerstep01_SendCommand>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
 8002458:	460b      	mov	r3, r1
 800245a:	71bb      	strb	r3, [r7, #6]
 800245c:	4613      	mov	r3, r2
 800245e:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 8002460:	79ba      	ldrb	r2, [r7, #6]
 8002462:	797b      	ldrb	r3, [r7, #5]
 8002464:	4313      	orrs	r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f063 036d 	orn	r3, r3, #109	; 0x6d
 800246c:	b2d9      	uxtb	r1, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2200      	movs	r2, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f000 feea 	bl	800324c <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2200      	movs	r2, #0
 800248e:	21c0      	movs	r1, #192	; 0xc0
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fedb 	bl	800324c <Powerstep01_SendCommand>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2200      	movs	r2, #0
 80024ac:	21d8      	movs	r1, #216	; 0xd8
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fecc 	bl	800324c <Powerstep01_SendCommand>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	603a      	str	r2, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
 80024c8:	460b      	mov	r3, r1
 80024ca:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80024d2:	b2d9      	uxtb	r1, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 feb7 	bl	800324c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 80024f6:	4b70      	ldr	r3, [pc, #448]	; (80026b8 <Powerstep01_CmdSetParam+0x1d0>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	429a      	cmp	r2, r3
 8002500:	f080 80d6 	bcs.w	80026b0 <Powerstep01_CmdSetParam+0x1c8>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002508:	4b6b      	ldr	r3, [pc, #428]	; (80026b8 <Powerstep01_CmdSetParam+0x1d0>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 8002518:	2300      	movs	r3, #0
 800251a:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 800251c:	4b67      	ldr	r3, [pc, #412]	; (80026bc <Powerstep01_CmdSetParam+0x1d4>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002522:	7cbb      	ldrb	r3, [r7, #18]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8002528:	f001 ffac 	bl	8004484 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 800252c:	2300      	movs	r3, #0
 800252e:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e019      	b.n	800256a <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8002536:	4a62      	ldr	r2, [pc, #392]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	4413      	add	r3, r2
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002540:	4a5f      	ldr	r2, [pc, #380]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4413      	add	r3, r2
 8002546:	3303      	adds	r3, #3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800254c:	4a5c      	ldr	r2, [pc, #368]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4413      	add	r3, r2
 8002552:	3306      	adds	r3, #6
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8002558:	4a59      	ldr	r2, [pc, #356]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4413      	add	r3, r2
 800255e:	3309      	adds	r3, #9
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <Powerstep01_CmdSetParam+0x1d0>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	4293      	cmp	r3, r2
 8002576:	d3de      	bcc.n	8002536 <Powerstep01_CmdSetParam+0x4e>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3b01      	subs	r3, #1
 800257c:	2b19      	cmp	r3, #25
 800257e:	d861      	bhi.n	8002644 <Powerstep01_CmdSetParam+0x15c>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <Powerstep01_CmdSetParam+0xa0>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	080025f1 	.word	0x080025f1
 800258c:	08002621 	.word	0x08002621
 8002590:	080025f1 	.word	0x080025f1
 8002594:	08002645 	.word	0x08002645
 8002598:	08002621 	.word	0x08002621
 800259c:	08002621 	.word	0x08002621
 80025a0:	08002621 	.word	0x08002621
 80025a4:	08002621 	.word	0x08002621
 80025a8:	08002645 	.word	0x08002645
 80025ac:	08002645 	.word	0x08002645
 80025b0:	08002645 	.word	0x08002645
 80025b4:	08002645 	.word	0x08002645
 80025b8:	08002621 	.word	0x08002621
 80025bc:	08002645 	.word	0x08002645
 80025c0:	08002645 	.word	0x08002645
 80025c4:	08002645 	.word	0x08002645
 80025c8:	08002645 	.word	0x08002645
 80025cc:	08002645 	.word	0x08002645
 80025d0:	08002645 	.word	0x08002645
 80025d4:	08002645 	.word	0x08002645
 80025d8:	08002621 	.word	0x08002621
 80025dc:	08002645 	.word	0x08002645
 80025e0:	08002645 	.word	0x08002645
 80025e4:	08002621 	.word	0x08002621
 80025e8:	08002645 	.word	0x08002645
 80025ec:	08002621 	.word	0x08002621
      }
      switch (param)
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 80025f0:	7c7b      	ldrb	r3, [r7, #17]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	b2d1      	uxtb	r1, r2
 80025f6:	4a32      	ldr	r2, [pc, #200]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 80025f8:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0c1a      	lsrs	r2, r3, #16
 80025fe:	7c7b      	ldrb	r3, [r7, #17]
 8002600:	b2d1      	uxtb	r1, r2
 8002602:	4a2f      	ldr	r2, [pc, #188]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 8002604:	4413      	add	r3, r2
 8002606:	460a      	mov	r2, r1
 8002608:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0a1a      	lsrs	r2, r3, #8
 800260e:	7c7b      	ldrb	r3, [r7, #17]
 8002610:	b2d1      	uxtb	r1, r2
 8002612:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 8002614:	4413      	add	r3, r2
 8002616:	460a      	mov	r2, r1
 8002618:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 3;
 800261a:	2303      	movs	r3, #3
 800261c:	74fb      	strb	r3, [r7, #19]
          break;
 800261e:	e01a      	b.n	8002656 <Powerstep01_CmdSetParam+0x16e>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8002620:	7c7b      	ldrb	r3, [r7, #17]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	b2d1      	uxtb	r1, r2
 8002626:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 8002628:	4413      	add	r3, r2
 800262a:	460a      	mov	r2, r1
 800262c:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0a1a      	lsrs	r2, r3, #8
 8002632:	7c7b      	ldrb	r3, [r7, #17]
 8002634:	b2d1      	uxtb	r1, r2
 8002636:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 8002638:	4413      	add	r3, r2
 800263a:	460a      	mov	r2, r1
 800263c:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 2;
 800263e:	2302      	movs	r3, #2
 8002640:	74fb      	strb	r3, [r7, #19]
          break;
 8002642:	e008      	b.n	8002656 <Powerstep01_CmdSetParam+0x16e>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8002644:	7c7b      	ldrb	r3, [r7, #17]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	b2d1      	uxtb	r1, r2
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 800264c:	4413      	add	r3, r2
 800264e:	460a      	mov	r2, r1
 8002650:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8002656:	7c7b      	ldrb	r3, [r7, #17]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	b2d1      	uxtb	r1, r2
 800265c:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 800265e:	4413      	add	r3, r2
 8002660:	460a      	mov	r2, r1
 8002662:	725a      	strb	r2, [r3, #9]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8002664:	f001 ff05 	bl	8004472 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8002668:	2301      	movs	r3, #1
 800266a:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <Powerstep01_CmdSetParam+0x1d4>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	f47f af52 	bne.w	800251c <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	f1c3 0303 	rsb	r3, r3, #3
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e011      	b.n	80026a6 <Powerstep01_CmdSetParam+0x1be>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <Powerstep01_CmdSetParam+0x1d8>)
 800268c:	1898      	adds	r0, r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <Powerstep01_CmdSetParam+0x1dc>)
 8002698:	4413      	add	r3, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f001 fc5a 	bl	8003f54 <Powerstep01_WriteBytes>
         loop++)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d9ea      	bls.n	8002682 <Powerstep01_CmdSetParam+0x19a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80026ac:	f001 feea 	bl	8004484 <Powerstep01_Board_EnableIrq>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000890 	.word	0x20000890
 80026bc:	200008ac 	.word	0x200008ac
 80026c0:	20000894 	.word	0x20000894
 80026c4:	200008a0 	.word	0x200008a0

080026c8 <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2200      	movs	r2, #0
 80026d6:	21a0      	movs	r1, #160	; 0xa0
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fdb7 	bl	800324c <Powerstep01_SendCommand>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	2200      	movs	r2, #0
 80026f4:	21b0      	movs	r1, #176	; 0xb0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fda8 	bl	800324c <Powerstep01_SendCommand>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	460a      	mov	r2, r1
 800270e:	71fb      	strb	r3, [r7, #7]
 8002710:	4613      	mov	r3, r2
 8002712:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8002714:	79bb      	ldrb	r3, [r7, #6]
 8002716:	f043 0358 	orr.w	r3, r3, #88	; 0x58
 800271a:	b2d9      	uxtb	r1, r3
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2200      	movs	r2, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fd93 	bl	800324c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 8002736:	2300      	movs	r3, #0
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	e028      	b.n	800278e <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8002740:	21d0      	movs	r1, #208	; 0xd0
 8002742:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8002748:	4413      	add	r3, r2
 800274a:	2200      	movs	r2, #0
 800274c:	70da      	strb	r2, [r3, #3]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8002752:	4413      	add	r3, r2
 8002754:	2200      	movs	r2, #0
 8002756:	719a      	strb	r2, [r3, #6]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 800275c:	4413      	add	r3, r2
 800275e:	2200      	movs	r2, #0
 8002760:	725a      	strb	r2, [r3, #9]
     spiRxBursts[0][loop] = 0;
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 8002766:	2100      	movs	r1, #0
 8002768:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 800276e:	4413      	add	r3, r2
 8002770:	2200      	movs	r2, #0
 8002772:	70da      	strb	r2, [r3, #3]
     spiRxBursts[2][loop] = 0;
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 8002778:	4413      	add	r3, r2
 800277a:	2200      	movs	r2, #0
 800277c:	719a      	strb	r2, [r3, #6]
     spiRxBursts[3][loop] = 0;
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 8002782:	4413      	add	r3, r2
 8002784:	2200      	movs	r2, #0
 8002786:	725a      	strb	r2, [r3, #9]
  for (loop = 0; loop < numberOfDevices; loop++)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	3301      	adds	r3, #1
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <Powerstep01_FetchAndClearAllStatus+0xac>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	79fa      	ldrb	r2, [r7, #7]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3d0      	bcc.n	800273c <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e011      	b.n	80027c4 <Powerstep01_FetchAndClearAllStatus+0x94>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS +
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS;
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80027a0:	79fa      	ldrb	r2, [r7, #7]
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80027aa:	1898      	adds	r0, r3, r2
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80027b6:	4413      	add	r3, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f001 fbcb 	bl	8003f54 <Powerstep01_WriteBytes>
       loop++)
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	3301      	adds	r3, #1
 80027c2:	71fb      	strb	r3, [r7, #7]
  for (loop = 0;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d9ea      	bls.n	80027a0 <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000894 	.word	0x20000894
 80027d8:	200008a0 	.word	0x200008a0
 80027dc:	20000890 	.word	0x20000890

080027e0 <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <Powerstep01_GetFetchedStatus+0x54>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d215      	bcs.n	8002826 <Powerstep01_GetFetchedStatus+0x46>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <Powerstep01_GetFetchedStatus+0x54>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <Powerstep01_GetFetchedStatus+0x58>)
 800280e:	4413      	add	r3, r2
 8002810:	78db      	ldrb	r3, [r3, #3]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	7b7b      	ldrb	r3, [r7, #13]
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <Powerstep01_GetFetchedStatus+0x58>)
 800281a:	440b      	add	r3, r1
 800281c:	799b      	ldrb	r3, [r3, #6]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b21b      	sxth	r3, r3
 8002824:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 8002826:	89fb      	ldrh	r3, [r7, #14]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20000890 	.word	0x20000890
 8002838:	200008a0 	.word	0x200008a0

0800283c <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <Powerstep01_GetMotorHandle+0x10>)
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	20000004 	.word	0x20000004

08002850 <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 8002854:	4b02      	ldr	r3, [pc, #8]	; (8002860 <Powerstep01_GetFwVersion+0x10>)
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	00010500 	.word	0x00010500

08002864 <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2103      	movs	r1, #3
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fba6 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002878:	4603      	mov	r3, r0
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fc84 	bl	8003188 <Powerstep01_ConvertPosition>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <Powerstep01_GetNbDevices+0x14>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	20000890 	.word	0x20000890

080028a4 <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2116      	movs	r1, #22
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fb85 	bl	8001fc4 <Powerstep01_CmdGetParam>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fb77 	bl	8001fc4 <Powerstep01_CmdGetParam>
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	3b01      	subs	r3, #1
 80028dc:	2b14      	cmp	r3, #20
 80028de:	f200 8090 	bhi.w	8002a02 <Powerstep01_GetAnalogValue+0x15e>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <Powerstep01_GetAnalogValue+0x44>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	0800293d 	.word	0x0800293d
 80028ec:	08002a03 	.word	0x08002a03
 80028f0:	0800293d 	.word	0x0800293d
 80028f4:	0800295d 	.word	0x0800295d
 80028f8:	08002951 	.word	0x08002951
 80028fc:	08002951 	.word	0x08002951
 8002900:	08002969 	.word	0x08002969
 8002904:	08002975 	.word	0x08002975
 8002908:	080029c1 	.word	0x080029c1
 800290c:	080029c1 	.word	0x080029c1
 8002910:	080029c1 	.word	0x080029c1
 8002914:	080029c1 	.word	0x080029c1
 8002918:	0800299d 	.word	0x0800299d
 800291c:	080029df 	.word	0x080029df
 8002920:	080029e5 	.word	0x080029e5
 8002924:	080029e5 	.word	0x080029e5
 8002928:	080029a9 	.word	0x080029a9
 800292c:	08002a03 	.word	0x08002a03
 8002930:	080029b5 	.word	0x080029b5
 8002934:	080029b5 	.word	0x080029b5
 8002938:	08002989 	.word	0x08002989
  float value;
  switch (param)
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fc23 	bl	8003188 <Powerstep01_ConvertPosition>
 8002942:	ee07 0a90 	vmov	s15, r0
 8002946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294a:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 800294e:	e061      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f001 fb41 	bl	8003fd8 <Powerstep01_AccDec_RegVal_to_Steps_s2>
 8002956:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800295a:	e05b      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f001 fcbd 	bl	80042dc <Powerstep01_Speed_RegVal_to_Steps_s>
 8002962:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002966:	e055      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f001 fc6f 	bl	800424c <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 800296e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002972:	e04f      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f001 fc97 	bl	80042b0 <Powerstep01_MinSpd_RegVal_to_Steps_s>
 8002982:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 8002986:	e045      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298e:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f001 fb83 	bl	800409c <Powerstep01_FSSpd_RegVal_to_Steps_s>
 8002996:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800299a:	e03b      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f001 fbb5 	bl	800410c <Powerstep01_IntSpd_RegVal_to_Steps_s>
 80029a2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80029a6:	e035      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f001 fbe7 	bl	800417c <Powerstep01_KTherm_RegVal_to_Comp>
 80029ae:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80029b2:	e02f      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f001 fccb 	bl	8004350 <Powerstep01_StallOcd_RegVal_to_Th>
 80029ba:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80029be:	e029      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <Powerstep01_GetAnalogValue+0x12e>
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f001 fc10 	bl	80041ec <Powerstep01_Kval_RegVal_to_Perc>
 80029cc:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 80029d0:	e020      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f001 fcf8 	bl	80043c8 <Powerstep01_Tval_RegVal_to_RefVoltage>
 80029d8:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80029dc:	e01a      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d016      	beq.n	8002a12 <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <Powerstep01_GetAnalogValue+0x152>
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f001 fb28 	bl	8004040 <Powerstep01_BEMFslope_RegVal_to_Perc>
 80029f0:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 80029f4:	e00e      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f001 fd1b 	bl	8004432 <Powerstep01_Tmin_RegVal_to_Time>
 80029fc:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002a00:	e008      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0c:	edc7 7a05 	vstr	s15, [r7, #20]
 8002a10:	e000      	b.n	8002a14 <Powerstep01_GetAnalogValue+0x170>
        break;
 8002a12:	bf00      	nop
  }
  return value;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	ee07 3a90 	vmov	s15, r3
}
 8002a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fac6 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fba4 	bl	8003188 <Powerstep01_ConvertPosition>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fbba 	bl	80021d0 <Powerstep01_CmdGetStatus>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 8002a6a:	2300      	movs	r3, #0
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	603a      	str	r2, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	460b      	mov	r3, r1
 8002a82:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 8002a84:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <Powerstep01_QueueCommands+0xe0>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	79fa      	ldrb	r2, [r7, #7]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d259      	bcs.n	8002b44 <Powerstep01_QueueCommands+0xd0>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <Powerstep01_QueueCommands+0xe0>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 8002aa0:	79bb      	ldrb	r3, [r7, #6]
 8002aa2:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 8002aa6:	2b8a      	cmp	r3, #138	; 0x8a
 8002aa8:	d01c      	beq.n	8002ae4 <Powerstep01_QueueCommands+0x70>
 8002aaa:	2b8a      	cmp	r3, #138	; 0x8a
 8002aac:	dc36      	bgt.n	8002b1c <Powerstep01_QueueCommands+0xa8>
 8002aae:	2b82      	cmp	r3, #130	; 0x82
 8002ab0:	d018      	beq.n	8002ae4 <Powerstep01_QueueCommands+0x70>
 8002ab2:	2b82      	cmp	r3, #130	; 0x82
 8002ab4:	dc32      	bgt.n	8002b1c <Powerstep01_QueueCommands+0xa8>
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d014      	beq.n	8002ae4 <Powerstep01_QueueCommands+0x70>
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	db2e      	blt.n	8002b1c <Powerstep01_QueueCommands+0xa8>
 8002abe:	2b68      	cmp	r3, #104	; 0x68
 8002ac0:	dc2c      	bgt.n	8002b1c <Powerstep01_QueueCommands+0xa8>
 8002ac2:	2b50      	cmp	r3, #80	; 0x50
 8002ac4:	db2a      	blt.n	8002b1c <Powerstep01_QueueCommands+0xa8>
 8002ac6:	3b50      	subs	r3, #80	; 0x50
 8002ac8:	2201      	movs	r2, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <Powerstep01_QueueCommands+0xa8>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	491c      	ldr	r1, [pc, #112]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002ae8:	79ba      	ldrb	r2, [r7, #6]
 8002aea:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	141a      	asrs	r2, r3, #16
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	b2d1      	uxtb	r1, r2
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002af6:	4413      	add	r3, r2
 8002af8:	460a      	mov	r2, r1
 8002afa:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	121a      	asrs	r2, r3, #8
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	b2d1      	uxtb	r1, r2
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002b06:	4413      	add	r3, r2
 8002b08:	460a      	mov	r2, r1
 8002b0a:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	b2d1      	uxtb	r1, r2
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002b14:	4413      	add	r3, r2
 8002b16:	460a      	mov	r2, r1
 8002b18:	725a      	strb	r2, [r3, #9]
       break;
 8002b1a:	e014      	b.n	8002b46 <Powerstep01_QueueCommands+0xd2>
      default:
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002b20:	2100      	movs	r1, #0
 8002b22:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002b32:	4413      	add	r3, r2
 8002b34:	2200      	movs	r2, #0
 8002b36:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = command;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <Powerstep01_QueueCommands+0xe4>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	79ba      	ldrb	r2, [r7, #6]
 8002b40:	725a      	strb	r2, [r3, #9]
    }
  }
}
 8002b42:	e000      	b.n	8002b46 <Powerstep01_QueueCommands+0xd2>
  }
 8002b44:	bf00      	nop
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000890 	.word	0x20000890
 8002b58:	20000894 	.word	0x20000894

08002b5c <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	211b      	movs	r1, #27
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fa2a 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b29b      	uxth	r3, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 fcc7 	bl	800451c <Powerstep01_Board_ReleaseReset>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 fccc 	bl	8004540 <Powerstep01_Board_Reset>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460a      	mov	r2, r1
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8002bc0:	79bb      	ldrb	r3, [r7, #6]
 8002bc2:	2b07      	cmp	r3, #7
 8002bc4:	d82a      	bhi.n	8002c1c <Powerstep01_SelectStepMode+0x6c>
 8002bc6:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <Powerstep01_SelectStepMode+0x1c>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002bed 	.word	0x08002bed
 8002bd0:	08002bf3 	.word	0x08002bf3
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002bff 	.word	0x08002bff
 8002bdc:	08002c05 	.word	0x08002c05
 8002be0:	08002c0b 	.word	0x08002c0b
 8002be4:	08002c11 	.word	0x08002c11
 8002be8:	08002c17 	.word	0x08002c17
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e016      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      break;    
 8002bf6:	e013      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;        
 8002bfc:	e010      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	73fb      	strb	r3, [r7, #15]
      break;
 8002c02:	e00d      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 8002c04:	2304      	movs	r3, #4
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;        
 8002c08:	e00a      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0e:	e007      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 8002c10:	2306      	movs	r3, #6
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e004      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 8002c16:	2307      	movs	r3, #7
 8002c18:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1a:	e001      	b.n	8002c20 <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e01c      	b.n	8002c5a <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fbd1 	bl	80023ca <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2116      	movs	r1, #22
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f9c9 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002c32:	4603      	mov	r3, r0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f023 0307 	bic.w	r3, r3, #7
 8002c3a:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 8002c3c:	7bba      	ldrb	r2, [r7, #14]
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2116      	movs	r1, #22
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fc4c 	bl	80024e8 <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fc23 	bl	800249e <Powerstep01_CmdResetPos>
  
  return TRUE;
 8002c58:	2301      	movs	r3, #1
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop

08002c64 <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	71fb      	strb	r3, [r7, #7]
 8002c6e:	e011      	b.n	8002c94 <Powerstep01_SendQueuedCommands+0x30>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002c70:	79fa      	ldrb	r2, [r7, #7]
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <Powerstep01_SendQueuedCommands+0x40>)
 8002c7a:	1898      	adds	r0, r3, r2
 8002c7c:	79fa      	ldrb	r2, [r7, #7]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <Powerstep01_SendQueuedCommands+0x44>)
 8002c86:	4413      	add	r3, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f001 f963 	bl	8003f54 <Powerstep01_WriteBytes>
       loop++)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	3301      	adds	r3, #1
 8002c92:	71fb      	strb	r3, [r7, #7]
  for (loop = 0;
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d9ea      	bls.n	8002c70 <Powerstep01_SendQueuedCommands+0xc>
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000894 	.word	0x20000894
 8002ca8:	200008a0 	.word	0x200008a0

08002cac <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f981 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002cc2:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	1ad2      	subs	r2, r2, r3
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fc0a 	bl	80024e8 <Powerstep01_CmdSetParam>
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	2103      	movs	r1, #3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fbfa 	bl	80024e8 <Powerstep01_CmdSetParam>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d804      	bhi.n	8002d16 <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 8002d0c:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <Powerstep01_SetNbDevices+0x28>)
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 8002d16:	2300      	movs	r3, #0
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	20000890 	.word	0x20000890

08002d28 <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2116      	movs	r1, #22
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f93f 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 8002d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d64:	d507      	bpl.n	8002d76 <Powerstep01_SetAnalogValue+0x4e>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d004      	beq.n	8002d76 <Powerstep01_SetAnalogValue+0x4e>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d001      	beq.n	8002d76 <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	74fb      	strb	r3, [r7, #19]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	2b14      	cmp	r3, #20
 8002d7c:	f200 8191 	bhi.w	80030a2 <Powerstep01_SetAnalogValue+0x37a>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <Powerstep01_SetAnalogValue+0x60>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002e43 	.word	0x08002e43
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002e43 	.word	0x08002e43
 8002d94:	080030a3 	.word	0x080030a3
 8002d98:	08002eb7 	.word	0x08002eb7
 8002d9c:	08002eb7 	.word	0x08002eb7
 8002da0:	08002edd 	.word	0x08002edd
 8002da4:	08002f03 	.word	0x08002f03
 8002da8:	08002ff7 	.word	0x08002ff7
 8002dac:	08002ff7 	.word	0x08002ff7
 8002db0:	08002ff7 	.word	0x08002ff7
 8002db4:	08002ff7 	.word	0x08002ff7
 8002db8:	08002f73 	.word	0x08002f73
 8002dbc:	08003045 	.word	0x08003045
 8002dc0:	08003051 	.word	0x08003051
 8002dc4:	08003051 	.word	0x08003051
 8002dc8:	08002f99 	.word	0x08002f99
 8002dcc:	080030a3 	.word	0x080030a3
 8002dd0:	08002fd1 	.word	0x08002fd1
 8002dd4:	08002fd1 	.word	0x08002fd1
 8002dd8:	08002f3b 	.word	0x08002f3b
  }
  switch (param)
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 8002ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002de0:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 80030c4 <Powerstep01_SetAnalogValue+0x39c>
 8002de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	dc1c      	bgt.n	8002e28 <Powerstep01_SetAnalogValue+0x100>
 8002dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfa:	d018      	beq.n	8002e2e <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 8002dfc:	2116      	movs	r1, #22
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7ff f8e0 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002e04:	4603      	mov	r3, r0
 8002e06:	43db      	mvns	r3, r3
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d502      	bpl.n	8002e2e <Powerstep01_SetAnalogValue+0x106>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 8002e2c:	e13b      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 8002e2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e36:	ee17 3a90 	vmov	r3, s15
 8002e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3e:	617b      	str	r3, [r7, #20]
      break;        
 8002e40:	e131      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 8002e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	d51c      	bpl.n	8002e8a <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 8002e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e54:	eef1 7a67 	vneg.f32	s15, s15
 8002e58:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 8002e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e64:	ee17 3a90 	vmov	r3, s15
 8002e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e6c:	d80a      	bhi.n	8002e84 <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8002e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e76:	ee17 3a90 	vmov	r3, s15
 8002e7a:	425b      	negs	r3, r3
 8002e7c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002e80:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 8002e82:	e110      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 8002e84:	2300      	movs	r3, #0
 8002e86:	74fb      	strb	r3, [r7, #19]
      break;
 8002e88:	e10d      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 8002e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e92:	ee17 3a90 	vmov	r3, s15
 8002e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9a:	d209      	bcs.n	8002eb0 <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8002e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea4:	ee17 3a90 	vmov	r3, s15
 8002ea8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002eac:	617b      	str	r3, [r7, #20]
      break;
 8002eae:	e0fa      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	74fb      	strb	r3, [r7, #19]
      break;
 8002eb4:	e0f7      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 8002eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eba:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80030c8 <Powerstep01_SetAnalogValue+0x3a0>
 8002ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	dd02      	ble.n	8002ece <Powerstep01_SetAnalogValue+0x1a6>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 8002ecc:	e0eb      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 8002ece:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ed2:	f001 f865 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	617b      	str	r3, [r7, #20]
      break;
 8002eda:	e0e4      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 8002edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80030cc <Powerstep01_SetAnalogValue+0x3a4>
 8002ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	dd02      	ble.n	8002ef4 <Powerstep01_SetAnalogValue+0x1cc>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8002ef2:	e0d8      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8002ef4:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ef8:	f001 f98c 	bl	8004214 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002efc:	4603      	mov	r3, r0
 8002efe:	617b      	str	r3, [r7, #20]
      break;
 8002f00:	e0d1      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8002f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f06:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80030d0 <Powerstep01_SetAnalogValue+0x3a8>
 8002f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f12:	dd02      	ble.n	8002f1a <Powerstep01_SetAnalogValue+0x1f2>
 8002f14:	2300      	movs	r3, #0
 8002f16:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 8002f18:	e0c5      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f850 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f403 5480 	and.w	r4, r3, #4096	; 0x1000
 8002f2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f2e:	f001 f9a3 	bl	8004278 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4323      	orrs	r3, r4
 8002f36:	617b      	str	r3, [r7, #20]
      break;      
 8002f38:	e0b5      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 8002f3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f3e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80030d4 <Powerstep01_SetAnalogValue+0x3ac>
 8002f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4a:	dd02      	ble.n	8002f52 <Powerstep01_SetAnalogValue+0x22a>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 8002f50:	e0a9      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f834 	bl	8001fc4 <Powerstep01_CmdGetParam>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f403 6480 	and.w	r4, r3, #1024	; 0x400
 8002f62:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f66:	f001 f881 	bl	800406c <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4323      	orrs	r3, r4
 8002f6e:	617b      	str	r3, [r7, #20]
      break;
 8002f70:	e099      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 8002f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f76:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80030d8 <Powerstep01_SetAnalogValue+0x3b0>
 8002f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	dd02      	ble.n	8002f8a <Powerstep01_SetAnalogValue+0x262>
 8002f84:	2300      	movs	r3, #0
 8002f86:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 8002f88:	e08d      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 8002f8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f8e:	f001 f8a1 	bl	80040d4 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002f92:	4603      	mov	r3, r0
 8002f94:	617b      	str	r3, [r7, #20]
      break;
 8002f96:	e086      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 8002f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	d408      	bmi.n	8002fbc <Powerstep01_SetAnalogValue+0x294>
 8002faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fae:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80030dc <Powerstep01_SetAnalogValue+0x3b4>
 8002fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	dd02      	ble.n	8002fc2 <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 8002fc0:	e071      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 8002fc2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fc6:	f001 f8b7 	bl	8004138 <Powerstep01_KTherm_Comp_to_RegVal>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	617b      	str	r3, [r7, #20]
      break;
 8002fce:	e06a      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 8002fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80030e0 <Powerstep01_SetAnalogValue+0x3b8>
 8002fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	dd02      	ble.n	8002fe8 <Powerstep01_SetAnalogValue+0x2c0>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 8002fe6:	e05e      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8002fe8:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fec:	f001 f98c 	bl	8004308 <Powerstep01_StallOcd_Th_to_RegVal>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	617b      	str	r3, [r7, #20]
      break;
 8002ff4:	e057      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 8002ff6:	7cbb      	ldrb	r3, [r7, #18]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d112      	bne.n	8003022 <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 8002ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003000:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80030e0 <Powerstep01_SetAnalogValue+0x3b8>
 8003004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	dd02      	ble.n	8003014 <Powerstep01_SetAnalogValue+0x2ec>
 800300e:	2300      	movs	r3, #0
 8003010:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 8003012:	e048      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 8003014:	ed97 0a01 	vldr	s0, [r7, #4]
 8003018:	f001 f9b2 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800301c:	4603      	mov	r3, r0
 800301e:	617b      	str	r3, [r7, #20]
      break;
 8003020:	e041      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 8003022:	edd7 7a01 	vldr	s15, [r7, #4]
 8003026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	dd02      	ble.n	8003036 <Powerstep01_SetAnalogValue+0x30e>
 8003030:	2300      	movs	r3, #0
 8003032:	74fb      	strb	r3, [r7, #19]
      break;
 8003034:	e037      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 8003036:	ed97 0a01 	vldr	s0, [r7, #4]
 800303a:	f001 f8b9 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 800303e:	4603      	mov	r3, r0
 8003040:	617b      	str	r3, [r7, #20]
      break;
 8003042:	e030      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8003044:	7cbb      	ldrb	r3, [r7, #18]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 800304a:	2300      	movs	r3, #0
 800304c:	74fb      	strb	r3, [r7, #19]
        break;
 800304e:	e02a      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 8003050:	7cbb      	ldrb	r3, [r7, #18]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d112      	bne.n	800307c <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 8003056:	edd7 7a01 	vldr	s15, [r7, #4]
 800305a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80030e4 <Powerstep01_SetAnalogValue+0x3bc>
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	dd02      	ble.n	800306e <Powerstep01_SetAnalogValue+0x346>
 8003068:	2300      	movs	r3, #0
 800306a:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 800306c:	e01b      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 800306e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003072:	f001 f9c1 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 8003076:	4603      	mov	r3, r0
 8003078:	617b      	str	r3, [r7, #20]
      break;
 800307a:	e014      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 800307c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003080:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80030e8 <Powerstep01_SetAnalogValue+0x3c0>
 8003084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	dd02      	ble.n	8003094 <Powerstep01_SetAnalogValue+0x36c>
 800308e:	2300      	movs	r3, #0
 8003090:	74fb      	strb	r3, [r7, #19]
      break;
 8003092:	e008      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 8003094:	ed97 0a01 	vldr	s0, [r7, #4]
 8003098:	f000 ffb4 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800309c:	4603      	mov	r3, r0
 800309e:	617b      	str	r3, [r7, #20]
      break;
 80030a0:	e001      	b.n	80030a6 <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fa18 	bl	80024e8 <Powerstep01_CmdSetParam>
  }
  return result;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	43ff8000 	.word	0x43ff8000
 80030c8:	4768c600 	.word	0x4768c600
 80030cc:	4673e800 	.word	0x4673e800
 80030d0:	44741333 	.word	0x44741333
 80030d4:	46742400 	.word	0x46742400
 80030d8:	44742000 	.word	0x44742000
 80030dc:	3fbc0000 	.word	0x3fbc0000
 80030e0:	447a0000 	.word	0x447a0000
 80030e4:	42800000 	.word	0x42800000
 80030e8:	3ecccccd 	.word	0x3ecccccd

080030ec <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 f9df 	bl	80044bc <Powerstep01_Board_StartStepClock>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 800310a:	f001 f9fd 	bl	8004508 <Powerstep01_Board_StopStepClock>
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 800311a:	2301      	movs	r3, #1
 800311c:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 800311e:	e016      	b.n	800314e <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 8003120:	2300      	movs	r3, #0
 8003122:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8003124:	2300      	movs	r3, #0
 8003126:	71bb      	strb	r3, [r7, #6]
 8003128:	e00b      	b.n	8003142 <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 800312a:	79bb      	ldrb	r3, [r7, #6]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fc8c 	bl	8002a4a <Powerstep01_IsDeviceBusy>
 8003132:	4603      	mov	r3, r0
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	4313      	orrs	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 800313c:	79bb      	ldrb	r3, [r7, #6]
 800313e:	3301      	adds	r3, #1
 8003140:	71bb      	strb	r3, [r7, #6]
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	79ba      	ldrb	r2, [r7, #6]
 800314a:	429a      	cmp	r2, r3
 800314c:	d3ed      	bcc.n	800312a <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000890 	.word	0x20000890

08003164 <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 800316e:	bf00      	nop
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fc69 	bl	8002a4a <Powerstep01_IsDeviceBusy>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f8      	bne.n	8003170 <Powerstep01_WaitWhileActive+0xc>
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	43db      	mvns	r3, r3
 800319e:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3301      	adds	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80031ac:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	425b      	negs	r3, r3
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e001      	b.n	80031ba <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <Powerstep01_BusyInterruptHandler+0x24>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <Powerstep01_BusyInterruptHandler+0x28>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <Powerstep01_BusyInterruptHandler+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <Powerstep01_BusyInterruptHandler+0x28>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
  }
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20002a00 	.word	0x20002a00
 80031f0:	200008ad 	.word	0x200008ad

080031f4 <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <Powerstep01_ErrorHandler+0x28>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <Powerstep01_ErrorHandler+0x28>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	4610      	mov	r0, r2
 800320e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8003210:	e000      	b.n	8003214 <Powerstep01_ErrorHandler+0x20>
    while(1)
 8003212:	e7fe      	b.n	8003212 <Powerstep01_ErrorHandler+0x1e>
}
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200029fc 	.word	0x200029fc

08003220 <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <Powerstep01_FlagInterruptHandler+0x24>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <Powerstep01_FlagInterruptHandler+0x28>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <Powerstep01_FlagInterruptHandler+0x24>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <Powerstep01_FlagInterruptHandler+0x28>)
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
  }
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20002a04 	.word	0x20002a04
 8003248:	200008ad 	.word	0x200008ad

0800324c <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	603a      	str	r2, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
 8003258:	460b      	mov	r3, r1
 800325a:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 800325c:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <Powerstep01_SendCommand+0x180>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	79fa      	ldrb	r2, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	f080 80ad 	bcs.w	80033c4 <Powerstep01_SendCommand+0x178>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <Powerstep01_SendCommand+0x180>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 800327e:	2300      	movs	r3, #0
 8003280:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <Powerstep01_SendCommand+0x184>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8003288:	7abb      	ldrb	r3, [r7, #10]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800328e:	f001 f8f9 	bl	8004484 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e019      	b.n	80032d0 <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 800329c:	4a4d      	ldr	r2, [pc, #308]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80032a6:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	3303      	adds	r3, #3
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80032b2:	4a48      	ldr	r2, [pc, #288]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	3306      	adds	r3, #6
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80032be:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	3309      	adds	r3, #9
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	4b3e      	ldr	r3, [pc, #248]	; (80033cc <Powerstep01_SendCommand+0x180>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4293      	cmp	r3, r2
 80032dc:	d3de      	bcc.n	800329c <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 80032de:	79bb      	ldrb	r3, [r7, #6]
 80032e0:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 80032e4:	2b8a      	cmp	r3, #138	; 0x8a
 80032e6:	d016      	beq.n	8003316 <Powerstep01_SendCommand+0xca>
 80032e8:	2b8a      	cmp	r3, #138	; 0x8a
 80032ea:	dc32      	bgt.n	8003352 <Powerstep01_SendCommand+0x106>
 80032ec:	2b82      	cmp	r3, #130	; 0x82
 80032ee:	d012      	beq.n	8003316 <Powerstep01_SendCommand+0xca>
 80032f0:	2b82      	cmp	r3, #130	; 0x82
 80032f2:	dc2e      	bgt.n	8003352 <Powerstep01_SendCommand+0x106>
 80032f4:	2b68      	cmp	r3, #104	; 0x68
 80032f6:	d00a      	beq.n	800330e <Powerstep01_SendCommand+0xc2>
 80032f8:	2b68      	cmp	r3, #104	; 0x68
 80032fa:	dc2a      	bgt.n	8003352 <Powerstep01_SendCommand+0x106>
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d006      	beq.n	800330e <Powerstep01_SendCommand+0xc2>
 8003300:	2b60      	cmp	r3, #96	; 0x60
 8003302:	dc26      	bgt.n	8003352 <Powerstep01_SendCommand+0x106>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d006      	beq.n	8003316 <Powerstep01_SendCommand+0xca>
 8003308:	2b50      	cmp	r3, #80	; 0x50
 800330a:	d004      	beq.n	8003316 <Powerstep01_SendCommand+0xca>
 800330c:	e021      	b.n	8003352 <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003314:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 8003316:	7a7b      	ldrb	r3, [r7, #9]
 8003318:	492e      	ldr	r1, [pc, #184]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 800331a:	79ba      	ldrb	r2, [r7, #6]
 800331c:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	0c1a      	lsrs	r2, r3, #16
 8003322:	7a7b      	ldrb	r3, [r7, #9]
 8003324:	b2d1      	uxtb	r1, r2
 8003326:	4a2b      	ldr	r2, [pc, #172]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 8003328:	4413      	add	r3, r2
 800332a:	460a      	mov	r2, r1
 800332c:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	0a1a      	lsrs	r2, r3, #8
 8003332:	7a7b      	ldrb	r3, [r7, #9]
 8003334:	b2d1      	uxtb	r1, r2
 8003336:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 8003338:	4413      	add	r3, r2
 800333a:	460a      	mov	r2, r1
 800333c:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 800333e:	7a7b      	ldrb	r3, [r7, #9]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	b2d1      	uxtb	r1, r2
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 8003346:	4413      	add	r3, r2
 8003348:	460a      	mov	r2, r1
 800334a:	725a      	strb	r2, [r3, #9]
          maxArgumentNbBytes = 3;
 800334c:	2303      	movs	r3, #3
 800334e:	72fb      	strb	r3, [r7, #11]
          break;
 8003350:	e012      	b.n	8003378 <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8003352:	7a7b      	ldrb	r3, [r7, #9]
 8003354:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 8003356:	2100      	movs	r1, #0
 8003358:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 800335a:	7a7b      	ldrb	r3, [r7, #9]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 800335e:	4413      	add	r3, r2
 8003360:	2200      	movs	r2, #0
 8003362:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8003364:	7a7b      	ldrb	r3, [r7, #9]
 8003366:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 8003368:	4413      	add	r3, r2
 800336a:	2200      	movs	r2, #0
 800336c:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = param;
 800336e:	7a7b      	ldrb	r3, [r7, #9]
 8003370:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 8003372:	4413      	add	r3, r2
 8003374:	79ba      	ldrb	r2, [r7, #6]
 8003376:	725a      	strb	r2, [r3, #9]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8003378:	f001 f87b 	bl	8004472 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <Powerstep01_SendCommand+0x184>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	f47f af7b 	bne.w	8003282 <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	f1c3 0303 	rsb	r3, r3, #3
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e011      	b.n	80033ba <Powerstep01_SendCommand+0x16e>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <Powerstep01_SendCommand+0x188>)
 80033a0:	1898      	adds	r0, r3, r2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <Powerstep01_SendCommand+0x18c>)
 80033ac:	4413      	add	r3, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f000 fdd0 	bl	8003f54 <Powerstep01_WriteBytes>
         loop++)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d9ea      	bls.n	8003396 <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80033c0:	f001 f860 	bl	8004484 <Powerstep01_Board_EnableIrq>
  }
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000890 	.word	0x20000890
 80033d0:	200008ac 	.word	0x200008ac
 80033d4:	20000894 	.word	0x20000894
 80033d8:	200008a0 	.word	0x200008a0

080033dc <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f87b 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f875 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	2200      	movs	r2, #0
 8003402:	2103      	movs	r1, #3
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f86f 	bl	80024e8 <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b02      	cmp	r3, #2
 800340e:	f000 827b 	beq.w	8003908 <Powerstep01_SetRegisterToPredefinedValues+0x52c>
 8003412:	2b02      	cmp	r3, #2
 8003414:	f300 8398 	bgt.w	8003b48 <Powerstep01_SetRegisterToPredefinedValues+0x76c>
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <Powerstep01_SetRegisterToPredefinedValues+0x48>
 800341c:	2b01      	cmp	r3, #1
 800341e:	f000 8153 	beq.w	80036c8 <Powerstep01_SetRegisterToPredefinedValues+0x2ec>
      }
      break;
#endif
    default: ;
  }
}
 8003422:	e391      	b.n	8003b48 <Powerstep01_SetRegisterToPredefinedValues+0x76c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 8003424:	2308      	movs	r3, #8
 8003426:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8003428:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003674 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 800342c:	f000 fdb8 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003430:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8003432:	461a      	mov	r2, r3
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	2105      	movs	r1, #5
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f855 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 800343e:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8003674 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8003442:	f000 fdad 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003446:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8003448:	461a      	mov	r2, r3
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	2106      	movs	r1, #6
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff f84a 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8003454:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8003678 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8003458:	f000 fedc 	bl	8004214 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 800345c:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 800345e:	461a      	mov	r2, r3
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2107      	movs	r1, #7
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff f83f 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 800346a:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80036b4 <Powerstep01_SetRegisterToPredefinedValues+0x2d8>
 800346e:	f000 ff03 	bl	8004278 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8003472:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8003474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	2108      	movs	r1, #8
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff f831 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8003486:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800367c <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 800348a:	f000 fdef 	bl	800406c <Powerstep01_FSSpd_Steps_s_to_RegVal>
 800348e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8003490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2115      	movs	r1, #21
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f823 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	2205      	movs	r2, #5
 80034a6:	2113      	movs	r1, #19
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f81d 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	2209      	movs	r2, #9
 80034b2:	2116      	movs	r1, #22
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f817 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	22ff      	movs	r2, #255	; 0xff
 80034be:	2117      	movs	r1, #23
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f811 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80034cc:	2118      	movs	r1, #24
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f80a 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2260      	movs	r2, #96	; 0x60
 80034d8:	2119      	movs	r1, #25
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff f804 	bl	80024e8 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d175      	bne.n	80035d2 <Powerstep01_SetRegisterToPredefinedValues+0x1f6>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80034e6:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8003680 <Powerstep01_SetRegisterToPredefinedValues+0x2a4>
 80034ea:	f000 fdf3 	bl	80040d4 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80034ee:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80034f0:	461a      	mov	r2, r3
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	210d      	movs	r1, #13
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fff6 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 80034fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003500:	f000 fe1a 	bl	8004138 <Powerstep01_KTherm_Comp_to_RegVal>
 8003504:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8003506:	461a      	mov	r2, r3
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	2111      	movs	r1, #17
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe ffeb 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 8003512:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003684 <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 8003516:	f000 fef7 	bl	8004308 <Powerstep01_StallOcd_Th_to_RegVal>
 800351a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2114      	movs	r1, #20
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe ffe0 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8003528:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800352c:	f000 fe40 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003530:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2109      	movs	r1, #9
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe ffd5 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 800353e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003542:	f000 fe35 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003546:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	210a      	movs	r1, #10
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe ffca 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8003554:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003558:	f000 fe2a 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 800355c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	210b      	movs	r1, #11
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe ffbf 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 800356a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800356e:	f000 fe1f 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003572:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8003574:	461a      	mov	r2, r3
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	210c      	movs	r1, #12
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe ffb4 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003580:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003688 <Powerstep01_SetRegisterToPredefinedValues+0x2ac>
 8003584:	f000 fd3e 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003588:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 800358a:	461a      	mov	r2, r3
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	210e      	movs	r1, #14
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe ffa9 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003596:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800368c <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 800359a:	f000 fd33 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800359e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	210f      	movs	r1, #15
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe ff9e 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80035ac:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800368c <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 80035b0:	f000 fd28 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80035b4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 80035b6:	461a      	mov	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	2110      	movs	r1, #16
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe ff93 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f641 7288 	movw	r2, #8072	; 0x1f88
 80035c8:	211a      	movs	r1, #26
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe ff8c 	bl	80024e8 <Powerstep01_CmdSetParam>
      break;
 80035d0:	e2ba      	b.n	8003b48 <Powerstep01_SetRegisterToPredefinedValues+0x76c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80035d2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003690 <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 80035d6:	f000 fed3 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80035da:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 80035dc:	461a      	mov	r2, r3
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2109      	movs	r1, #9
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe ff80 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80035e8:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003694 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80035ec:	f000 fec8 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80035f0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80035f2:	461a      	mov	r2, r3
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	210a      	movs	r1, #10
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe ff75 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80035fe:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8003698 <Powerstep01_SetRegisterToPredefinedValues+0x2bc>
 8003602:	f000 febd 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003606:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	210b      	movs	r1, #11
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe ff6a 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003614:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003698 <Powerstep01_SetRegisterToPredefinedValues+0x2bc>
 8003618:	f000 feb2 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800361c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 800361e:	461a      	mov	r2, r3
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	210c      	movs	r1, #12
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe ff5f 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	2220      	movs	r2, #32
 800362e:	210e      	movs	r1, #14
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe ff59 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003636:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800369c <Powerstep01_SetRegisterToPredefinedValues+0x2c0>
 800363a:	f000 fedd 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 800363e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	210f      	movs	r1, #15
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe ff4e 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800364c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800369c <Powerstep01_SetRegisterToPredefinedValues+0x2c0>
 8003650:	f000 fed2 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 8003654:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2110      	movs	r1, #16
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe ff43 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	f641 7288 	movw	r2, #8072	; 0x1f88
 8003668:	211a      	movs	r1, #26
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe ff3c 	bl	80024e8 <Powerstep01_CmdSetParam>
      break;
 8003670:	e26a      	b.n	8003b48 <Powerstep01_SetRegisterToPredefinedValues+0x76c>
 8003672:	bf00      	nop
 8003674:	43c80000 	.word	0x43c80000
 8003678:	44480000 	.word	0x44480000
 800367c:	44ff951f 	.word	0x44ff951f
 8003680:	43705375 	.word	0x43705375
 8003684:	42fa0000 	.word	0x42fa0000
 8003688:	3d4801f7 	.word	0x3d4801f7
 800368c:	3d54801f 	.word	0x3d54801f
 8003690:	423b999a 	.word	0x423b999a
 8003694:	43bf6666 	.word	0x43bf6666
 8003698:	4304cccd 	.word	0x4304cccd
 800369c:	418c0000 	.word	0x418c0000
 80036a0:	3d1c432d 	.word	0x3d1c432d
 80036a4:	3d801f75 	.word	0x3d801f75
 80036a8:	43a40f5c 	.word	0x43a40f5c
 80036ac:	44fb051f 	.word	0x44fb051f
 80036b0:	4477f47b 	.word	0x4477f47b
 80036b4:	00000000 	.word	0x00000000
 80036b8:	4414c5c3 	.word	0x4414c5c3
 80036bc:	42760c4a 	.word	0x42760c4a
 80036c0:	4404d000 	.word	0x4404d000
 80036c4:	418028f6 	.word	0x418028f6
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_1;
 80036c8:	2308      	movs	r3, #8
 80036ca:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 80036cc:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 80036ac <Powerstep01_SetRegisterToPredefinedValues+0x2d0>
 80036d0:	f000 fc66 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80036d4:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 80036d6:	461a      	mov	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	2105      	movs	r1, #5
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe ff03 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 80036e2:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 80036ac <Powerstep01_SetRegisterToPredefinedValues+0x2d0>
 80036e6:	f000 fc5b 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80036ea:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 80036ec:	461a      	mov	r2, r3
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	2106      	movs	r1, #6
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fef8 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 80036f8:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 80036b0 <Powerstep01_SetRegisterToPredefinedValues+0x2d4>
 80036fc:	f000 fd8a 	bl	8004214 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8003700:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8003702:	461a      	mov	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2107      	movs	r1, #7
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe feed 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 800370e:	ed1f 0a17 	vldr	s0, [pc, #-92]	; 80036b4 <Powerstep01_SetRegisterToPredefinedValues+0x2d8>
 8003712:	f000 fdb1 	bl	8004278 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8003716:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2108      	movs	r1, #8
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fee2 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8003724:	ed1f 0a1c 	vldr	s0, [pc, #-112]	; 80036b8 <Powerstep01_SetRegisterToPredefinedValues+0x2dc>
 8003728:	f000 fca0 	bl	800406c <Powerstep01_FSSpd_Steps_s_to_RegVal>
 800372c:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 800372e:	461a      	mov	r2, r3
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	2115      	movs	r1, #21
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fed7 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	2208      	movs	r2, #8
 800373e:	2113      	movs	r1, #19
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fed1 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	220c      	movs	r2, #12
 800374a:	2116      	movs	r1, #22
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fecb 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	22ef      	movs	r2, #239	; 0xef
 8003756:	2117      	movs	r1, #23
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fec5 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	22c3      	movs	r2, #195	; 0xc3
 8003762:	2118      	movs	r1, #24
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe febf 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	2119      	movs	r1, #25
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe feb9 	bl	80024e8 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d175      	bne.n	8003868 <Powerstep01_SetRegisterToPredefinedValues+0x48c>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 800377c:	ed1f 0a31 	vldr	s0, [pc, #-196]	; 80036bc <Powerstep01_SetRegisterToPredefinedValues+0x2e0>
 8003780:	f000 fca8 	bl	80040d4 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8003784:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8003786:	461a      	mov	r2, r3
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	210d      	movs	r1, #13
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe feab 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 8003792:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003796:	f000 fccf 	bl	8004138 <Powerstep01_KTherm_Comp_to_RegVal>
 800379a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2111      	movs	r1, #17
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fea0 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 80037a8:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 80036c0 <Powerstep01_SetRegisterToPredefinedValues+0x2e4>
 80037ac:	f000 fdac 	bl	8004308 <Powerstep01_StallOcd_Th_to_RegVal>
 80037b0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 80037b2:	461a      	mov	r2, r3
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2114      	movs	r1, #20
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fe95 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80037be:	ed1f 0a3f 	vldr	s0, [pc, #-252]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 80037c2:	f000 fcf5 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 80037c6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 80037c8:	461a      	mov	r2, r3
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	2109      	movs	r1, #9
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fe8a 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80037d4:	ed1f 0a45 	vldr	s0, [pc, #-276]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 80037d8:	f000 fcea 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 80037dc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 80037de:	461a      	mov	r2, r3
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	210a      	movs	r1, #10
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe fe7f 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80037ea:	ed1f 0a4a 	vldr	s0, [pc, #-296]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 80037ee:	f000 fcdf 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 80037f2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 80037f4:	461a      	mov	r2, r3
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	210b      	movs	r1, #11
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fe74 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8003800:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 8003804:	f000 fcd4 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003808:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 800380a:	461a      	mov	r2, r3
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	210c      	movs	r1, #12
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fe69 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003816:	ed1f 0a5e 	vldr	s0, [pc, #-376]	; 80036a0 <Powerstep01_SetRegisterToPredefinedValues+0x2c4>
 800381a:	f000 fbf3 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800381e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	210e      	movs	r1, #14
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fe5e 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800382c:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 80036a4 <Powerstep01_SetRegisterToPredefinedValues+0x2c8>
 8003830:	f000 fbe8 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003834:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	210f      	movs	r1, #15
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fe53 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003842:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 80036a4 <Powerstep01_SetRegisterToPredefinedValues+0x2c8>
 8003846:	f000 fbdd 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800384a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2110      	movs	r1, #16
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fe48 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	f642 6208 	movw	r2, #11784	; 0x2e08
 800385e:	211a      	movs	r1, #26
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fe41 	bl	80024e8 <Powerstep01_CmdSetParam>
      break;     
 8003866:	e16f      	b.n	8003b48 <Powerstep01_SetRegisterToPredefinedValues+0x76c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003868:	ed1f 0a71 	vldr	s0, [pc, #-452]	; 80036a8 <Powerstep01_SetRegisterToPredefinedValues+0x2cc>
 800386c:	f000 fd88 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003870:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8003872:	461a      	mov	r2, r3
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	2109      	movs	r1, #9
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fe35 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800387e:	ed1f 0a76 	vldr	s0, [pc, #-472]	; 80036a8 <Powerstep01_SetRegisterToPredefinedValues+0x2cc>
 8003882:	f000 fd7d 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003886:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8003888:	461a      	mov	r2, r3
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	210a      	movs	r1, #10
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fe2a 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003894:	ed1f 0a7c 	vldr	s0, [pc, #-496]	; 80036a8 <Powerstep01_SetRegisterToPredefinedValues+0x2cc>
 8003898:	f000 fd72 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800389c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 800389e:	461a      	mov	r2, r3
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	210b      	movs	r1, #11
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fe1f 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80038aa:	ed1f 0a81 	vldr	s0, [pc, #-516]	; 80036a8 <Powerstep01_SetRegisterToPredefinedValues+0x2cc>
 80038ae:	f000 fd67 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80038b2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 80038b4:	461a      	mov	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	210c      	movs	r1, #12
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fe14 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	2235      	movs	r2, #53	; 0x35
 80038c4:	210e      	movs	r1, #14
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fe0e 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80038cc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80038d0:	f000 fd92 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 80038d4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	210f      	movs	r1, #15
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fe03 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80038e2:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80038e6:	f000 fd87 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 80038ea:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 80038ec:	461a      	mov	r2, r3
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	2110      	movs	r1, #16
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fdf8 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	f243 2208 	movw	r2, #12808	; 0x3208
 80038fe:	211a      	movs	r1, #26
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fdf1 	bl	80024e8 <Powerstep01_CmdSetParam>
      break;     
 8003906:	e11f      	b.n	8003b48 <Powerstep01_SetRegisterToPredefinedValues+0x76c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_2;
 8003908:	2308      	movs	r3, #8
 800390a:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 800390c:	ed1f 0a99 	vldr	s0, [pc, #-612]	; 80036ac <Powerstep01_SetRegisterToPredefinedValues+0x2d0>
 8003910:	f000 fb46 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003914:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8003916:	461a      	mov	r2, r3
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2105      	movs	r1, #5
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fde3 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8003922:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 80036ac <Powerstep01_SetRegisterToPredefinedValues+0x2d0>
 8003926:	f000 fb3b 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800392a:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 800392c:	461a      	mov	r2, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2106      	movs	r1, #6
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fdd8 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8003938:	ed1f 0aa3 	vldr	s0, [pc, #-652]	; 80036b0 <Powerstep01_SetRegisterToPredefinedValues+0x2d4>
 800393c:	f000 fc6a 	bl	8004214 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8003940:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8003942:	461a      	mov	r2, r3
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	2107      	movs	r1, #7
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fdcd 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 800394e:	ed1f 0aa7 	vldr	s0, [pc, #-668]	; 80036b4 <Powerstep01_SetRegisterToPredefinedValues+0x2d8>
 8003952:	f000 fc91 	bl	8004278 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8003956:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2108      	movs	r1, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fdc2 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8003964:	ed1f 0aac 	vldr	s0, [pc, #-688]	; 80036b8 <Powerstep01_SetRegisterToPredefinedValues+0x2dc>
 8003968:	f000 fb80 	bl	800406c <Powerstep01_FSSpd_Steps_s_to_RegVal>
 800396c:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 800396e:	461a      	mov	r2, r3
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2115      	movs	r1, #21
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fdb7 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2208      	movs	r2, #8
 800397e:	2113      	movs	r1, #19
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fdb1 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	220c      	movs	r2, #12
 800398a:	2116      	movs	r1, #22
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fdab 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	22ef      	movs	r2, #239	; 0xef
 8003996:	2117      	movs	r1, #23
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fda5 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	22c3      	movs	r2, #195	; 0xc3
 80039a2:	2118      	movs	r1, #24
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fd9f 	bl	80024e8 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	2119      	movs	r1, #25
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fd99 	bl	80024e8 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d175      	bne.n	8003aa8 <Powerstep01_SetRegisterToPredefinedValues+0x6cc>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80039bc:	ed1f 0ac1 	vldr	s0, [pc, #-772]	; 80036bc <Powerstep01_SetRegisterToPredefinedValues+0x2e0>
 80039c0:	f000 fb88 	bl	80040d4 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80039c4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80039c6:	461a      	mov	r2, r3
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	210d      	movs	r1, #13
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fd8b 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 80039d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039d6:	f000 fbaf 	bl	8004138 <Powerstep01_KTherm_Comp_to_RegVal>
 80039da:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 80039dc:	461a      	mov	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	2111      	movs	r1, #17
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fd80 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 80039e8:	ed1f 0acb 	vldr	s0, [pc, #-812]	; 80036c0 <Powerstep01_SetRegisterToPredefinedValues+0x2e4>
 80039ec:	f000 fc8c 	bl	8004308 <Powerstep01_StallOcd_Th_to_RegVal>
 80039f0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 80039f2:	461a      	mov	r2, r3
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2114      	movs	r1, #20
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fd75 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80039fe:	ed1f 0acf 	vldr	s0, [pc, #-828]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 8003a02:	f000 fbd5 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003a06:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8003a08:	461a      	mov	r2, r3
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	2109      	movs	r1, #9
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fd6a 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8003a14:	ed1f 0ad5 	vldr	s0, [pc, #-852]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 8003a18:	f000 fbca 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003a1c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8003a1e:	461a      	mov	r2, r3
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	210a      	movs	r1, #10
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fd5f 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8003a2a:	ed1f 0ada 	vldr	s0, [pc, #-872]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 8003a2e:	f000 fbbf 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003a32:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8003a34:	461a      	mov	r2, r3
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	210b      	movs	r1, #11
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fd54 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8003a40:	ed1f 0ae0 	vldr	s0, [pc, #-896]	; 80036c4 <Powerstep01_SetRegisterToPredefinedValues+0x2e8>
 8003a44:	f000 fbb4 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003a48:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	210c      	movs	r1, #12
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fd49 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003a56:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003b50 <Powerstep01_SetRegisterToPredefinedValues+0x774>
 8003a5a:	f000 fad3 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003a5e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8003a60:	461a      	mov	r2, r3
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	210e      	movs	r1, #14
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fd3e 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003a6c:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8003b54 <Powerstep01_SetRegisterToPredefinedValues+0x778>
 8003a70:	f000 fac8 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003a74:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8003a76:	461a      	mov	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	210f      	movs	r1, #15
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fd33 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003a82:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8003b54 <Powerstep01_SetRegisterToPredefinedValues+0x778>
 8003a86:	f000 fabd 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003a8a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	2110      	movs	r1, #16
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fd28 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	f642 6208 	movw	r2, #11784	; 0x2e08
 8003a9e:	211a      	movs	r1, #26
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fd21 	bl	80024e8 <Powerstep01_CmdSetParam>
      break;
 8003aa6:	e04e      	b.n	8003b46 <Powerstep01_SetRegisterToPredefinedValues+0x76a>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003aa8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8003b58 <Powerstep01_SetRegisterToPredefinedValues+0x77c>
 8003aac:	f000 fc68 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003ab0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	2109      	movs	r1, #9
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fd15 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003abe:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8003b58 <Powerstep01_SetRegisterToPredefinedValues+0x77c>
 8003ac2:	f000 fc5d 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003ac6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	210a      	movs	r1, #10
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fd0a 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003ad4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003b58 <Powerstep01_SetRegisterToPredefinedValues+0x77c>
 8003ad8:	f000 fc52 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003adc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8003ade:	461a      	mov	r2, r3
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	210b      	movs	r1, #11
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fcff 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003aea:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003b58 <Powerstep01_SetRegisterToPredefinedValues+0x77c>
 8003aee:	f000 fc47 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003af2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8003af4:	461a      	mov	r2, r3
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	210c      	movs	r1, #12
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fcf4 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2235      	movs	r2, #53	; 0x35
 8003b04:	210e      	movs	r1, #14
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fcee 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003b0c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003b10:	f000 fc72 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 8003b14:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8003b16:	461a      	mov	r2, r3
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	210f      	movs	r1, #15
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fce3 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003b22:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8003b26:	f000 fc67 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 8003b2a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	2110      	movs	r1, #16
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fcd8 	bl	80024e8 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f243 2208 	movw	r2, #12808	; 0x3208
 8003b3e:	211a      	movs	r1, #26
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fcd1 	bl	80024e8 <Powerstep01_CmdSetParam>
      break;
 8003b46:	bf00      	nop
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	3d1c432d 	.word	0x3d1c432d
 8003b54:	3d801f75 	.word	0x3d801f75
 8003b58:	43a40f5c 	.word	0x43a40f5c

08003b5c <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fcba 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fcb4 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2103      	movs	r1, #3
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fcae 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b92:	eeb0 0a67 	vmov.f32	s0, s15
 8003b96:	f000 fa03 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003b9a:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2105      	movs	r1, #5
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fca0 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bae:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb2:	f000 f9f5 	bl	8003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003bb6:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8003bb8:	461a      	mov	r2, r3
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	2106      	movs	r1, #6
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe fc92 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bca:	eeb0 0a67 	vmov.f32	s0, s15
 8003bce:	f000 fb21 	bl	8004214 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8003bd2:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	2107      	movs	r1, #7
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fc84 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bea:	eeb0 0a67 	vmov.f32	s0, s15
 8003bee:	f000 fb11 	bl	8004214 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8003bf2:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8003bf4:	4323      	orrs	r3, r4
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	2108      	movs	r1, #8
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fc72 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c12:	f000 fa2b 	bl	800406c <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8003c16:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8003c18:	4323      	orrs	r3, r4
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2115      	movs	r1, #21
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fc60 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c32:	f000 fb69 	bl	8004308 <Powerstep01_StallOcd_Th_to_RegVal>
 8003c36:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8003c38:	461a      	mov	r2, r3
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2113      	movs	r1, #19
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fc52 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2116      	movs	r1, #22
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fc40 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8003c6e:	461a      	mov	r2, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2117      	movs	r1, #23
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fc37 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 8003c90:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 8003c96:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2118      	movs	r1, #24
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fc22 	bl	80024e8 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2119      	movs	r1, #25
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fc14 	bl	80024e8 <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 80b6 	bne.w	8003e36 <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd4:	f000 f9fe 	bl	80040d4 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8003cd8:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	210d      	movs	r1, #13
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe fc01 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003cec:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf0:	f000 fa22 	bl	8004138 <Powerstep01_KTherm_Comp_to_RegVal>
 8003cf4:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	2111      	movs	r1, #17
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fbf3 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d08:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0c:	f000 fafc 	bl	8004308 <Powerstep01_StallOcd_Th_to_RegVal>
 8003d10:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8003d12:	461a      	mov	r2, r3
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2114      	movs	r1, #20
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fbe5 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003d24:	eeb0 0a67 	vmov.f32	s0, s15
 8003d28:	f000 fa42 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003d2c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8003d2e:	461a      	mov	r2, r3
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2109      	movs	r1, #9
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fbd7 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003d40:	eeb0 0a67 	vmov.f32	s0, s15
 8003d44:	f000 fa34 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003d48:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	210a      	movs	r1, #10
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fbc9 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d60:	f000 fa26 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003d64:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8003d66:	461a      	mov	r2, r3
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	210b      	movs	r1, #11
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fbbb 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	f000 fa18 	bl	80041b0 <Powerstep01_Kval_Perc_to_RegVal>
 8003d80:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8003d82:	461a      	mov	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	210c      	movs	r1, #12
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fbad 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003d94:	eeb0 0a67 	vmov.f32	s0, s15
 8003d98:	f000 f934 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003d9c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8003d9e:	461a      	mov	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	210e      	movs	r1, #14
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fb9f 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003db0:	eeb0 0a67 	vmov.f32	s0, s15
 8003db4:	f000 f926 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003db8:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	210f      	movs	r1, #15
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fb91 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd0:	f000 f918 	bl	8004004 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003dd4:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2110      	movs	r1, #16
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fb83 	bl	80024e8 <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
      (uint16_t)initPrm->vm.swMode | 
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 8003e0e:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 8003e16:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
      (uint16_t)initPrm->vm.vccVal| 
 8003e1e:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 8003e26:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003e28:	461a      	mov	r2, r3
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	211a      	movs	r1, #26
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fb5a 	bl	80024e8 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 8003e34:	e08a      	b.n	8003f4c <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e40:	f000 fa9e 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003e44:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8003e46:	461a      	mov	r2, r3
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	2109      	movs	r1, #9
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fb4b 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003e58:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5c:	f000 fa90 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003e60:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	210a      	movs	r1, #10
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fb3d 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003e74:	eeb0 0a67 	vmov.f32	s0, s15
 8003e78:	f000 fa82 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003e7c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8003e7e:	461a      	mov	r2, r3
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	210b      	movs	r1, #11
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fb2f 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	f000 fa74 	bl	8004380 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003e98:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	210c      	movs	r1, #12
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fb21 	bl	80024e8 <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
          (uint8_t)initPrm->cm.fastStep);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	210e      	movs	r1, #14
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fb13 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ecc:	f000 fa94 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 8003ed0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	210f      	movs	r1, #15
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fb05 	bl	80024e8 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee8:	f000 fa86 	bl	80043f8 <Powerstep01_Tmin_Time_to_RegVal>
 8003eec:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8003eee:	461a      	mov	r2, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2110      	movs	r1, #16
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe faf7 	bl	80024e8 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
          (uint16_t)initPrm->cm.swMode| 
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
          (uint16_t)initPrm->cm.tqReg| 
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
          (uint16_t)initPrm->cm.ocSd| 
 8003f26:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 8003f2e:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
          (uint16_t)initPrm->cm.vccVal|
 8003f36:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
          (uint16_t)initPrm->cm.tsw|
 8003f3e:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	211a      	movs	r1, #26
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe face 	bl	80024e8 <Powerstep01_CmdSetParam>
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}

08003f54 <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices, 0) != 0)
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <Powerstep01_WriteBytes+0x40>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb03 	bl	8004574 <Powerstep01_Board_SpiWriteBytes>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 8003f74:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003f78:	f7ff f93c 	bl	80031f4 <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <Powerstep01_WriteBytes+0x44>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <Powerstep01_WriteBytes+0x48>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
  }
}                     
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000890 	.word	0x20000890
 8003f98:	200008ad 	.word	0x200008ad
 8003f9c:	200008ac 	.word	0x200008ac

08003fa0 <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 8003faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fae:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003fd4 <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 8003fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc2:	ee17 3a90 	vmov	r3, s15
 8003fc6:	b29b      	uxth	r3, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	3d8cbccc 	.word	0x3d8cbccc

08003fd8 <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004000 <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 8003fee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	4168d4a5 	.word	0x4168d4a5

08004004 <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 800400e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004012:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800403c <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 8004016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800401a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800401e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004026:	edc7 7a00 	vstr	s15, [r7]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	b2db      	uxtb	r3, r3
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	441f6000 	.word	0x441f6000

08004040 <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004068 <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 8004056:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800405a:	eeb0 0a67 	vmov.f32	s0, s15
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	3acd9a67 	.word	0x3acd9a67

0800406c <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 8004076:	edd7 7a01 	vldr	s15, [r7, #4]
 800407a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004098 <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 800407e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004086:	ee17 3a90 	vmov	r3, s15
 800408a:	b29b      	uxth	r3, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	3d8637bd 	.word	0x3d8637bd

0800409c <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80040cc <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 80040b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80040d0 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 80040ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80040be:	eeb0 0a67 	vmov.f32	s0, s15
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	3f7fbe77 	.word	0x3f7fbe77
 80040d0:	41742400 	.word	0x41742400

080040d4 <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 80040de:	edd7 7a01 	vldr	s15, [r7, #4]
 80040e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004108 <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 80040e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f6:	ee17 3a90 	vmov	r3, s15
 80040fa:	b29b      	uxth	r3, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	418637bd 	.word	0x418637bd

0800410c <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004134 <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 8004122:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004126:	eeb0 0a67 	vmov.f32	s0, s15
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	3d7423d9 	.word	0x3d7423d9

08004138 <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 8004142:	edd7 7a01 	vldr	s15, [r7, #4]
 8004146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800414a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800414e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004178 <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 8004152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004156:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800415a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800415e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004162:	edc7 7a00 	vstr	s15, [r7]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2db      	uxtb	r3, r3
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	42000000 	.word	0x42000000

0800417c <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80041ac <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 8004192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800419a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800419e:	eeb0 0a67 	vmov.f32	s0, s15
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	3d000000 	.word	0x3d000000

080041b0 <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 80041ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80041be:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80041e8 <Powerstep01_Kval_Perc_to_RegVal+0x38>
 80041c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d2:	edc7 7a00 	vstr	s15, [r7]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	b2db      	uxtb	r3, r3
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	4023d70a 	.word	0x4023d70a

080041ec <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	eeb5 7a09 	vmov.f32	s14, #89	; 0x3ec80000  0.3906250
 8004202:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004206:	eeb0 0a67 	vmov.f32	s0, s15
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 800421e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004222:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004248 <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 8004226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800422a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800422e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004236:	ee17 3a90 	vmov	r3, s15
 800423a:	b29b      	uxth	r3, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	3d8637bd 	.word	0x3d8637bd

0800424c <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004274 <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 8004262:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004266:	eeb0 0a67 	vmov.f32	s0, s15
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	41742400 	.word	0x41742400

08004278 <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 8004282:	edd7 7a01 	vldr	s15, [r7, #4]
 8004286:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80042ac <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 800428a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800428e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004292:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429a:	ee17 3a90 	vmov	r3, s15
 800429e:	b29b      	uxth	r3, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	408637bd 	.word	0x408637bd

080042b0 <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80042d8 <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 80042c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80042ca:	eeb0 0a67 	vmov.f32	s0, s15
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	3e742400 	.word	0x3e742400

080042dc <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004304 <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 80042f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80042f6:	eeb0 0a67 	vmov.f32	s0, s15
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	3c742400 	.word	0x3c742400

08004308 <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 8004312:	edd7 7a01 	vldr	s15, [r7, #4]
 8004316:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004348 <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 800431a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800431e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800434c <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 8004322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004326:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800432a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800432e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004332:	edc7 7a00 	vstr	s15, [r7]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	b2db      	uxtb	r3, r3
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	41fa0000 	.word	0x41fa0000
 800434c:	3d03126f 	.word	0x3d03126f

08004350 <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3301      	adds	r3, #1
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004364:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800437c <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 8004368:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800436c:	eeb0 0a67 	vmov.f32	s0, s15
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	41fa0000 	.word	0x41fa0000

08004380 <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 800438a:	edd7 7a01 	vldr	s15, [r7, #4]
 800438e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80043c0 <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 8004392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004396:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80043c4 <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 800439a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800439e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	edc7 7a00 	vstr	s15, [r7]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	b2db      	uxtb	r3, r3
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40fa0000 	.word	0x40fa0000
 80043c4:	3e03126f 	.word	0x3e03126f

080043c8 <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3301      	adds	r3, #1
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80043f4 <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 80043e0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80043e4:	eeb0 0a67 	vmov.f32	s0, s15
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40fa0000 	.word	0x40fa0000

080043f8 <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 8004402:	edd7 7a01 	vldr	s15, [r7, #4]
 8004406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800440a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800440e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004412:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800441a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441e:	edc7 7a00 	vstr	s15, [r7]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	b2db      	uxtb	r3, r3
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3301      	adds	r3, #1
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800444a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800444e:	eeb0 0a67 	vmov.f32	s0, s15
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fb69 	bl	8004b3c <HAL_Delay>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 8004472:	b480      	push	{r7}
 8004474:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004476:	b672      	cpsid	i
}
 8004478:	bf00      	nop
  __disable_irq();
}
 800447a:	bf00      	nop
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8004488:	b662      	cpsie	i
}
 800448a:	bf00      	nop
  __enable_irq();
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	71fb      	strb	r3, [r7, #7]
//
//    /* Let a delay after reset */
//    Powerstep01_Board_Delay(1);
//  }

}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
//  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
//  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
//  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);

	//does nothing
	Powerstep01_Board_Delay(1);
 80044b0:	2001      	movs	r0, #1
 80044b2:	f7ff ffd3 	bl	800445c <Powerstep01_Board_Delay>
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80044c6:	f001 fd81 	bl	8005fcc <HAL_RCC_GetSysClockFreq>
 80044ca:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	019b      	lsls	r3, r3, #6
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d8:	3b01      	subs	r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&htim4, period);
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <Powerstep01_Board_StartStepClock+0x48>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80044e4:	4a07      	ldr	r2, [pc, #28]	; (8004504 <Powerstep01_Board_StartStepClock+0x48>)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&htim4, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <Powerstep01_Board_StartStepClock+0x48>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&htim4, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 80044f4:	2104      	movs	r1, #4
 80044f6:	4803      	ldr	r0, [pc, #12]	; (8004504 <Powerstep01_Board_StartStepClock+0x48>)
 80044f8:	f002 faa8 	bl	8006a4c <HAL_TIM_PWM_Start_IT>
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20002928 	.word	0x20002928

08004508 <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&htim4,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 800450c:	2104      	movs	r1, #4
 800450e:	4802      	ldr	r0, [pc, #8]	; (8004518 <Powerstep01_Board_StopStepClock+0x10>)
 8004510:	f002 fb9a 	bl	8006c48 <HAL_TIM_PWM_Stop_IT>
}
 8004514:	bf00      	nop
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20002928 	.word	0x20002928

0800451c <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_Pin, GPIO_PIN_SET);
 8004526:	2201      	movs	r2, #1
 8004528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800452c:	4803      	ldr	r0, [pc, #12]	; (800453c <Powerstep01_Board_ReleaseReset+0x20>)
 800452e:	f001 f9b1 	bl	8005894 <HAL_GPIO_WritePin>
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40020000 	.word	0x40020000

08004540 <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_Pin, GPIO_PIN_RESET);
 800454a:	2200      	movs	r2, #0
 800454c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004550:	4803      	ldr	r0, [pc, #12]	; (8004560 <Powerstep01_Board_Reset+0x20>)
 8004552:	f001 f99f 	bl	8005894 <HAL_GPIO_WritePin>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40020000 	.word	0x40020000

08004564 <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
//
//  status = HAL_SPI_Init(&SpiHandle);
//
//  return (uint8_t) status;

	Powerstep01_Board_Delay(1);
 8004568:	2001      	movs	r0, #1
 800456a:	f7ff ff77 	bl	800445c <Powerstep01_Board_Delay>
	return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}

08004574 <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices, uint16_t size)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	460b      	mov	r3, r1
 8004584:	71fb      	strb	r3, [r7, #7]
 8004586:	4613      	mov	r3, r2
 8004588:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_CS_Pin, GPIO_PIN_RESET);
 800458a:	2200      	movs	r2, #0
 800458c:	2140      	movs	r1, #64	; 0x40
 800458e:	4816      	ldr	r0, [pc, #88]	; (80045e8 <Powerstep01_Board_SpiWriteBytes+0x74>)
 8004590:	f001 f980 	bl	8005894 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	e016      	b.n	80045c8 <Powerstep01_Board_SpiWriteBytes+0x54>
  {
    status = HAL_SPI_TransmitReceive(&hspi1, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 800459a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2301      	movs	r3, #1
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	4811      	ldr	r0, [pc, #68]	; (80045ec <Powerstep01_Board_SpiWriteBytes+0x78>)
 80045a8:	f001 fee1 	bl	800636e <HAL_SPI_TransmitReceive>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10d      	bne.n	80045d2 <Powerstep01_Board_SpiWriteBytes+0x5e>
    {
      break;
    }
    pByteToTransmit++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	3301      	adds	r3, #1
 80045c0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	3301      	adds	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d3e4      	bcc.n	800459a <Powerstep01_Board_SpiWriteBytes+0x26>
 80045d0:	e000      	b.n	80045d4 <Powerstep01_Board_SpiWriteBytes+0x60>
      break;
 80045d2:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_CS_Pin, GPIO_PIN_SET);
 80045d4:	2201      	movs	r2, #1
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	4803      	ldr	r0, [pc, #12]	; (80045e8 <Powerstep01_Board_SpiWriteBytes+0x74>)
 80045da:	f001 f95b 	bl	8005894 <HAL_GPIO_WritePin>

  return (uint8_t) status;  
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40020400 	.word	0x40020400
 80045ec:	20002888 	.word	0x20002888

080045f0 <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_BUSY_Pin);
 80045f4:	2120      	movs	r1, #32
 80045f6:	4803      	ldr	r0, [pc, #12]	; (8004604 <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 80045f8:	f001 f934 	bl	8005864 <HAL_GPIO_ReadPin>
 80045fc:	4603      	mov	r3, r0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40020400 	.word	0x40020400

08004608 <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_GPIO_Port, BSP_MOTOR_CONTROL_BOARD_FLAG_Pin);
 800460c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004610:	4802      	ldr	r0, [pc, #8]	; (800461c <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 8004612:	f001 f927 	bl	8005864 <HAL_GPIO_ReadPin>
 8004616:	4603      	mov	r3, r0
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40020000 	.word	0x40020000

08004620 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
 8004624:	2300      	movs	r3, #0
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
 8004634:	2300      	movs	r3, #0
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
 8004644:	2300      	movs	r3, #0
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
 8004654:	2300      	movs	r3, #0
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
 8004664:	2300      	movs	r3, #0
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
 8004674:	2300      	movs	r3, #0
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
 8004684:	2300      	movs	r3, #0
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <BSP_MotorControl_AttachErrorHandler+0x38>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <BSP_MotorControl_AttachErrorHandler+0x26>
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
 80046b4:	e004      	b.n	80046c0 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80046b6:	f640 0002 	movw	r0, #2050	; 0x802
 80046ba:	f000 f843 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200008b0 	.word	0x200008b0

080046cc <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
 80046f0:	e004      	b.n	80046fc <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 80046f2:	f640 0003 	movw	r0, #2051	; 0x803
 80046f6:	f000 f825 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }  
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	200008b0 	.word	0x200008b0

08004708 <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <BSP_MotorControl_AttachBusyInterrupt+0x26>
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4798      	blx	r3
 800472c:	e004      	b.n	8004738 <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 800472e:	f640 0004 	movw	r0, #2052	; 0x804
 8004732:	f000 f807 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }  
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200008b0 	.word	0x200008b0

08004744 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <BSP_MotorControl_ErrorHandler+0x38>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <BSP_MotorControl_ErrorHandler+0x2e>
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <BSP_MotorControl_ErrorHandler+0x38>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <BSP_MotorControl_ErrorHandler+0x38>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	4610      	mov	r0, r2
 800476e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8004770:	e000      	b.n	8004774 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8004772:	e7fe      	b.n	8004772 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200008b0 	.word	0x200008b0

08004780 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <BSP_MotorControl_Init+0x3c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <BSP_MotorControl_Init+0x2a>
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <BSP_MotorControl_Init+0x3c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <BSP_MotorControl_Init+0x3c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	4798      	blx	r3
 80047a8:	e004      	b.n	80047b4 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 80047aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80047ae:	f7ff ffc9 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }  
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	200008b0 	.word	0x200008b0

080047c0 <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <BSP_MotorControl_GetPosition+0x44>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <BSP_MotorControl_GetPosition+0x30>
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <BSP_MotorControl_GetPosition+0x44>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <BSP_MotorControl_GetPosition+0x44>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	79fa      	ldrb	r2, [r7, #7]
 80047e8:	4610      	mov	r0, r2
 80047ea:	4798      	blx	r3
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	e003      	b.n	80047f8 <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 80047f0:	f640 000e 	movw	r0, #2062	; 0x80e
 80047f4:	f7ff ffa6 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 80047f8:	68fb      	ldr	r3, [r7, #12]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200008b0 	.word	0x200008b0

08004808 <BSP_MotorControl_GoHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoHome(uint8_t deviceId)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoHome != 0))
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <BSP_MotorControl_GoHome+0x3c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <BSP_MotorControl_GoHome+0x2a>
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <BSP_MotorControl_GoHome+0x3c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d006      	beq.n	8004832 <BSP_MotorControl_GoHome+0x2a>
  {
    motorDrvHandle->GoHome(deviceId);
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <BSP_MotorControl_GoHome+0x3c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	79fa      	ldrb	r2, [r7, #7]
 800482c:	4610      	mov	r0, r2
 800482e:	4798      	blx	r3
 8004830:	e004      	b.n	800483c <BSP_MotorControl_GoHome+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(15);
 8004832:	f640 000f 	movw	r0, #2063	; 0x80f
 8004836:	f7ff ff85 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }      
} 
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200008b0 	.word	0x200008b0

08004848 <BSP_MotorControl_GoTo>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoTo != 0))
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <BSP_MotorControl_GoTo+0x40>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <BSP_MotorControl_GoTo+0x2e>
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <BSP_MotorControl_GoTo+0x40>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <BSP_MotorControl_GoTo+0x2e>
  {
    motorDrvHandle->GoTo(deviceId, targetPosition);
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <BSP_MotorControl_GoTo+0x40>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	79fa      	ldrb	r2, [r7, #7]
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	4610      	mov	r0, r2
 8004872:	4798      	blx	r3
 8004874:	e004      	b.n	8004880 <BSP_MotorControl_GoTo+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(17);
 8004876:	f640 0011 	movw	r0, #2065	; 0x811
 800487a:	f7ff ff63 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }      
}
 800487e:	bf00      	nop
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	200008b0 	.word	0x200008b0

0800488c <BSP_MotorControl_HardStop>:
 *            For L6208: dummy parameter for compatibility with motor.h
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval None
 **********************************************************/
void BSP_MotorControl_HardStop(uint8_t deviceId) 
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->HardStop != 0))
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <BSP_MotorControl_HardStop+0x3c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <BSP_MotorControl_HardStop+0x2a>
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <BSP_MotorControl_HardStop+0x3c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d006      	beq.n	80048b6 <BSP_MotorControl_HardStop+0x2a>
  {
    motorDrvHandle->HardStop(deviceId);
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <BSP_MotorControl_HardStop+0x3c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	79fa      	ldrb	r2, [r7, #7]
 80048b0:	4610      	mov	r0, r2
 80048b2:	4798      	blx	r3
 80048b4:	e004      	b.n	80048c0 <BSP_MotorControl_HardStop+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(18);
 80048b6:	f640 0012 	movw	r0, #2066	; 0x812
 80048ba:	f7ff ff43 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }      
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	200008b0 	.word	0x200008b0

080048cc <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	603a      	str	r2, [r7, #0]
 80048d6:	71fb      	strb	r3, [r7, #7]
 80048d8:	460b      	mov	r3, r1
 80048da:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <BSP_MotorControl_Move+0x44>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <BSP_MotorControl_Move+0x32>
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <BSP_MotorControl_Move+0x44>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <BSP_MotorControl_Move+0x44>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	79b9      	ldrb	r1, [r7, #6]
 80048f6:	79f8      	ldrb	r0, [r7, #7]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	4798      	blx	r3
 80048fc:	e004      	b.n	8004908 <BSP_MotorControl_Move+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 80048fe:	f640 0013 	movw	r0, #2067	; 0x813
 8004902:	f7ff ff1f 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }      
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	200008b0 	.word	0x200008b0

08004914 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <BSP_MotorControl_CheckBusyHw+0x40>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <BSP_MotorControl_CheckBusyHw+0x2e>
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <BSP_MotorControl_CheckBusyHw+0x40>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <BSP_MotorControl_CheckBusyHw+0x40>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800493a:	4798      	blx	r3
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
 8004940:	e003      	b.n	800494a <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 8004942:	f640 002b 	movw	r0, #2091	; 0x82b
 8004946:	f7ff fefd 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 800494a:	79fb      	ldrb	r3, [r7, #7]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200008b0 	.word	0x200008b0

08004958 <BSP_MotorControl_CmdHardHiZ>:
 * @note if two Brush DC motors use the same power bridge, the 
 * power bridge will be disable only if the two motors are
 * stopped
 **********************************************************/
void BSP_MotorControl_CmdHardHiZ(uint8_t deviceId)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdHardHiZ != 0))
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <BSP_MotorControl_CmdHardHiZ+0x40>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <BSP_MotorControl_CmdHardHiZ+0x2e>
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <BSP_MotorControl_CmdHardHiZ+0x40>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <BSP_MotorControl_CmdHardHiZ+0x2e>
  {
    motorDrvHandle->CmdHardHiZ(deviceId);
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <BSP_MotorControl_CmdHardHiZ+0x40>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800497e:	79fa      	ldrb	r2, [r7, #7]
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
 8004984:	e004      	b.n	8004990 <BSP_MotorControl_CmdHardHiZ+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(46);
 8004986:	f640 002e 	movw	r0, #2094	; 0x82e
 800498a:	f7ff fedb 	bl	8004744 <BSP_MotorControl_ErrorHandler>
  }
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200008b0 	.word	0x200008b0

0800499c <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	460a      	mov	r2, r1
 80049a6:	80fb      	strh	r3, [r7, #6]
 80049a8:	4613      	mov	r3, r2
 80049aa:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80049ac:	4a40      	ldr	r2, [pc, #256]	; (8004ab0 <BSP_MotorControl_SetNbDevices+0x114>)
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	f641 124a 	movw	r2, #6474	; 0x194a
 80049bc:	4293      	cmp	r3, r2
 80049be:	d105      	bne.n	80049cc <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80049c0:	f7ff fe2e 	bl	8004620 <L6474_GetMotorHandle>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e055      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80049d2:	f7fd ff33 	bl	800283c <Powerstep01_GetMotorHandle>
 80049d6:	4603      	mov	r3, r0
 80049d8:	4a36      	ldr	r2, [pc, #216]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e04c      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	f641 023e 	movw	r2, #6206	; 0x183e
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d105      	bne.n	80049f4 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80049e8:	f7ff fe32 	bl	8004650 <L6206_GetMotorHandle>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4a31      	ldr	r2, [pc, #196]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e041      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80049fa:	d105      	bne.n	8004a08 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80049fc:	f7ff fe30 	bl	8004660 <L6208_GetMotorHandle>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e037      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	2bdc      	cmp	r3, #220	; 0xdc
 8004a0c:	d105      	bne.n	8004a1a <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8004a0e:	f7ff fe2f 	bl	8004670 <Stspin220_GetMotorHandle>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e02e      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	f641 1246 	movw	r2, #6470	; 0x1946
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <BSP_MotorControl_SetNbDevices+0x92>
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	f641 1248 	movw	r2, #6472	; 0x1948
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d105      	bne.n	8004a3a <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8004a2e:	f7ff fdff 	bl	8004630 <l647x_GetMotorHandle>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e01e      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	f641 1250 	movw	r2, #6480	; 0x1950
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <BSP_MotorControl_SetNbDevices+0xb2>
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	f641 1252 	movw	r2, #6482	; 0x1952
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d105      	bne.n	8004a5a <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8004a4e:	f7ff fdf7 	bl	8004640 <l648x_GetMotorHandle>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e00e      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2bf0      	cmp	r3, #240	; 0xf0
 8004a5e:	d002      	beq.n	8004a66 <BSP_MotorControl_SetNbDevices+0xca>
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	2bfa      	cmp	r3, #250	; 0xfa
 8004a64:	d105      	bne.n	8004a72 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8004a66:	f7ff fe0b 	bl	8004680 <Stspin240_250_GetMotorHandle>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e002      	b.n	8004a78 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d011      	beq.n	8004aa4 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004a8c:	797b      	ldrb	r3, [r7, #5]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <BSP_MotorControl_SetNbDevices+0x118>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004a9a:	797a      	ldrb	r2, [r7, #5]
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4798      	blx	r3
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200008b4 	.word	0x200008b4
 8004ab4:	200008b0 	.word	0x200008b0

08004ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <HAL_Init+0x40>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <HAL_Init+0x40>)
 8004ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_Init+0x40>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <HAL_Init+0x40>)
 8004ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_Init+0x40>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a07      	ldr	r2, [pc, #28]	; (8004af8 <HAL_Init+0x40>)
 8004ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ae0:	2003      	movs	r0, #3
 8004ae2:	f000 fb82 	bl	80051ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ae6:	200f      	movs	r0, #15
 8004ae8:	f7fc fe22 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004aec:	f7fc fdf8 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023c00 	.word	0x40023c00

08004afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_IncTick+0x20>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_IncTick+0x24>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <HAL_IncTick+0x24>)
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	2000016c 	.word	0x2000016c
 8004b20:	20002a08 	.word	0x20002a08

08004b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return uwTick;
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_GetTick+0x14>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20002a08 	.word	0x20002a08

08004b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b44:	f7ff ffee 	bl	8004b24 <HAL_GetTick>
 8004b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b54:	d005      	beq.n	8004b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <HAL_Delay+0x44>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b62:	bf00      	nop
 8004b64:	f7ff ffde 	bl	8004b24 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d8f7      	bhi.n	8004b64 <HAL_Delay+0x28>
  {
  }
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	2000016c 	.word	0x2000016c

08004b84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e033      	b.n	8004c02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fb1e 	bl	80011e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d118      	bne.n	8004bf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bca:	f023 0302 	bic.w	r3, r3, #2
 8004bce:	f043 0202 	orr.w	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f93a 	bl	8004e50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8004bf2:	e001      	b.n	8004bf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e105      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x228>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	d925      	bls.n	8004c84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	4613      	mov	r3, r2
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3b1e      	subs	r3, #30
 8004c4e:	2207      	movs	r2, #7
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	43da      	mvns	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68d9      	ldr	r1, [r3, #12]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4603      	mov	r3, r0
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4403      	add	r3, r0
 8004c76:	3b1e      	subs	r3, #30
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	e022      	b.n	8004cca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6919      	ldr	r1, [r3, #16]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	4413      	add	r3, r2
 8004c98:	2207      	movs	r2, #7
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	400a      	ands	r2, r1
 8004ca6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6919      	ldr	r1, [r3, #16]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4618      	mov	r0, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4403      	add	r3, r0
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d824      	bhi.n	8004d1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3b05      	subs	r3, #5
 8004ce4:	221f      	movs	r2, #31
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43da      	mvns	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4618      	mov	r0, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3b05      	subs	r3, #5
 8004d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34
 8004d1a:	e04c      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d824      	bhi.n	8004d6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	3b23      	subs	r3, #35	; 0x23
 8004d36:	221f      	movs	r2, #31
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	400a      	ands	r2, r1
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4618      	mov	r0, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3b23      	subs	r3, #35	; 0x23
 8004d60:	fa00 f203 	lsl.w	r2, r0, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d6c:	e023      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3b41      	subs	r3, #65	; 0x41
 8004d80:	221f      	movs	r2, #31
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43da      	mvns	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	3b41      	subs	r3, #65	; 0x41
 8004daa:	fa00 f203 	lsl.w	r2, r0, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004db6:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <HAL_ADC_ConfigChannel+0x234>)
 8004db8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <HAL_ADC_ConfigChannel+0x238>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d109      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x1cc>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b12      	cmp	r3, #18
 8004dca:	d105      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <HAL_ADC_ConfigChannel+0x238>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d123      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x21e>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d003      	beq.n	8004df2 <HAL_ADC_ConfigChannel+0x1e6>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b11      	cmp	r3, #17
 8004df0:	d11b      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d111      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <HAL_ADC_ConfigChannel+0x23c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <HAL_ADC_ConfigChannel+0x240>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	0c9a      	lsrs	r2, r3, #18
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e1c:	e002      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f9      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40012300 	.word	0x40012300
 8004e44:	40012000 	.word	0x40012000
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	431bde83 	.word	0x431bde83

08004e50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e58:	4b79      	ldr	r3, [pc, #484]	; (8005040 <ADC_Init+0x1f0>)
 8004e5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	4a58      	ldr	r2, [pc, #352]	; (8005044 <ADC_Init+0x1f4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ef6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6899      	ldr	r1, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	e00f      	b.n	8004f4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0202 	bic.w	r2, r2, #2
 8004f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6899      	ldr	r1, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7e1b      	ldrb	r3, [r3, #24]
 8004f68:	005a      	lsls	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	035a      	lsls	r2, r3, #13
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	e007      	b.n	8004fc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	051a      	lsls	r2, r3, #20
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6899      	ldr	r1, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005006:	025a      	lsls	r2, r3, #9
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	029a      	lsls	r2, r3, #10
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40012300 	.word	0x40012300
 8005044:	0f000001 	.word	0x0f000001

08005048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005064:	4013      	ands	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800507a:	4a04      	ldr	r2, [pc, #16]	; (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	60d3      	str	r3, [r2, #12]
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	f003 0307 	and.w	r3, r3, #7
}
 800509e:	4618      	mov	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	db0b      	blt.n	80050d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	f003 021f 	and.w	r2, r3, #31
 80050c4:	4907      	ldr	r1, [pc, #28]	; (80050e4 <__NVIC_EnableIRQ+0x38>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	2001      	movs	r0, #1
 80050ce:	fa00 f202 	lsl.w	r2, r0, r2
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	e000e100 	.word	0xe000e100

080050e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db12      	blt.n	8005120 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	f003 021f 	and.w	r2, r3, #31
 8005100:	490a      	ldr	r1, [pc, #40]	; (800512c <__NVIC_DisableIRQ+0x44>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2001      	movs	r0, #1
 800510a:	fa00 f202 	lsl.w	r2, r0, r2
 800510e:	3320      	adds	r3, #32
 8005110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005114:	f3bf 8f4f 	dsb	sy
}
 8005118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800511a:	f3bf 8f6f 	isb	sy
}
 800511e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000e100 	.word	0xe000e100

08005130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db0a      	blt.n	800515a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	490c      	ldr	r1, [pc, #48]	; (800517c <__NVIC_SetPriority+0x4c>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	440b      	add	r3, r1
 8005154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005158:	e00a      	b.n	8005170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4908      	ldr	r1, [pc, #32]	; (8005180 <__NVIC_SetPriority+0x50>)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3b04      	subs	r3, #4
 8005168:	0112      	lsls	r2, r2, #4
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	440b      	add	r3, r1
 800516e:	761a      	strb	r2, [r3, #24]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	bf28      	it	cs
 80051a2:	2304      	movcs	r3, #4
 80051a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d902      	bls.n	80051b4 <NVIC_EncodePriority+0x30>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3b03      	subs	r3, #3
 80051b2:	e000      	b.n	80051b6 <NVIC_EncodePriority+0x32>
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	401a      	ands	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	4313      	orrs	r3, r2
         );
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3724      	adds	r7, #36	; 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ff28 	bl	8005048 <__NVIC_SetPriorityGrouping>
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005212:	f7ff ff3d 	bl	8005090 <__NVIC_GetPriorityGrouping>
 8005216:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	6978      	ldr	r0, [r7, #20]
 800521e:	f7ff ffb1 	bl	8005184 <NVIC_EncodePriority>
 8005222:	4602      	mov	r2, r0
 8005224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff80 	bl	8005130 <__NVIC_SetPriority>
}
 8005230:	bf00      	nop
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff30 	bl	80050ac <__NVIC_EnableIRQ>
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff40 	bl	80050e8 <__NVIC_DisableIRQ>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800527e:	f7ff fc51 	bl	8004b24 <HAL_GetTick>
 8005282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d008      	beq.n	80052a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2280      	movs	r2, #128	; 0x80
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e052      	b.n	8005348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0216 	bic.w	r2, r2, #22
 80052b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_DMA_Abort+0x62>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0208 	bic.w	r2, r2, #8
 80052e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052f2:	e013      	b.n	800531c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052f4:	f7ff fc16 	bl	8004b24 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d90c      	bls.n	800531c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2203      	movs	r2, #3
 800530c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e015      	b.n	8005348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e4      	bne.n	80052f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532e:	223f      	movs	r2, #63	; 0x3f
 8005330:	409a      	lsls	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e00c      	b.n	8005388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2205      	movs	r2, #5
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005394:	b480      	push	{r7}
 8005396:	b089      	sub	sp, #36	; 0x24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	e159      	b.n	8005664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053b0:	2201      	movs	r2, #1
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4013      	ands	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	f040 8148 	bne.w	800565e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d005      	beq.n	80053e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d130      	bne.n	8005448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	2203      	movs	r2, #3
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800541c:	2201      	movs	r2, #1
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	43db      	mvns	r3, r3
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4013      	ands	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	f003 0201 	and.w	r2, r3, #1
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4313      	orrs	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b03      	cmp	r3, #3
 8005452:	d017      	beq.n	8005484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	2203      	movs	r2, #3
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d123      	bne.n	80054d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	08da      	lsrs	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3208      	adds	r2, #8
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	220f      	movs	r2, #15
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	08da      	lsrs	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3208      	adds	r2, #8
 80054d2:	69b9      	ldr	r1, [r7, #24]
 80054d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	2203      	movs	r2, #3
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 0203 	and.w	r2, r3, #3
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a2 	beq.w	800565e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	4b57      	ldr	r3, [pc, #348]	; (800567c <HAL_GPIO_Init+0x2e8>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	4a56      	ldr	r2, [pc, #344]	; (800567c <HAL_GPIO_Init+0x2e8>)
 8005524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005528:	6453      	str	r3, [r2, #68]	; 0x44
 800552a:	4b54      	ldr	r3, [pc, #336]	; (800567c <HAL_GPIO_Init+0x2e8>)
 800552c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005536:	4a52      	ldr	r2, [pc, #328]	; (8005680 <HAL_GPIO_Init+0x2ec>)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3302      	adds	r3, #2
 800553e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	220f      	movs	r2, #15
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a49      	ldr	r2, [pc, #292]	; (8005684 <HAL_GPIO_Init+0x2f0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d019      	beq.n	8005596 <HAL_GPIO_Init+0x202>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a48      	ldr	r2, [pc, #288]	; (8005688 <HAL_GPIO_Init+0x2f4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_GPIO_Init+0x1fe>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a47      	ldr	r2, [pc, #284]	; (800568c <HAL_GPIO_Init+0x2f8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00d      	beq.n	800558e <HAL_GPIO_Init+0x1fa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a46      	ldr	r2, [pc, #280]	; (8005690 <HAL_GPIO_Init+0x2fc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <HAL_GPIO_Init+0x1f6>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a45      	ldr	r2, [pc, #276]	; (8005694 <HAL_GPIO_Init+0x300>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <HAL_GPIO_Init+0x1f2>
 8005582:	2304      	movs	r3, #4
 8005584:	e008      	b.n	8005598 <HAL_GPIO_Init+0x204>
 8005586:	2307      	movs	r3, #7
 8005588:	e006      	b.n	8005598 <HAL_GPIO_Init+0x204>
 800558a:	2303      	movs	r3, #3
 800558c:	e004      	b.n	8005598 <HAL_GPIO_Init+0x204>
 800558e:	2302      	movs	r3, #2
 8005590:	e002      	b.n	8005598 <HAL_GPIO_Init+0x204>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <HAL_GPIO_Init+0x204>
 8005596:	2300      	movs	r3, #0
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	f002 0203 	and.w	r2, r2, #3
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	4093      	lsls	r3, r2
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a8:	4935      	ldr	r1, [pc, #212]	; (8005680 <HAL_GPIO_Init+0x2ec>)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	3302      	adds	r3, #2
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055b6:	4b38      	ldr	r3, [pc, #224]	; (8005698 <HAL_GPIO_Init+0x304>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	43db      	mvns	r3, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4013      	ands	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055da:	4a2f      	ldr	r2, [pc, #188]	; (8005698 <HAL_GPIO_Init+0x304>)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055e0:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <HAL_GPIO_Init+0x304>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005604:	4a24      	ldr	r2, [pc, #144]	; (8005698 <HAL_GPIO_Init+0x304>)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <HAL_GPIO_Init+0x304>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800562e:	4a1a      	ldr	r2, [pc, #104]	; (8005698 <HAL_GPIO_Init+0x304>)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005634:	4b18      	ldr	r3, [pc, #96]	; (8005698 <HAL_GPIO_Init+0x304>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	43db      	mvns	r3, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005658:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <HAL_GPIO_Init+0x304>)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3301      	adds	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b0f      	cmp	r3, #15
 8005668:	f67f aea2 	bls.w	80053b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	3724      	adds	r7, #36	; 0x24
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800
 8005680:	40013800 	.word	0x40013800
 8005684:	40020000 	.word	0x40020000
 8005688:	40020400 	.word	0x40020400
 800568c:	40020800 	.word	0x40020800
 8005690:	40020c00 	.word	0x40020c00
 8005694:	40021000 	.word	0x40021000
 8005698:	40013c00 	.word	0x40013c00

0800569c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e0bb      	b.n	8005830 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056b8:	2201      	movs	r2, #1
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	f040 80ab 	bne.w	800582a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80056d4:	4a5c      	ldr	r2, [pc, #368]	; (8005848 <HAL_GPIO_DeInit+0x1ac>)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	3302      	adds	r3, #2
 80056dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	220f      	movs	r2, #15
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	4013      	ands	r3, r2
 80056f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a54      	ldr	r2, [pc, #336]	; (800584c <HAL_GPIO_DeInit+0x1b0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d019      	beq.n	8005732 <HAL_GPIO_DeInit+0x96>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a53      	ldr	r2, [pc, #332]	; (8005850 <HAL_GPIO_DeInit+0x1b4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <HAL_GPIO_DeInit+0x92>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a52      	ldr	r2, [pc, #328]	; (8005854 <HAL_GPIO_DeInit+0x1b8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00d      	beq.n	800572a <HAL_GPIO_DeInit+0x8e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a51      	ldr	r2, [pc, #324]	; (8005858 <HAL_GPIO_DeInit+0x1bc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <HAL_GPIO_DeInit+0x8a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a50      	ldr	r2, [pc, #320]	; (800585c <HAL_GPIO_DeInit+0x1c0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d101      	bne.n	8005722 <HAL_GPIO_DeInit+0x86>
 800571e:	2304      	movs	r3, #4
 8005720:	e008      	b.n	8005734 <HAL_GPIO_DeInit+0x98>
 8005722:	2307      	movs	r3, #7
 8005724:	e006      	b.n	8005734 <HAL_GPIO_DeInit+0x98>
 8005726:	2303      	movs	r3, #3
 8005728:	e004      	b.n	8005734 <HAL_GPIO_DeInit+0x98>
 800572a:	2302      	movs	r3, #2
 800572c:	e002      	b.n	8005734 <HAL_GPIO_DeInit+0x98>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <HAL_GPIO_DeInit+0x98>
 8005732:	2300      	movs	r3, #0
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	f002 0203 	and.w	r2, r2, #3
 800573a:	0092      	lsls	r2, r2, #2
 800573c:	4093      	lsls	r3, r2
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d132      	bne.n	80057aa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005744:	4b46      	ldr	r3, [pc, #280]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	43db      	mvns	r3, r3
 800574c:	4944      	ldr	r1, [pc, #272]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 800574e:	4013      	ands	r3, r2
 8005750:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005752:	4b43      	ldr	r3, [pc, #268]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	43db      	mvns	r3, r3
 800575a:	4941      	ldr	r1, [pc, #260]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 800575c:	4013      	ands	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005760:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	43db      	mvns	r3, r3
 8005768:	493d      	ldr	r1, [pc, #244]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 800576a:	4013      	ands	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800576e:	4b3c      	ldr	r3, [pc, #240]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	43db      	mvns	r3, r3
 8005776:	493a      	ldr	r1, [pc, #232]	; (8005860 <HAL_GPIO_DeInit+0x1c4>)
 8005778:	4013      	ands	r3, r2
 800577a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	220f      	movs	r2, #15
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800578c:	4a2e      	ldr	r2, [pc, #184]	; (8005848 <HAL_GPIO_DeInit+0x1ac>)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	089b      	lsrs	r3, r3, #2
 8005792:	3302      	adds	r3, #2
 8005794:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	43da      	mvns	r2, r3
 800579c:	482a      	ldr	r0, [pc, #168]	; (8005848 <HAL_GPIO_DeInit+0x1ac>)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	089b      	lsrs	r3, r3, #2
 80057a2:	400a      	ands	r2, r1
 80057a4:	3302      	adds	r3, #2
 80057a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2103      	movs	r1, #3
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	08da      	lsrs	r2, r3, #3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3208      	adds	r2, #8
 80057c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	220f      	movs	r2, #15
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	08d2      	lsrs	r2, r2, #3
 80057e0:	4019      	ands	r1, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3208      	adds	r2, #8
 80057e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	2103      	movs	r1, #3
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	401a      	ands	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	2101      	movs	r1, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa01 f303 	lsl.w	r3, r1, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	401a      	ands	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	2103      	movs	r1, #3
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	3301      	adds	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b0f      	cmp	r3, #15
 8005834:	f67f af40 	bls.w	80056b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40013800 	.word	0x40013800
 800584c:	40020000 	.word	0x40020000
 8005850:	40020400 	.word	0x40020400
 8005854:	40020800 	.word	0x40020800
 8005858:	40020c00 	.word	0x40020c00
 800585c:	40021000 	.word	0x40021000
 8005860:	40013c00 	.word	0x40013c00

08005864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e001      	b.n	8005886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	807b      	strh	r3, [r7, #2]
 80058a0:	4613      	mov	r3, r2
 80058a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058a4:	787b      	ldrb	r3, [r7, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058b0:	e003      	b.n	80058ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058b2:	887b      	ldrh	r3, [r7, #2]
 80058b4:	041a      	lsls	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	619a      	str	r2, [r3, #24]
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058d2:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058de:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f806 	bl	80058f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40013c00 	.word	0x40013c00

080058f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e264      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d075      	beq.n	8005a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800592e:	4ba3      	ldr	r3, [pc, #652]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b04      	cmp	r3, #4
 8005938:	d00c      	beq.n	8005954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593a:	4ba0      	ldr	r3, [pc, #640]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005942:	2b08      	cmp	r3, #8
 8005944:	d112      	bne.n	800596c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005946:	4b9d      	ldr	r3, [pc, #628]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800594e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005952:	d10b      	bne.n	800596c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	4b99      	ldr	r3, [pc, #612]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d05b      	beq.n	8005a18 <HAL_RCC_OscConfig+0x108>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d157      	bne.n	8005a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e23f      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005974:	d106      	bne.n	8005984 <HAL_RCC_OscConfig+0x74>
 8005976:	4b91      	ldr	r3, [pc, #580]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a90      	ldr	r2, [pc, #576]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e01d      	b.n	80059c0 <HAL_RCC_OscConfig+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x98>
 800598e:	4b8b      	ldr	r3, [pc, #556]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a8a      	ldr	r2, [pc, #552]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b88      	ldr	r3, [pc, #544]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a87      	ldr	r2, [pc, #540]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e00b      	b.n	80059c0 <HAL_RCC_OscConfig+0xb0>
 80059a8:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a83      	ldr	r2, [pc, #524]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b81      	ldr	r3, [pc, #516]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a80      	ldr	r2, [pc, #512]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7ff f8ac 	bl	8004b24 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d0:	f7ff f8a8 	bl	8004b24 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	; 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e204      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e2:	4b76      	ldr	r3, [pc, #472]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0xc0>
 80059ee:	e014      	b.n	8005a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f0:	f7ff f898 	bl	8004b24 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f8:	f7ff f894 	bl	8004b24 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e1f0      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0a:	4b6c      	ldr	r3, [pc, #432]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0xe8>
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d063      	beq.n	8005aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a26:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a32:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d11c      	bne.n	8005a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3e:	4b5f      	ldr	r3, [pc, #380]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d116      	bne.n	8005a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4a:	4b5c      	ldr	r3, [pc, #368]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_RCC_OscConfig+0x152>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d001      	beq.n	8005a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e1c4      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a62:	4b56      	ldr	r3, [pc, #344]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4952      	ldr	r1, [pc, #328]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a76:	e03a      	b.n	8005aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d020      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a80:	4b4f      	ldr	r3, [pc, #316]	; (8005bc0 <HAL_RCC_OscConfig+0x2b0>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a86:	f7ff f84d 	bl	8004b24 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a8e:	f7ff f849 	bl	8004b24 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e1a5      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa0:	4b46      	ldr	r3, [pc, #280]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aac:	4b43      	ldr	r3, [pc, #268]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4940      	ldr	r1, [pc, #256]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	600b      	str	r3, [r1, #0]
 8005ac0:	e015      	b.n	8005aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <HAL_RCC_OscConfig+0x2b0>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7ff f82c 	bl	8004b24 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad0:	f7ff f828 	bl	8004b24 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e184      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d030      	beq.n	8005b5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b02:	4b30      	ldr	r3, [pc, #192]	; (8005bc4 <HAL_RCC_OscConfig+0x2b4>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b08:	f7ff f80c 	bl	8004b24 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b10:	f7ff f808 	bl	8004b24 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e164      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b22:	4b26      	ldr	r3, [pc, #152]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x200>
 8005b2e:	e015      	b.n	8005b5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b30:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <HAL_RCC_OscConfig+0x2b4>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b36:	f7fe fff5 	bl	8004b24 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b3e:	f7fe fff1 	bl	8004b24 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e14d      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f0      	bne.n	8005b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80a0 	beq.w	8005caa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10f      	bne.n	8005b9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b96:	2301      	movs	r3, #1
 8005b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <HAL_RCC_OscConfig+0x2b8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d121      	bne.n	8005bea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <HAL_RCC_OscConfig+0x2b8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a07      	ldr	r2, [pc, #28]	; (8005bc8 <HAL_RCC_OscConfig+0x2b8>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb2:	f7fe ffb7 	bl	8004b24 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb8:	e011      	b.n	8005bde <HAL_RCC_OscConfig+0x2ce>
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	42470000 	.word	0x42470000
 8005bc4:	42470e80 	.word	0x42470e80
 8005bc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bcc:	f7fe ffaa 	bl	8004b24 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e106      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bde:	4b85      	ldr	r3, [pc, #532]	; (8005df4 <HAL_RCC_OscConfig+0x4e4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d106      	bne.n	8005c00 <HAL_RCC_OscConfig+0x2f0>
 8005bf2:	4b81      	ldr	r3, [pc, #516]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	4a80      	ldr	r2, [pc, #512]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfe:	e01c      	b.n	8005c3a <HAL_RCC_OscConfig+0x32a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d10c      	bne.n	8005c22 <HAL_RCC_OscConfig+0x312>
 8005c08:	4b7b      	ldr	r3, [pc, #492]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0c:	4a7a      	ldr	r2, [pc, #488]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c0e:	f043 0304 	orr.w	r3, r3, #4
 8005c12:	6713      	str	r3, [r2, #112]	; 0x70
 8005c14:	4b78      	ldr	r3, [pc, #480]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	4a77      	ldr	r2, [pc, #476]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c20:	e00b      	b.n	8005c3a <HAL_RCC_OscConfig+0x32a>
 8005c22:	4b75      	ldr	r3, [pc, #468]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	4a74      	ldr	r2, [pc, #464]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2e:	4b72      	ldr	r3, [pc, #456]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a71      	ldr	r2, [pc, #452]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c34:	f023 0304 	bic.w	r3, r3, #4
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d015      	beq.n	8005c6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c42:	f7fe ff6f 	bl	8004b24 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c48:	e00a      	b.n	8005c60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4a:	f7fe ff6b 	bl	8004b24 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e0c5      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c60:	4b65      	ldr	r3, [pc, #404]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ee      	beq.n	8005c4a <HAL_RCC_OscConfig+0x33a>
 8005c6c:	e014      	b.n	8005c98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6e:	f7fe ff59 	bl	8004b24 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c74:	e00a      	b.n	8005c8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7fe ff55 	bl	8004b24 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e0af      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8c:	4b5a      	ldr	r3, [pc, #360]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ee      	bne.n	8005c76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d105      	bne.n	8005caa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9e:	4b56      	ldr	r3, [pc, #344]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	4a55      	ldr	r2, [pc, #340]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 809b 	beq.w	8005dea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb4:	4b50      	ldr	r3, [pc, #320]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 030c 	and.w	r3, r3, #12
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d05c      	beq.n	8005d7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d141      	bne.n	8005d4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc8:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <HAL_RCC_OscConfig+0x4ec>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cce:	f7fe ff29 	bl	8004b24 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd6:	f7fe ff25 	bl	8004b24 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e081      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce8:	4b43      	ldr	r3, [pc, #268]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f0      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	019b      	lsls	r3, r3, #6
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	061b      	lsls	r3, r3, #24
 8005d18:	4937      	ldr	r1, [pc, #220]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d1e:	4b37      	ldr	r3, [pc, #220]	; (8005dfc <HAL_RCC_OscConfig+0x4ec>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d24:	f7fe fefe 	bl	8004b24 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fe fefa 	bl	8004b24 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e056      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3e:	4b2e      	ldr	r3, [pc, #184]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x41c>
 8005d4a:	e04e      	b.n	8005dea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <HAL_RCC_OscConfig+0x4ec>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d52:	f7fe fee7 	bl	8004b24 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5a:	f7fe fee3 	bl	8004b24 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e03f      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6c:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f0      	bne.n	8005d5a <HAL_RCC_OscConfig+0x44a>
 8005d78:	e037      	b.n	8005dea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e032      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <HAL_RCC_OscConfig+0x4e8>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d028      	beq.n	8005de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d121      	bne.n	8005de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d11a      	bne.n	8005de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005db6:	4013      	ands	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d111      	bne.n	8005de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40007000 	.word	0x40007000
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	42470060 	.word	0x42470060

08005e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0cc      	b.n	8005fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e14:	4b68      	ldr	r3, [pc, #416]	; (8005fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d90c      	bls.n	8005e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e22:	4b65      	ldr	r3, [pc, #404]	; (8005fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2a:	4b63      	ldr	r3, [pc, #396]	; (8005fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0b8      	b.n	8005fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d020      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e54:	4b59      	ldr	r3, [pc, #356]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	4a58      	ldr	r2, [pc, #352]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e6c:	4b53      	ldr	r3, [pc, #332]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4a52      	ldr	r2, [pc, #328]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e78:	4b50      	ldr	r3, [pc, #320]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	494d      	ldr	r1, [pc, #308]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d044      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d107      	bne.n	8005eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9e:	4b47      	ldr	r3, [pc, #284]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d119      	bne.n	8005ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e07f      	b.n	8005fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d107      	bne.n	8005ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ebe:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d109      	bne.n	8005ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e06f      	b.n	8005fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ece:	4b3b      	ldr	r3, [pc, #236]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e067      	b.n	8005fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ede:	4b37      	ldr	r3, [pc, #220]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f023 0203 	bic.w	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4934      	ldr	r1, [pc, #208]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef0:	f7fe fe18 	bl	8004b24 <HAL_GetTick>
 8005ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef8:	f7fe fe14 	bl	8004b24 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e04f      	b.n	8005fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0e:	4b2b      	ldr	r3, [pc, #172]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 020c 	and.w	r2, r3, #12
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d1eb      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d20c      	bcs.n	8005f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2e:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e032      	b.n	8005fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4916      	ldr	r1, [pc, #88]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	490e      	ldr	r1, [pc, #56]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f86:	f000 f821 	bl	8005fcc <HAL_RCC_GetSysClockFreq>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	490a      	ldr	r1, [pc, #40]	; (8005fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f98:	5ccb      	ldrb	r3, [r1, r3]
 8005f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9e:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fb fbc2 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40023c00 	.word	0x40023c00
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	0800de00 	.word	0x0800de00
 8005fc4:	20000000 	.word	0x20000000
 8005fc8:	20000168 	.word	0x20000168

08005fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fe4:	4b67      	ldr	r3, [pc, #412]	; (8006184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 030c 	and.w	r3, r3, #12
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d00d      	beq.n	800600c <HAL_RCC_GetSysClockFreq+0x40>
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	f200 80bd 	bhi.w	8006170 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x34>
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d003      	beq.n	8006006 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ffe:	e0b7      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006000:	4b61      	ldr	r3, [pc, #388]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006002:	60bb      	str	r3, [r7, #8]
       break;
 8006004:	e0b7      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006006:	4b61      	ldr	r3, [pc, #388]	; (800618c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006008:	60bb      	str	r3, [r7, #8]
      break;
 800600a:	e0b4      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800600c:	4b5d      	ldr	r3, [pc, #372]	; (8006184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006014:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006016:	4b5b      	ldr	r3, [pc, #364]	; (8006184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d04d      	beq.n	80060be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006022:	4b58      	ldr	r3, [pc, #352]	; (8006184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	099b      	lsrs	r3, r3, #6
 8006028:	461a      	mov	r2, r3
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006032:	f04f 0100 	mov.w	r1, #0
 8006036:	ea02 0800 	and.w	r8, r2, r0
 800603a:	ea03 0901 	and.w	r9, r3, r1
 800603e:	4640      	mov	r0, r8
 8006040:	4649      	mov	r1, r9
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	014b      	lsls	r3, r1, #5
 800604c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006050:	0142      	lsls	r2, r0, #5
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	ebb0 0008 	subs.w	r0, r0, r8
 800605a:	eb61 0109 	sbc.w	r1, r1, r9
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	f04f 0300 	mov.w	r3, #0
 8006066:	018b      	lsls	r3, r1, #6
 8006068:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800606c:	0182      	lsls	r2, r0, #6
 800606e:	1a12      	subs	r2, r2, r0
 8006070:	eb63 0301 	sbc.w	r3, r3, r1
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	00d9      	lsls	r1, r3, #3
 800607e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006082:	00d0      	lsls	r0, r2, #3
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	eb12 0208 	adds.w	r2, r2, r8
 800608c:	eb43 0309 	adc.w	r3, r3, r9
 8006090:	f04f 0000 	mov.w	r0, #0
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	0259      	lsls	r1, r3, #9
 800609a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800609e:	0250      	lsls	r0, r2, #9
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4610      	mov	r0, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	f7fa feaa 	bl	8000e08 <__aeabi_uldivmod>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4613      	mov	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e04a      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060be:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	099b      	lsrs	r3, r3, #6
 80060c4:	461a      	mov	r2, r3
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060ce:	f04f 0100 	mov.w	r1, #0
 80060d2:	ea02 0400 	and.w	r4, r2, r0
 80060d6:	ea03 0501 	and.w	r5, r3, r1
 80060da:	4620      	mov	r0, r4
 80060dc:	4629      	mov	r1, r5
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	014b      	lsls	r3, r1, #5
 80060e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060ec:	0142      	lsls	r2, r0, #5
 80060ee:	4610      	mov	r0, r2
 80060f0:	4619      	mov	r1, r3
 80060f2:	1b00      	subs	r0, r0, r4
 80060f4:	eb61 0105 	sbc.w	r1, r1, r5
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	018b      	lsls	r3, r1, #6
 8006102:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006106:	0182      	lsls	r2, r0, #6
 8006108:	1a12      	subs	r2, r2, r0
 800610a:	eb63 0301 	sbc.w	r3, r3, r1
 800610e:	f04f 0000 	mov.w	r0, #0
 8006112:	f04f 0100 	mov.w	r1, #0
 8006116:	00d9      	lsls	r1, r3, #3
 8006118:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800611c:	00d0      	lsls	r0, r2, #3
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	1912      	adds	r2, r2, r4
 8006124:	eb45 0303 	adc.w	r3, r5, r3
 8006128:	f04f 0000 	mov.w	r0, #0
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	0299      	lsls	r1, r3, #10
 8006132:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006136:	0290      	lsls	r0, r2, #10
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4610      	mov	r0, r2
 800613e:	4619      	mov	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	461a      	mov	r2, r3
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	f7fa fe5e 	bl	8000e08 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4613      	mov	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	3301      	adds	r3, #1
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	60bb      	str	r3, [r7, #8]
      break;
 800616e:	e002      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006172:	60bb      	str	r3, [r7, #8]
      break;
 8006174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006176:	68bb      	ldr	r3, [r7, #8]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006182:	bf00      	nop
 8006184:	40023800 	.word	0x40023800
 8006188:	00f42400 	.word	0x00f42400
 800618c:	007a1200 	.word	0x007a1200

08006190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000000 	.word	0x20000000

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061ac:	f7ff fff0 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0a9b      	lsrs	r3, r3, #10
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4903      	ldr	r1, [pc, #12]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	0800de10 	.word	0x0800de10

080061d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061d4:	f7ff ffdc 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	0b5b      	lsrs	r3, r3, #13
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	4903      	ldr	r1, [pc, #12]	; (80061f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40023800 	.word	0x40023800
 80061f4:	0800de10 	.word	0x0800de10

080061f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	220f      	movs	r2, #15
 8006206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006208:	4b12      	ldr	r3, [pc, #72]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0203 	and.w	r2, r3, #3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006220:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <HAL_RCC_GetClockConfig+0x60>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0207 	and.w	r2, r3, #7
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	601a      	str	r2, [r3, #0]
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800
 8006258:	40023c00 	.word	0x40023c00

0800625c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e07b      	b.n	8006366 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627e:	d009      	beq.n	8006294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	61da      	str	r2, [r3, #28]
 8006286:	e005      	b.n	8006294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb f9ce 	bl	8001650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	ea42 0103 	orr.w	r1, r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	f003 0104 	and.w	r1, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	f003 0210 	and.w	r2, r3, #16
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08c      	sub	sp, #48	; 0x30
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800637c:	2301      	movs	r3, #1
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x26>
 8006390:	2302      	movs	r3, #2
 8006392:	e18a      	b.n	80066aa <HAL_SPI_TransmitReceive+0x33c>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800639c:	f7fe fbc2 	bl	8004b24 <HAL_GetTick>
 80063a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d00f      	beq.n	80063de <HAL_SPI_TransmitReceive+0x70>
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c4:	d107      	bne.n	80063d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <HAL_SPI_TransmitReceive+0x68>
 80063ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d003      	beq.n	80063de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063dc:	e15b      	b.n	8006696 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x82>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x82>
 80063ea:	887b      	ldrh	r3, [r7, #2]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063f6:	e14e      	b.n	8006696 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b04      	cmp	r3, #4
 8006402:	d003      	beq.n	800640c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2205      	movs	r2, #5
 8006408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	887a      	ldrh	r2, [r7, #2]
 8006422:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	887a      	ldrh	r2, [r7, #2]
 800642e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	887a      	ldrh	r2, [r7, #2]
 8006434:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d007      	beq.n	8006460 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006468:	d178      	bne.n	800655c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x10a>
 8006472:	8b7b      	ldrh	r3, [r7, #26]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d166      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	881a      	ldrh	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	1c9a      	adds	r2, r3, #2
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800649c:	e053      	b.n	8006546 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d11b      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x176>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x176>
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d113      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	881a      	ldrh	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	1c9a      	adds	r2, r3, #2
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d119      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x1b8>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d014      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	b292      	uxth	r2, r2
 8006508:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	1c9a      	adds	r2, r3, #2
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006522:	2301      	movs	r3, #1
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006526:	f7fe fafd 	bl	8004b24 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006532:	429a      	cmp	r2, r3
 8006534:	d807      	bhi.n	8006546 <HAL_SPI_TransmitReceive+0x1d8>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800653c:	d003      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006544:	e0a7      	b.n	8006696 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1a6      	bne.n	800649e <HAL_SPI_TransmitReceive+0x130>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1a1      	bne.n	800649e <HAL_SPI_TransmitReceive+0x130>
 800655a:	e07c      	b.n	8006656 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_SPI_TransmitReceive+0x1fc>
 8006564:	8b7b      	ldrh	r3, [r7, #26]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d16b      	bne.n	8006642 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006590:	e057      	b.n	8006642 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b02      	cmp	r3, #2
 800659e:	d11c      	bne.n	80065da <HAL_SPI_TransmitReceive+0x26c>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d017      	beq.n	80065da <HAL_SPI_TransmitReceive+0x26c>
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d114      	bne.n	80065da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d119      	bne.n	800661c <HAL_SPI_TransmitReceive+0x2ae>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d014      	beq.n	800661c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006618:	2301      	movs	r3, #1
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800661c:	f7fe fa82 	bl	8004b24 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006628:	429a      	cmp	r2, r3
 800662a:	d803      	bhi.n	8006634 <HAL_SPI_TransmitReceive+0x2c6>
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006632:	d102      	bne.n	800663a <HAL_SPI_TransmitReceive+0x2cc>
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006640:	e029      	b.n	8006696 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1a2      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x224>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d19d      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f8b2 	bl	80067c4 <SPI_EndRxTxTransaction>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006672:	e010      	b.n	8006696 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10b      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	e000      	b.n	8006696 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006694:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3730      	adds	r7, #48	; 0x30
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066c4:	f7fe fa2e 	bl	8004b24 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4413      	add	r3, r2
 80066d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066d4:	f7fe fa26 	bl	8004b24 <HAL_GetTick>
 80066d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066da:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	015b      	lsls	r3, r3, #5
 80066e0:	0d1b      	lsrs	r3, r3, #20
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	fb02 f303 	mul.w	r3, r2, r3
 80066e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ea:	e054      	b.n	8006796 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f2:	d050      	beq.n	8006796 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066f4:	f7fe fa16 	bl	8004b24 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	429a      	cmp	r2, r3
 8006702:	d902      	bls.n	800670a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d13d      	bne.n	8006786 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006722:	d111      	bne.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672c:	d004      	beq.n	8006738 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006736:	d107      	bne.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006750:	d10f      	bne.n	8006772 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e017      	b.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	3b01      	subs	r3, #1
 8006794:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4013      	ands	r3, r2
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d19b      	bne.n	80066ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000000 	.word	0x20000000

080067c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067d0:	4b1b      	ldr	r3, [pc, #108]	; (8006840 <SPI_EndRxTxTransaction+0x7c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <SPI_EndRxTxTransaction+0x80>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	0d5b      	lsrs	r3, r3, #21
 80067dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ee:	d112      	bne.n	8006816 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	2180      	movs	r1, #128	; 0x80
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff ff5a 	bl	80066b4 <SPI_WaitFlagStateUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d016      	beq.n	8006834 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	f043 0220 	orr.w	r2, r3, #32
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e00f      	b.n	8006836 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3b01      	subs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	2b80      	cmp	r3, #128	; 0x80
 800682e:	d0f2      	beq.n	8006816 <SPI_EndRxTxTransaction+0x52>
 8006830:	e000      	b.n	8006834 <SPI_EndRxTxTransaction+0x70>
        break;
 8006832:	bf00      	nop
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000000 	.word	0x20000000
 8006844:	165e9f81 	.word	0x165e9f81

08006848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e041      	b.n	80068de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb f9a6 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f000 fd4a 	bl	8007320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e044      	b.n	800698a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1e      	ldr	r2, [pc, #120]	; (8006998 <HAL_TIM_Base_Start_IT+0xb0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d018      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0x6c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d013      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0x6c>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1a      	ldr	r2, [pc, #104]	; (800699c <HAL_TIM_Base_Start_IT+0xb4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00e      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0x6c>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0x6c>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a17      	ldr	r2, [pc, #92]	; (80069a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0x6c>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d111      	bne.n	8006978 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b06      	cmp	r3, #6
 8006964:	d010      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0201 	orr.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006976:	e007      	b.n	8006988 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40014000 	.word	0x40014000

080069ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e041      	b.n	8006a42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fb f916 	bl	8001c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f000 fc98 	bl	8007320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <HAL_TIM_PWM_Start_IT+0x28>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	bf14      	ite	ne
 8006a6c:	2301      	movne	r3, #1
 8006a6e:	2300      	moveq	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	e022      	b.n	8006aba <HAL_TIM_PWM_Start_IT+0x6e>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d109      	bne.n	8006a8e <HAL_TIM_PWM_Start_IT+0x42>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	bf14      	ite	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	2300      	moveq	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	e015      	b.n	8006aba <HAL_TIM_PWM_Start_IT+0x6e>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d109      	bne.n	8006aa8 <HAL_TIM_PWM_Start_IT+0x5c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	e008      	b.n	8006aba <HAL_TIM_PWM_Start_IT+0x6e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0b3      	b.n	8006c2a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIM_PWM_Start_IT+0x86>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad0:	e013      	b.n	8006afa <HAL_TIM_PWM_Start_IT+0xae>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d104      	bne.n	8006ae2 <HAL_TIM_PWM_Start_IT+0x96>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae0:	e00b      	b.n	8006afa <HAL_TIM_PWM_Start_IT+0xae>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_PWM_Start_IT+0xa6>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af0:	e003      	b.n	8006afa <HAL_TIM_PWM_Start_IT+0xae>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b0c      	cmp	r3, #12
 8006afe:	d841      	bhi.n	8006b84 <HAL_TIM_PWM_Start_IT+0x138>
 8006b00:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b3d 	.word	0x08006b3d
 8006b0c:	08006b85 	.word	0x08006b85
 8006b10:	08006b85 	.word	0x08006b85
 8006b14:	08006b85 	.word	0x08006b85
 8006b18:	08006b4f 	.word	0x08006b4f
 8006b1c:	08006b85 	.word	0x08006b85
 8006b20:	08006b85 	.word	0x08006b85
 8006b24:	08006b85 	.word	0x08006b85
 8006b28:	08006b61 	.word	0x08006b61
 8006b2c:	08006b85 	.word	0x08006b85
 8006b30:	08006b85 	.word	0x08006b85
 8006b34:	08006b85 	.word	0x08006b85
 8006b38:	08006b73 	.word	0x08006b73
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0202 	orr.w	r2, r2, #2
 8006b4a:	60da      	str	r2, [r3, #12]
      break;
 8006b4c:	e01d      	b.n	8006b8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0204 	orr.w	r2, r2, #4
 8006b5c:	60da      	str	r2, [r3, #12]
      break;
 8006b5e:	e014      	b.n	8006b8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0208 	orr.w	r2, r2, #8
 8006b6e:	60da      	str	r2, [r3, #12]
      break;
 8006b70:	e00b      	b.n	8006b8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0210 	orr.w	r2, r2, #16
 8006b80:	60da      	str	r2, [r3, #12]
      break;
 8006b82:	e002      	b.n	8006b8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
      break;
 8006b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d14b      	bne.n	8006c28 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fe67 	bl	800786c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bb6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d013      	beq.n	8006bf4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a19      	ldr	r2, [pc, #100]	; (8006c38 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d111      	bne.n	8006c18 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	d010      	beq.n	8006c28 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c16:	e007      	b.n	8006c28 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40010000 	.word	0x40010000
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40000c00 	.word	0x40000c00
 8006c44:	40014000 	.word	0x40014000

08006c48 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	d841      	bhi.n	8006ce0 <HAL_TIM_PWM_Stop_IT+0x98>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006ce1 	.word	0x08006ce1
 8006c6c:	08006ce1 	.word	0x08006ce1
 8006c70:	08006ce1 	.word	0x08006ce1
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006ce1 	.word	0x08006ce1
 8006c7c:	08006ce1 	.word	0x08006ce1
 8006c80:	08006ce1 	.word	0x08006ce1
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006ce1 	.word	0x08006ce1
 8006c94:	08006ccf 	.word	0x08006ccf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0202 	bic.w	r2, r2, #2
 8006ca6:	60da      	str	r2, [r3, #12]
      break;
 8006ca8:	e01d      	b.n	8006ce6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0204 	bic.w	r2, r2, #4
 8006cb8:	60da      	str	r2, [r3, #12]
      break;
 8006cba:	e014      	b.n	8006ce6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0208 	bic.w	r2, r2, #8
 8006cca:	60da      	str	r2, [r3, #12]
      break;
 8006ccc:	e00b      	b.n	8006ce6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0210 	bic.w	r2, r2, #16
 8006cdc:	60da      	str	r2, [r3, #12]
      break;
 8006cde:	e002      	b.n	8006ce6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d157      	bne.n	8006d9c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fdb9 	bl	800786c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a2a      	ldr	r2, [pc, #168]	; (8006da8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d117      	bne.n	8006d34 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10f      	bne.n	8006d34 <HAL_TIM_PWM_Stop_IT+0xec>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d107      	bne.n	8006d34 <HAL_TIM_PWM_Stop_IT+0xec>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10f      	bne.n	8006d64 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6a1a      	ldr	r2, [r3, #32]
 8006d4a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d107      	bne.n	8006d64 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0201 	bic.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d72:	e013      	b.n	8006d9c <HAL_TIM_PWM_Stop_IT+0x154>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d104      	bne.n	8006d84 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d82:	e00b      	b.n	8006d9c <HAL_TIM_PWM_Stop_IT+0x154>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d104      	bne.n	8006d94 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d92:	e003      	b.n	8006d9c <HAL_TIM_PWM_Stop_IT+0x154>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000

08006dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d122      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d11b      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0202 	mvn.w	r2, #2
 8006dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa77 	bl	80072e2 <HAL_TIM_IC_CaptureCallback>
 8006df4:	e005      	b.n	8006e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa69 	bl	80072ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fa7a 	bl	80072f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d122      	bne.n	8006e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d11b      	bne.n	8006e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0204 	mvn.w	r2, #4
 8006e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa4d 	bl	80072e2 <HAL_TIM_IC_CaptureCallback>
 8006e48:	e005      	b.n	8006e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fa3f 	bl	80072ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fa50 	bl	80072f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d122      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d11b      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0208 	mvn.w	r2, #8
 8006e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2204      	movs	r2, #4
 8006e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa23 	bl	80072e2 <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa15 	bl	80072ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa26 	bl	80072f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b10      	cmp	r3, #16
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0210 	mvn.w	r2, #16
 8006ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9f9 	bl	80072e2 <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f9eb 	bl	80072ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f9fc 	bl	80072f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d10e      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d107      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0201 	mvn.w	r2, #1
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fa fb46 	bl	80015bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d10e      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	2b80      	cmp	r3, #128	; 0x80
 8006f4a:	d107      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fd26 	bl	80079a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f66:	2b40      	cmp	r3, #64	; 0x40
 8006f68:	d10e      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d107      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f9c1 	bl	800730a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d10e      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d107      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0220 	mvn.w	r2, #32
 8006fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fcf0 	bl	8007994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e0ae      	b.n	8007138 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b0c      	cmp	r3, #12
 8006fe6:	f200 809f 	bhi.w	8007128 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fea:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007025 	.word	0x08007025
 8006ff4:	08007129 	.word	0x08007129
 8006ff8:	08007129 	.word	0x08007129
 8006ffc:	08007129 	.word	0x08007129
 8007000:	08007065 	.word	0x08007065
 8007004:	08007129 	.word	0x08007129
 8007008:	08007129 	.word	0x08007129
 800700c:	08007129 	.word	0x08007129
 8007010:	080070a7 	.word	0x080070a7
 8007014:	08007129 	.word	0x08007129
 8007018:	08007129 	.word	0x08007129
 800701c:	08007129 	.word	0x08007129
 8007020:	080070e7 	.word	0x080070e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f9f8 	bl	8007420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0208 	orr.w	r2, r2, #8
 800703e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0204 	bic.w	r2, r2, #4
 800704e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6999      	ldr	r1, [r3, #24]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	619a      	str	r2, [r3, #24]
      break;
 8007062:	e064      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fa3e 	bl	80074ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800707e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6999      	ldr	r1, [r3, #24]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	021a      	lsls	r2, r3, #8
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	619a      	str	r2, [r3, #24]
      break;
 80070a4:	e043      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fa89 	bl	80075c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0208 	orr.w	r2, r2, #8
 80070c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0204 	bic.w	r2, r2, #4
 80070d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69d9      	ldr	r1, [r3, #28]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	61da      	str	r2, [r3, #28]
      break;
 80070e4:	e023      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fad3 	bl	8007698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69d9      	ldr	r1, [r3, #28]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	021a      	lsls	r2, r3, #8
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	61da      	str	r2, [r3, #28]
      break;
 8007126:	e002      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
      break;
 800712c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_TIM_ConfigClockSource+0x1c>
 8007158:	2302      	movs	r3, #2
 800715a:	e0b4      	b.n	80072c6 <HAL_TIM_ConfigClockSource+0x186>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800717a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007194:	d03e      	beq.n	8007214 <HAL_TIM_ConfigClockSource+0xd4>
 8007196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800719a:	f200 8087 	bhi.w	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 800719e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a2:	f000 8086 	beq.w	80072b2 <HAL_TIM_ConfigClockSource+0x172>
 80071a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071aa:	d87f      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071ac:	2b70      	cmp	r3, #112	; 0x70
 80071ae:	d01a      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0xa6>
 80071b0:	2b70      	cmp	r3, #112	; 0x70
 80071b2:	d87b      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071b4:	2b60      	cmp	r3, #96	; 0x60
 80071b6:	d050      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x11a>
 80071b8:	2b60      	cmp	r3, #96	; 0x60
 80071ba:	d877      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071bc:	2b50      	cmp	r3, #80	; 0x50
 80071be:	d03c      	beq.n	800723a <HAL_TIM_ConfigClockSource+0xfa>
 80071c0:	2b50      	cmp	r3, #80	; 0x50
 80071c2:	d873      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d058      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x13a>
 80071c8:	2b40      	cmp	r3, #64	; 0x40
 80071ca:	d86f      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071cc:	2b30      	cmp	r3, #48	; 0x30
 80071ce:	d064      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071d0:	2b30      	cmp	r3, #48	; 0x30
 80071d2:	d86b      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d060      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d867      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d05c      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d05a      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071e4:	e062      	b.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	6899      	ldr	r1, [r3, #8]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f000 fb19 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	609a      	str	r2, [r3, #8]
      break;
 8007212:	e04f      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	6899      	ldr	r1, [r3, #8]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f000 fb02 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007236:	609a      	str	r2, [r3, #8]
      break;
 8007238:	e03c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	461a      	mov	r2, r3
 8007248:	f000 fa76 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2150      	movs	r1, #80	; 0x50
 8007252:	4618      	mov	r0, r3
 8007254:	f000 facf 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8007258:	e02c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	6859      	ldr	r1, [r3, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	461a      	mov	r2, r3
 8007268:	f000 fa95 	bl	8007796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2160      	movs	r1, #96	; 0x60
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fabf 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8007278:	e01c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6859      	ldr	r1, [r3, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	461a      	mov	r2, r3
 8007288:	f000 fa56 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2140      	movs	r1, #64	; 0x40
 8007292:	4618      	mov	r0, r3
 8007294:	f000 faaf 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8007298:	e00c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f000 faa6 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80072aa:	e003      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
      break;
 80072b0:	e000      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a34      	ldr	r2, [pc, #208]	; (8007404 <TIM_Base_SetConfig+0xe4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00f      	beq.n	8007358 <TIM_Base_SetConfig+0x38>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733e:	d00b      	beq.n	8007358 <TIM_Base_SetConfig+0x38>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a31      	ldr	r2, [pc, #196]	; (8007408 <TIM_Base_SetConfig+0xe8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d007      	beq.n	8007358 <TIM_Base_SetConfig+0x38>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a30      	ldr	r2, [pc, #192]	; (800740c <TIM_Base_SetConfig+0xec>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_Base_SetConfig+0x38>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a2f      	ldr	r2, [pc, #188]	; (8007410 <TIM_Base_SetConfig+0xf0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d108      	bne.n	800736a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a25      	ldr	r2, [pc, #148]	; (8007404 <TIM_Base_SetConfig+0xe4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d01b      	beq.n	80073aa <TIM_Base_SetConfig+0x8a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007378:	d017      	beq.n	80073aa <TIM_Base_SetConfig+0x8a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a22      	ldr	r2, [pc, #136]	; (8007408 <TIM_Base_SetConfig+0xe8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <TIM_Base_SetConfig+0x8a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a21      	ldr	r2, [pc, #132]	; (800740c <TIM_Base_SetConfig+0xec>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00f      	beq.n	80073aa <TIM_Base_SetConfig+0x8a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a20      	ldr	r2, [pc, #128]	; (8007410 <TIM_Base_SetConfig+0xf0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00b      	beq.n	80073aa <TIM_Base_SetConfig+0x8a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1f      	ldr	r2, [pc, #124]	; (8007414 <TIM_Base_SetConfig+0xf4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d007      	beq.n	80073aa <TIM_Base_SetConfig+0x8a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1e      	ldr	r2, [pc, #120]	; (8007418 <TIM_Base_SetConfig+0xf8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d003      	beq.n	80073aa <TIM_Base_SetConfig+0x8a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1d      	ldr	r2, [pc, #116]	; (800741c <TIM_Base_SetConfig+0xfc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d108      	bne.n	80073bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a08      	ldr	r2, [pc, #32]	; (8007404 <TIM_Base_SetConfig+0xe4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d103      	bne.n	80073f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	615a      	str	r2, [r3, #20]
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40010000 	.word	0x40010000
 8007408:	40000400 	.word	0x40000400
 800740c:	40000800 	.word	0x40000800
 8007410:	40000c00 	.word	0x40000c00
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 0302 	bic.w	r3, r3, #2
 8007468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a1c      	ldr	r2, [pc, #112]	; (80074e8 <TIM_OC1_SetConfig+0xc8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d10c      	bne.n	8007496 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f023 0308 	bic.w	r3, r3, #8
 8007482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 0304 	bic.w	r3, r3, #4
 8007494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <TIM_OC1_SetConfig+0xc8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d111      	bne.n	80074c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	621a      	str	r2, [r3, #32]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	40010000 	.word	0x40010000

080074ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f023 0210 	bic.w	r2, r3, #16
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	021b      	lsls	r3, r3, #8
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0320 	bic.w	r3, r3, #32
 8007536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <TIM_OC2_SetConfig+0xd4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10d      	bne.n	8007568 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <TIM_OC2_SetConfig+0xd4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d113      	bne.n	8007598 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800757e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000

080075c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0303 	bic.w	r3, r3, #3
 80075fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800760c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <TIM_OC3_SetConfig+0xd0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d10d      	bne.n	800763e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800763c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a14      	ldr	r2, [pc, #80]	; (8007694 <TIM_OC3_SetConfig+0xd0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d113      	bne.n	800766e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800764c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	621a      	str	r2, [r3, #32]
}
 8007688:	bf00      	nop
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	40010000 	.word	0x40010000

08007698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	031b      	lsls	r3, r3, #12
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a10      	ldr	r2, [pc, #64]	; (8007734 <TIM_OC4_SetConfig+0x9c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d109      	bne.n	800770c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	019b      	lsls	r3, r3, #6
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40010000 	.word	0x40010000

08007738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 030a 	bic.w	r3, r3, #10
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0210 	bic.w	r2, r3, #16
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	f043 0307 	orr.w	r3, r3, #7
 8007818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	431a      	orrs	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2201      	movs	r2, #1
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	fa01 f303 	lsl.w	r3, r1, r3
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e050      	b.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1c      	ldr	r2, [pc, #112]	; (8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d013      	beq.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a18      	ldr	r2, [pc, #96]	; (8007984 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00e      	beq.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a16      	ldr	r2, [pc, #88]	; (8007988 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d009      	beq.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a15      	ldr	r2, [pc, #84]	; (800798c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d004      	beq.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a13      	ldr	r2, [pc, #76]	; (8007990 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d10c      	bne.n	8007960 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800794c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	4313      	orrs	r3, r2
 8007956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40010000 	.word	0x40010000
 8007984:	40000400 	.word	0x40000400
 8007988:	40000800 	.word	0x40000800
 800798c:	40000c00 	.word	0x40000c00
 8007990:	40014000 	.word	0x40014000

08007994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e03f      	b.n	8007a4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fa f9bc 	bl	8001d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2224      	movs	r2, #36	; 0x24
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fe45 	bl	8008690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695a      	ldr	r2, [r3, #20]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e021      	b.n	8007aac <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2224      	movs	r2, #36	; 0x24
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a7e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7fa f9bd 	bl	8001e00 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	; 0x28
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d17c      	bne.n	8007bce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_UART_Transmit+0x2c>
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e075      	b.n	8007bd0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d101      	bne.n	8007af2 <HAL_UART_Transmit+0x3e>
 8007aee:	2302      	movs	r3, #2
 8007af0:	e06e      	b.n	8007bd0 <HAL_UART_Transmit+0x11c>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2221      	movs	r2, #33	; 0x21
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b08:	f7fd f80c 	bl	8004b24 <HAL_GetTick>
 8007b0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	88fa      	ldrh	r2, [r7, #6]
 8007b12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b22:	d108      	bne.n	8007b36 <HAL_UART_Transmit+0x82>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	e003      	b.n	8007b3e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b46:	e02a      	b.n	8007b9e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2180      	movs	r1, #128	; 0x80
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fb5a 	bl	800820c <UART_WaitOnFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e036      	b.n	8007bd0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b76:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e007      	b.n	8007b90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	781a      	ldrb	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1cf      	bne.n	8007b48 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2140      	movs	r1, #64	; 0x40
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fb2a 	bl	800820c <UART_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e006      	b.n	8007bd0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e000      	b.n	8007bd0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007bce:	2302      	movs	r3, #2
  }
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3720      	adds	r7, #32
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d130      	bne.n	8007c54 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <HAL_UART_Transmit_IT+0x26>
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e029      	b.n	8007c56 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_UART_Transmit_IT+0x38>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e022      	b.n	8007c56 <HAL_UART_Transmit_IT+0x7e>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	88fa      	ldrh	r2, [r7, #6]
 8007c22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2221      	movs	r2, #33	; 0x21
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c4e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007c54:	2302      	movs	r3, #2
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	d11d      	bne.n	8007cb8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_UART_Receive_IT+0x26>
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e016      	b.n	8007cba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <HAL_UART_Receive_IT+0x38>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e00f      	b.n	8007cba <HAL_UART_Receive_IT+0x58>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	461a      	mov	r2, r3
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fb1a 	bl	80082e8 <UART_Start_Receive_IT>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	e000      	b.n	8007cba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cb8:	2302      	movs	r3, #2
  }
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b0ba      	sub	sp, #232	; 0xe8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10f      	bne.n	8007d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <HAL_UART_IRQHandler+0x66>
 8007d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fbf9 	bl	800851a <UART_Receive_IT>
      return;
 8007d28:	e256      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80de 	beq.w	8007ef0 <HAL_UART_IRQHandler+0x22c>
 8007d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 80d1 	beq.w	8007ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <HAL_UART_IRQHandler+0xae>
 8007d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	f043 0201 	orr.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <HAL_UART_IRQHandler+0xd2>
 8007d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	f043 0202 	orr.w	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <HAL_UART_IRQHandler+0xf6>
 8007da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f043 0204 	orr.w	r2, r3, #4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d011      	beq.n	8007dea <HAL_UART_IRQHandler+0x126>
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d105      	bne.n	8007dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f043 0208 	orr.w	r2, r3, #8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 81ed 	beq.w	80081ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <HAL_UART_IRQHandler+0x14e>
 8007e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e04:	f003 0320 	and.w	r3, r3, #32
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fb84 	bl	800851a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	bf0c      	ite	eq
 8007e20:	2301      	moveq	r3, #1
 8007e22:	2300      	movne	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <HAL_UART_IRQHandler+0x17a>
 8007e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d04f      	beq.n	8007ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa8c 	bl	800835c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b40      	cmp	r3, #64	; 0x40
 8007e50:	d141      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3314      	adds	r3, #20
 8007e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1d9      	bne.n	8007e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d013      	beq.n	8007ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	4a7d      	ldr	r2, [pc, #500]	; (80080a0 <HAL_UART_IRQHandler+0x3dc>)
 8007eac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fd fa4c 	bl	8005350 <HAL_DMA_Abort_IT>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ecc:	e00e      	b.n	8007eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f002 febe 	bl	800ac50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed4:	e00a      	b.n	8007eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f002 feba 	bl	800ac50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007edc:	e006      	b.n	8007eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f002 feb6 	bl	800ac50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007eea:	e170      	b.n	80081ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eec:	bf00      	nop
    return;
 8007eee:	e16e      	b.n	80081ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	f040 814a 	bne.w	800818e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0310 	and.w	r3, r3, #16
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8143 	beq.w	800818e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 813c 	beq.w	800818e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f16:	2300      	movs	r3, #0
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	f040 80b4 	bne.w	80080a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8140 	beq.w	80081d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	f080 8139 	bcs.w	80081d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f72:	f000 8088 	beq.w	8008086 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1d9      	bne.n	8007f76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3314      	adds	r3, #20
 8007fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3314      	adds	r3, #20
 8007fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e1      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3314      	adds	r3, #20
 8008004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800800e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3314      	adds	r3, #20
 800801e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e3      	bne.n	8007ffe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008056:	f023 0310 	bic.w	r3, r3, #16
 800805a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008068:	65ba      	str	r2, [r7, #88]	; 0x58
 800806a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800806e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e3      	bne.n	8008044 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	4618      	mov	r0, r3
 8008082:	f7fd f8f5 	bl	8005270 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800808e:	b29b      	uxth	r3, r3
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	b29b      	uxth	r3, r3
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8ac 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800809c:	e099      	b.n	80081d2 <HAL_UART_IRQHandler+0x50e>
 800809e:	bf00      	nop
 80080a0:	08008423 	.word	0x08008423
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 808b 	beq.w	80081d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8086 	beq.w	80081d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080ee:	647a      	str	r2, [r7, #68]	; 0x44
 80080f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e3      	bne.n	80080ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3314      	adds	r3, #20
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	623b      	str	r3, [r7, #32]
   return(result);
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3314      	adds	r3, #20
 8008122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008126:	633a      	str	r2, [r7, #48]	; 0x30
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800812c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e3      	bne.n	8008102 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	60fb      	str	r3, [r7, #12]
   return(result);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0310 	bic.w	r3, r3, #16
 800815e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800816c:	61fa      	str	r2, [r7, #28]
 800816e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	69b9      	ldr	r1, [r7, #24]
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	617b      	str	r3, [r7, #20]
   return(result);
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e3      	bne.n	8008148 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f834 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800818c:	e023      	b.n	80081d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <HAL_UART_IRQHandler+0x4ea>
 800819a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f94f 	bl	800844a <UART_Transmit_IT>
    return;
 80081ac:	e014      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00e      	beq.n	80081d8 <HAL_UART_IRQHandler+0x514>
 80081ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f98f 	bl	80084ea <UART_EndTransmit_IT>
    return;
 80081cc:	e004      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
    return;
 80081ce:	bf00      	nop
 80081d0:	e002      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
      return;
 80081d2:	bf00      	nop
 80081d4:	e000      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
      return;
 80081d6:	bf00      	nop
  }
}
 80081d8:	37e8      	adds	r7, #232	; 0xe8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop

080081e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b090      	sub	sp, #64	; 0x40
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	4613      	mov	r3, r2
 800821a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800821c:	e050      	b.n	80082c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800821e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008224:	d04c      	beq.n	80082c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <UART_WaitOnFlagUntilTimeout+0x30>
 800822c:	f7fc fc7a 	bl	8004b24 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008238:	429a      	cmp	r2, r3
 800823a:	d241      	bcs.n	80082c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	330c      	adds	r3, #12
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	e853 3f00 	ldrex	r3, [r3]
 800824a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	330c      	adds	r3, #12
 800825a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800825c:	637a      	str	r2, [r7, #52]	; 0x34
 800825e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e5      	bne.n	800823c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3314      	adds	r3, #20
 8008276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	613b      	str	r3, [r7, #16]
   return(result);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f023 0301 	bic.w	r3, r3, #1
 8008286:	63bb      	str	r3, [r7, #56]	; 0x38
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3314      	adds	r3, #20
 800828e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008290:	623a      	str	r2, [r7, #32]
 8008292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	69f9      	ldr	r1, [r7, #28]
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	61bb      	str	r3, [r7, #24]
   return(result);
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e5      	bne.n	8008270 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e00f      	b.n	80082e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	4013      	ands	r3, r2
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	461a      	mov	r2, r3
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d09f      	beq.n	800821e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3740      	adds	r7, #64	; 0x40
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	88fa      	ldrh	r2, [r7, #6]
 8008306:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2222      	movs	r2, #34	; 0x22
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800832c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0201 	orr.w	r2, r2, #1
 800833c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0220 	orr.w	r2, r2, #32
 800834c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b095      	sub	sp, #84	; 0x54
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	330c      	adds	r3, #12
 800836a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800837a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	330c      	adds	r3, #12
 8008382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008384:	643a      	str	r2, [r7, #64]	; 0x40
 8008386:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800838a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e5      	bne.n	8008364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3314      	adds	r3, #20
 800839e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f023 0301 	bic.w	r3, r3, #1
 80083ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3314      	adds	r3, #20
 80083b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e5      	bne.n	8008398 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d119      	bne.n	8008408 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f023 0310 	bic.w	r3, r3, #16
 80083ea:	647b      	str	r3, [r7, #68]	; 0x44
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083f4:	61ba      	str	r2, [r7, #24]
 80083f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6979      	ldr	r1, [r7, #20]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	613b      	str	r3, [r7, #16]
   return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e5      	bne.n	80083d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008416:	bf00      	nop
 8008418:	3754      	adds	r7, #84	; 0x54
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f002 fc07 	bl	800ac50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b21      	cmp	r3, #33	; 0x21
 800845c:	d13e      	bne.n	80084dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008466:	d114      	bne.n	8008492 <UART_Transmit_IT+0x48>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d110      	bne.n	8008492 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008484:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	1c9a      	adds	r2, r3, #2
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	621a      	str	r2, [r3, #32]
 8008490:	e008      	b.n	80084a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	1c59      	adds	r1, r3, #1
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6211      	str	r1, [r2, #32]
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4619      	mov	r1, r3
 80084b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10f      	bne.n	80084d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	e000      	b.n	80084de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008500:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff fe68 	bl	80081e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b08c      	sub	sp, #48	; 0x30
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b22      	cmp	r3, #34	; 0x22
 800852c:	f040 80ab 	bne.w	8008686 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008538:	d117      	bne.n	800856a <UART_Receive_IT+0x50>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d113      	bne.n	800856a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	b29b      	uxth	r3, r3
 8008554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008558:	b29a      	uxth	r2, r3
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	629a      	str	r2, [r3, #40]	; 0x28
 8008568:	e026      	b.n	80085b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800857c:	d007      	beq.n	800858e <UART_Receive_IT+0x74>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <UART_Receive_IT+0x82>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	b2da      	uxtb	r2, r3
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	e008      	b.n	80085ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	4619      	mov	r1, r3
 80085c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d15a      	bne.n	8008682 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0220 	bic.w	r2, r2, #32
 80085da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695a      	ldr	r2, [r3, #20]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	2b01      	cmp	r3, #1
 800860a:	d135      	bne.n	8008678 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	613b      	str	r3, [r7, #16]
   return(result);
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f023 0310 	bic.w	r3, r3, #16
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	330c      	adds	r3, #12
 8008630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008632:	623a      	str	r2, [r7, #32]
 8008634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	69f9      	ldr	r1, [r7, #28]
 8008638:	6a3a      	ldr	r2, [r7, #32]
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e5      	bne.n	8008612 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b10      	cmp	r3, #16
 8008652:	d10a      	bne.n	800866a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff fdbf 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
 8008676:	e002      	b.n	800867e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f002 faa9 	bl	800abd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	e002      	b.n	8008688 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	e000      	b.n	8008688 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008686:	2302      	movs	r3, #2
  }
}
 8008688:	4618      	mov	r0, r3
 800868a:	3730      	adds	r7, #48	; 0x30
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	b09f      	sub	sp, #124	; 0x7c
 8008696:	af00      	add	r7, sp, #0
 8008698:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800869a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a6:	68d9      	ldr	r1, [r3, #12]
 80086a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	ea40 0301 	orr.w	r3, r0, r1
 80086b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	431a      	orrs	r2, r3
 80086bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	431a      	orrs	r2, r3
 80086c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80086ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80086d4:	f021 010c 	bic.w	r1, r1, #12
 80086d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086de:	430b      	orrs	r3, r1
 80086e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ee:	6999      	ldr	r1, [r3, #24]
 80086f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	ea40 0301 	orr.w	r3, r0, r1
 80086f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4bc5      	ldr	r3, [pc, #788]	; (8008a14 <UART_SetConfig+0x384>)
 8008700:	429a      	cmp	r2, r3
 8008702:	d004      	beq.n	800870e <UART_SetConfig+0x7e>
 8008704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	4bc3      	ldr	r3, [pc, #780]	; (8008a18 <UART_SetConfig+0x388>)
 800870a:	429a      	cmp	r2, r3
 800870c:	d103      	bne.n	8008716 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800870e:	f7fd fd5f 	bl	80061d0 <HAL_RCC_GetPCLK2Freq>
 8008712:	6778      	str	r0, [r7, #116]	; 0x74
 8008714:	e002      	b.n	800871c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008716:	f7fd fd47 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 800871a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800871c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008724:	f040 80b6 	bne.w	8008894 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800872a:	461c      	mov	r4, r3
 800872c:	f04f 0500 	mov.w	r5, #0
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	1891      	adds	r1, r2, r2
 8008736:	6439      	str	r1, [r7, #64]	; 0x40
 8008738:	415b      	adcs	r3, r3
 800873a:	647b      	str	r3, [r7, #68]	; 0x44
 800873c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008740:	1912      	adds	r2, r2, r4
 8008742:	eb45 0303 	adc.w	r3, r5, r3
 8008746:	f04f 0000 	mov.w	r0, #0
 800874a:	f04f 0100 	mov.w	r1, #0
 800874e:	00d9      	lsls	r1, r3, #3
 8008750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008754:	00d0      	lsls	r0, r2, #3
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	1911      	adds	r1, r2, r4
 800875c:	6639      	str	r1, [r7, #96]	; 0x60
 800875e:	416b      	adcs	r3, r5
 8008760:	667b      	str	r3, [r7, #100]	; 0x64
 8008762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	461a      	mov	r2, r3
 8008768:	f04f 0300 	mov.w	r3, #0
 800876c:	1891      	adds	r1, r2, r2
 800876e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008770:	415b      	adcs	r3, r3
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008778:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800877c:	f7f8 fb44 	bl	8000e08 <__aeabi_uldivmod>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4ba5      	ldr	r3, [pc, #660]	; (8008a1c <UART_SetConfig+0x38c>)
 8008786:	fba3 2302 	umull	r2, r3, r3, r2
 800878a:	095b      	lsrs	r3, r3, #5
 800878c:	011e      	lsls	r6, r3, #4
 800878e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008790:	461c      	mov	r4, r3
 8008792:	f04f 0500 	mov.w	r5, #0
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	1891      	adds	r1, r2, r2
 800879c:	6339      	str	r1, [r7, #48]	; 0x30
 800879e:	415b      	adcs	r3, r3
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
 80087a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087a6:	1912      	adds	r2, r2, r4
 80087a8:	eb45 0303 	adc.w	r3, r5, r3
 80087ac:	f04f 0000 	mov.w	r0, #0
 80087b0:	f04f 0100 	mov.w	r1, #0
 80087b4:	00d9      	lsls	r1, r3, #3
 80087b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087ba:	00d0      	lsls	r0, r2, #3
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	1911      	adds	r1, r2, r4
 80087c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80087c4:	416b      	adcs	r3, r5
 80087c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	461a      	mov	r2, r3
 80087ce:	f04f 0300 	mov.w	r3, #0
 80087d2:	1891      	adds	r1, r2, r2
 80087d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80087d6:	415b      	adcs	r3, r3
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80087e2:	f7f8 fb11 	bl	8000e08 <__aeabi_uldivmod>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4b8c      	ldr	r3, [pc, #560]	; (8008a1c <UART_SetConfig+0x38c>)
 80087ec:	fba3 1302 	umull	r1, r3, r3, r2
 80087f0:	095b      	lsrs	r3, r3, #5
 80087f2:	2164      	movs	r1, #100	; 0x64
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	3332      	adds	r3, #50	; 0x32
 80087fe:	4a87      	ldr	r2, [pc, #540]	; (8008a1c <UART_SetConfig+0x38c>)
 8008800:	fba2 2303 	umull	r2, r3, r2, r3
 8008804:	095b      	lsrs	r3, r3, #5
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800880c:	441e      	add	r6, r3
 800880e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008810:	4618      	mov	r0, r3
 8008812:	f04f 0100 	mov.w	r1, #0
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	1894      	adds	r4, r2, r2
 800881c:	623c      	str	r4, [r7, #32]
 800881e:	415b      	adcs	r3, r3
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
 8008822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008826:	1812      	adds	r2, r2, r0
 8008828:	eb41 0303 	adc.w	r3, r1, r3
 800882c:	f04f 0400 	mov.w	r4, #0
 8008830:	f04f 0500 	mov.w	r5, #0
 8008834:	00dd      	lsls	r5, r3, #3
 8008836:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800883a:	00d4      	lsls	r4, r2, #3
 800883c:	4622      	mov	r2, r4
 800883e:	462b      	mov	r3, r5
 8008840:	1814      	adds	r4, r2, r0
 8008842:	653c      	str	r4, [r7, #80]	; 0x50
 8008844:	414b      	adcs	r3, r1
 8008846:	657b      	str	r3, [r7, #84]	; 0x54
 8008848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	461a      	mov	r2, r3
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	1891      	adds	r1, r2, r2
 8008854:	61b9      	str	r1, [r7, #24]
 8008856:	415b      	adcs	r3, r3
 8008858:	61fb      	str	r3, [r7, #28]
 800885a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800885e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008862:	f7f8 fad1 	bl	8000e08 <__aeabi_uldivmod>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4b6c      	ldr	r3, [pc, #432]	; (8008a1c <UART_SetConfig+0x38c>)
 800886c:	fba3 1302 	umull	r1, r3, r3, r2
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	2164      	movs	r1, #100	; 0x64
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	3332      	adds	r3, #50	; 0x32
 800887e:	4a67      	ldr	r2, [pc, #412]	; (8008a1c <UART_SetConfig+0x38c>)
 8008880:	fba2 2303 	umull	r2, r3, r2, r3
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	f003 0207 	and.w	r2, r3, #7
 800888a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4432      	add	r2, r6
 8008890:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008892:	e0b9      	b.n	8008a08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008896:	461c      	mov	r4, r3
 8008898:	f04f 0500 	mov.w	r5, #0
 800889c:	4622      	mov	r2, r4
 800889e:	462b      	mov	r3, r5
 80088a0:	1891      	adds	r1, r2, r2
 80088a2:	6139      	str	r1, [r7, #16]
 80088a4:	415b      	adcs	r3, r3
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80088ac:	1912      	adds	r2, r2, r4
 80088ae:	eb45 0303 	adc.w	r3, r5, r3
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	00d9      	lsls	r1, r3, #3
 80088bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088c0:	00d0      	lsls	r0, r2, #3
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	eb12 0804 	adds.w	r8, r2, r4
 80088ca:	eb43 0905 	adc.w	r9, r3, r5
 80088ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	f04f 0300 	mov.w	r3, #0
 80088e0:	008b      	lsls	r3, r1, #2
 80088e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088e6:	0082      	lsls	r2, r0, #2
 80088e8:	4640      	mov	r0, r8
 80088ea:	4649      	mov	r1, r9
 80088ec:	f7f8 fa8c 	bl	8000e08 <__aeabi_uldivmod>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4b49      	ldr	r3, [pc, #292]	; (8008a1c <UART_SetConfig+0x38c>)
 80088f6:	fba3 2302 	umull	r2, r3, r3, r2
 80088fa:	095b      	lsrs	r3, r3, #5
 80088fc:	011e      	lsls	r6, r3, #4
 80088fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008900:	4618      	mov	r0, r3
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	1894      	adds	r4, r2, r2
 800890c:	60bc      	str	r4, [r7, #8]
 800890e:	415b      	adcs	r3, r3
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008916:	1812      	adds	r2, r2, r0
 8008918:	eb41 0303 	adc.w	r3, r1, r3
 800891c:	f04f 0400 	mov.w	r4, #0
 8008920:	f04f 0500 	mov.w	r5, #0
 8008924:	00dd      	lsls	r5, r3, #3
 8008926:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800892a:	00d4      	lsls	r4, r2, #3
 800892c:	4622      	mov	r2, r4
 800892e:	462b      	mov	r3, r5
 8008930:	1814      	adds	r4, r2, r0
 8008932:	64bc      	str	r4, [r7, #72]	; 0x48
 8008934:	414b      	adcs	r3, r1
 8008936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4618      	mov	r0, r3
 800893e:	f04f 0100 	mov.w	r1, #0
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	008b      	lsls	r3, r1, #2
 800894c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008950:	0082      	lsls	r2, r0, #2
 8008952:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008956:	f7f8 fa57 	bl	8000e08 <__aeabi_uldivmod>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4b2f      	ldr	r3, [pc, #188]	; (8008a1c <UART_SetConfig+0x38c>)
 8008960:	fba3 1302 	umull	r1, r3, r3, r2
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	2164      	movs	r1, #100	; 0x64
 8008968:	fb01 f303 	mul.w	r3, r1, r3
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	3332      	adds	r3, #50	; 0x32
 8008972:	4a2a      	ldr	r2, [pc, #168]	; (8008a1c <UART_SetConfig+0x38c>)
 8008974:	fba2 2303 	umull	r2, r3, r2, r3
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800897e:	441e      	add	r6, r3
 8008980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008982:	4618      	mov	r0, r3
 8008984:	f04f 0100 	mov.w	r1, #0
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	1894      	adds	r4, r2, r2
 800898e:	603c      	str	r4, [r7, #0]
 8008990:	415b      	adcs	r3, r3
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008998:	1812      	adds	r2, r2, r0
 800899a:	eb41 0303 	adc.w	r3, r1, r3
 800899e:	f04f 0400 	mov.w	r4, #0
 80089a2:	f04f 0500 	mov.w	r5, #0
 80089a6:	00dd      	lsls	r5, r3, #3
 80089a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089ac:	00d4      	lsls	r4, r2, #3
 80089ae:	4622      	mov	r2, r4
 80089b0:	462b      	mov	r3, r5
 80089b2:	eb12 0a00 	adds.w	sl, r2, r0
 80089b6:	eb43 0b01 	adc.w	fp, r3, r1
 80089ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	4618      	mov	r0, r3
 80089c0:	f04f 0100 	mov.w	r1, #0
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	008b      	lsls	r3, r1, #2
 80089ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089d2:	0082      	lsls	r2, r0, #2
 80089d4:	4650      	mov	r0, sl
 80089d6:	4659      	mov	r1, fp
 80089d8:	f7f8 fa16 	bl	8000e08 <__aeabi_uldivmod>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <UART_SetConfig+0x38c>)
 80089e2:	fba3 1302 	umull	r1, r3, r3, r2
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	2164      	movs	r1, #100	; 0x64
 80089ea:	fb01 f303 	mul.w	r3, r1, r3
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	3332      	adds	r3, #50	; 0x32
 80089f4:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <UART_SetConfig+0x38c>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f003 020f 	and.w	r2, r3, #15
 8008a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4432      	add	r2, r6
 8008a06:	609a      	str	r2, [r3, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	377c      	adds	r7, #124	; 0x7c
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	bf00      	nop
 8008a14:	40011000 	.word	0x40011000
 8008a18:	40011400 	.word	0x40011400
 8008a1c:	51eb851f 	.word	0x51eb851f

08008a20 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08e      	sub	sp, #56	; 0x38
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8008a2e:	2234      	movs	r2, #52	; 0x34
 8008a30:	2100      	movs	r1, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f002 fa20 	bl	800ae78 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f1a3 0208 	sub.w	r2, r3, #8
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	4413      	add	r3, r2
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	3b04      	subs	r3, #4
 8008a7e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	3b04      	subs	r3, #4
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aaa:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <_tx_byte_pool_create+0x11c>)
 8008abe:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aca:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8008acc:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8008ace:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ad0:	b672      	cpsid	i
#endif
    return(int_posture);
 8008ad2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <_tx_byte_pool_create+0x120>)
 8008ada:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008adc:	4b19      	ldr	r3, [pc, #100]	; (8008b44 <_tx_byte_pool_create+0x124>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d109      	bne.n	8008af8 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <_tx_byte_pool_create+0x128>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
 8008af6:	e011      	b.n	8008b1c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <_tx_byte_pool_create+0x128>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6a3a      	ldr	r2, [r7, #32]
 8008b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008b1c:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <_tx_byte_pool_create+0x124>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	4a08      	ldr	r2, [pc, #32]	; (8008b44 <_tx_byte_pool_create+0x124>)
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f383 8810 	msr	PRIMASK, r3
}
 8008b30:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3738      	adds	r7, #56	; 0x38
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	ffffeeee 	.word	0xffffeeee
 8008b40:	42595445 	.word	0x42595445
 8008b44:	20002a3c 	.word	0x20002a3c
 8008b48:	20002a20 	.word	0x20002a20

08008b4c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8008b50:	f000 fd6a 	bl	8009628 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8008b54:	f001 f972 	bl	8009e3c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8008b58:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <_tx_initialize_high_level+0x58>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <_tx_initialize_high_level+0x5c>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <_tx_initialize_high_level+0x60>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <_tx_initialize_high_level+0x64>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <_tx_initialize_high_level+0x68>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	4b10      	ldr	r3, [pc, #64]	; (8008bb8 <_tx_initialize_high_level+0x6c>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8008b7c:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <_tx_initialize_high_level+0x70>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <_tx_initialize_high_level+0x74>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8008b88:	4b0e      	ldr	r3, [pc, #56]	; (8008bc4 <_tx_initialize_high_level+0x78>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	; (8008bc8 <_tx_initialize_high_level+0x7c>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <_tx_initialize_high_level+0x80>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <_tx_initialize_high_level+0x84>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
#endif
}
 8008ba0:	bf00      	nop
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20002a1c 	.word	0x20002a1c
 8008ba8:	20002a2c 	.word	0x20002a2c
 8008bac:	20002a38 	.word	0x20002a38
 8008bb0:	20002a18 	.word	0x20002a18
 8008bb4:	20002a0c 	.word	0x20002a0c
 8008bb8:	20002a30 	.word	0x20002a30
 8008bbc:	20002a34 	.word	0x20002a34
 8008bc0:	20002a28 	.word	0x20002a28
 8008bc4:	20002a20 	.word	0x20002a20
 8008bc8:	20002a3c 	.word	0x20002a3c
 8008bcc:	20002a14 	.word	0x20002a14
 8008bd0:	20002a10 	.word	0x20002a10

08008bd4 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8008bd8:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <_tx_initialize_kernel_enter+0x48>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8008be0:	d00c      	beq.n	8008bfc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <_tx_initialize_kernel_enter+0x48>)
 8008be4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8008be8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8008bea:	f7f7 faf9 	bl	80001e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 8008bee:	f7ff ffad 	bl	8008b4c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8008bf2:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <_tx_initialize_kernel_enter+0x4c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	4a09      	ldr	r2, [pc, #36]	; (8008c20 <_tx_initialize_kernel_enter+0x4c>)
 8008bfa:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008bfc:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <_tx_initialize_kernel_enter+0x48>)
 8008bfe:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8008c02:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <_tx_initialize_kernel_enter+0x50>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f8 fa79 	bl	8001100 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8008c0e:	4b03      	ldr	r3, [pc, #12]	; (8008c1c <_tx_initialize_kernel_enter+0x48>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8008c14:	f7f7 fb24 	bl	8000260 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008c18:	bf00      	nop
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20000170 	.word	0x20000170
 8008c20:	20002ad8 	.word	0x20002ad8
 8008c24:	20002a24 	.word	0x20002a24

08008c28 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	; 0x38
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c32:	f3ef 8310 	mrs	r3, PRIMASK
 8008c36:	623b      	str	r3, [r7, #32]
    return(posture);
 8008c38:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008c3a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c3c:	b672      	cpsid	i
    return(int_posture);
 8008c3e:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c46:	4a37      	ldr	r2, [pc, #220]	; (8008d24 <_tx_queue_cleanup+0xfc>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d161      	bne.n	8008d10 <_tx_queue_cleanup+0xe8>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d15b      	bne.n	8008d10 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c5c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d055      	beq.n	8008d10 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a2f      	ldr	r2, [pc, #188]	; (8008d28 <_tx_queue_cleanup+0x100>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d150      	bne.n	8008d10 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d04c      	beq.n	8008d10 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */
    
                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	1e5a      	subs	r2, r3, #1
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	2200      	movs	r2, #0
 8008c96:	629a      	str	r2, [r3, #40]	; 0x28
 8008c98:	e013      	b.n	8008cc2 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008caa:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d102      	bne.n	8008cc2 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cc0:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	2b05      	cmp	r3, #5
 8008cc8:	d122      	bne.n	8008d10 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <_tx_queue_cleanup+0xb4>
                            {
            
                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	220b      	movs	r2, #11
 8008cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008cda:	e003      	b.n	8008ce4 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {
            
                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	220a      	movs	r2, #10
 8008ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008ce4:	4b11      	ldr	r3, [pc, #68]	; (8008d2c <_tx_queue_cleanup+0x104>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	4a10      	ldr	r2, [pc, #64]	; (8008d2c <_tx_queue_cleanup+0x104>)
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f383 8810 	msr	PRIMASK, r3
}
 8008cf8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fdd6 	bl	80098ac <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d00:	f3ef 8310 	mrs	r3, PRIMASK
 8008d04:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008d06:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008d08:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d0a:	b672      	cpsid	i
    return(int_posture);
 8008d0c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f383 8810 	msr	PRIMASK, r3
}
 8008d1a:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008d1c:	bf00      	nop
 8008d1e:	3738      	adds	r7, #56	; 0x38
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	08008c29 	.word	0x08008c29
 8008d28:	51554555 	.word	0x51554555
 8008d2c:	20002ad8 	.word	0x20002ad8

08008d30 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08c      	sub	sp, #48	; 0x30
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8008d3e:	2238      	movs	r2, #56	; 0x38
 8008d40:	2100      	movs	r1, #0
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f002 f898 	bl	800ae78 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	605a      	str	r2, [r3, #4]
    
    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	fb02 f303 	mul.w	r3, r2, r3
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of 
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8e:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d94:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d96:	f3ef 8310 	mrs	r3, PRIMASK
 8008d9a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008d9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008da0:	b672      	cpsid	i
    return(int_posture);
 8008da2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4a18      	ldr	r2, [pc, #96]	; (8008e0c <_tx_queue_create+0xdc>)
 8008daa:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8008dac:	4b18      	ldr	r3, [pc, #96]	; (8008e10 <_tx_queue_create+0xe0>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8008db4:	4a17      	ldr	r2, [pc, #92]	; (8008e14 <_tx_queue_create+0xe4>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8008dc6:	e011      	b.n	8008dec <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <_tx_queue_create+0xe4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a3a      	ldr	r2, [r7, #32]
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8008dec:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <_tx_queue_create+0xe0>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	4a07      	ldr	r2, [pc, #28]	; (8008e10 <_tx_queue_create+0xe0>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f383 8810 	msr	PRIMASK, r3
}
 8008e00:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3730      	adds	r7, #48	; 0x30
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	51554555 	.word	0x51554555
 8008e10:	20002a18 	.word	0x20002a18
 8008e14:	20002a38 	.word	0x20002a38

08008e18 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b096      	sub	sp, #88	; 0x58
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8008e24:	2300      	movs	r3, #0
 8008e26:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e28:	f3ef 8310 	mrs	r3, PRIMASK
 8008e2c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e32:	b672      	cpsid	i
    return(int_posture);
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8008e36:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8136 	beq.w	80090b4 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8008e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d13c      	bne.n	8008ec8 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */
            
            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008e5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e60:	1d13      	adds	r3, r2, #4
 8008e62:	657b      	str	r3, [r7, #84]	; 0x54
 8008e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e66:	1d19      	adds	r1, r3, #4
 8008e68:	6539      	str	r1, [r7, #80]	; 0x50
 8008e6a:	6812      	ldr	r2, [r2, #0]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d90e      	bls.n	8008e92 <_tx_queue_receive+0x7a>
 8008e74:	e007      	b.n	8008e86 <_tx_queue_receive+0x6e>
 8008e76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e78:	1d13      	adds	r3, r2, #4
 8008e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e7e:	1d19      	adds	r1, r3, #4
 8008e80:	6539      	str	r1, [r7, #80]	; 0x50
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f1      	bne.n	8008e76 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d102      	bne.n	8008ea2 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	657b      	str	r3, [r7, #84]	; 0x54
            }
        
            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ea6:	621a      	str	r2, [r3, #32]
        
            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	1e5a      	subs	r2, r3, #1
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	611a      	str	r2, [r3, #16]
 8008ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f383 8810 	msr	PRIMASK, r3
}
 8008ec6:	e163      	b.n	8009190 <_tx_queue_receive+0x378>
        {
        
            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */
    
            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8008ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d153      	bne.n	8008f80 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008edc:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008eea:	1d13      	adds	r3, r2, #4
 8008eec:	657b      	str	r3, [r7, #84]	; 0x54
 8008eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef0:	1d19      	adds	r1, r3, #4
 8008ef2:	6539      	str	r1, [r7, #80]	; 0x50
 8008ef4:	6812      	ldr	r2, [r2, #0]
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d90e      	bls.n	8008f1c <_tx_queue_receive+0x104>
 8008efe:	e007      	b.n	8008f10 <_tx_queue_receive+0xf8>
 8008f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f02:	1d13      	adds	r3, r2, #4
 8008f04:	657b      	str	r3, [r7, #84]	; 0x54
 8008f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f08:	1d19      	adds	r1, r3, #4
 8008f0a:	6539      	str	r1, [r7, #80]	; 0x50
 8008f0c:	6812      	ldr	r2, [r2, #0]
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f12:	3b01      	subs	r3, #1
 8008f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1f1      	bne.n	8008f00 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 8008f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d103      	bne.n	8008f30 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	629a      	str	r2, [r3, #40]	; 0x28
 8008f2e:	e00e      	b.n	8008f4e <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8008f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f34:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f3a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f46:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8008f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f4c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f52:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f56:	2200      	movs	r2, #0
 8008f58:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008f62:	4b8e      	ldr	r3, [pc, #568]	; (800919c <_tx_queue_receive+0x384>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	4a8c      	ldr	r2, [pc, #560]	; (800919c <_tx_queue_receive+0x384>)
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	f383 8810 	msr	PRIMASK, r3
}
 8008f76:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8008f78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f7a:	f000 fc97 	bl	80098ac <_tx_thread_system_resume>
 8008f7e:	e107      	b.n	8009190 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there 
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f92:	1d13      	adds	r3, r2, #4
 8008f94:	657b      	str	r3, [r7, #84]	; 0x54
 8008f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f98:	1d19      	adds	r1, r3, #4
 8008f9a:	6539      	str	r1, [r7, #80]	; 0x50
 8008f9c:	6812      	ldr	r2, [r2, #0]
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d90e      	bls.n	8008fc4 <_tx_queue_receive+0x1ac>
 8008fa6:	e007      	b.n	8008fb8 <_tx_queue_receive+0x1a0>
 8008fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008faa:	1d13      	adds	r3, r2, #4
 8008fac:	657b      	str	r3, [r7, #84]	; 0x54
 8008fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fb0:	1d19      	adds	r1, r3, #4
 8008fb2:	6539      	str	r1, [r7, #80]	; 0x50
 8008fb4:	6812      	ldr	r2, [r2, #0]
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1f1      	bne.n	8008fa8 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d102      	bne.n	8008fd4 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fd8:	621a      	str	r2, [r3, #32]
  
                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8008fda:	4b70      	ldr	r3, [pc, #448]	; (800919c <_tx_queue_receive+0x384>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	4a6e      	ldr	r2, [pc, #440]	; (800919c <_tx_queue_receive+0x384>)
 8008fe2:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8008fe4:	4b6d      	ldr	r3, [pc, #436]	; (800919c <_tx_queue_receive+0x384>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	4a6c      	ldr	r2, [pc, #432]	; (800919c <_tx_queue_receive+0x384>)
 8008fec:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8008fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff2:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009002:	1d13      	adds	r3, r2, #4
 8009004:	657b      	str	r3, [r7, #84]	; 0x54
 8009006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009008:	1d19      	adds	r1, r3, #4
 800900a:	6539      	str	r1, [r7, #80]	; 0x50
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009012:	2b01      	cmp	r3, #1
 8009014:	d90e      	bls.n	8009034 <_tx_queue_receive+0x21c>
 8009016:	e007      	b.n	8009028 <_tx_queue_receive+0x210>
 8009018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800901a:	1d13      	adds	r3, r2, #4
 800901c:	657b      	str	r3, [r7, #84]	; 0x54
 800901e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009020:	1d19      	adds	r1, r3, #4
 8009022:	6539      	str	r1, [r7, #80]	; 0x50
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	3b01      	subs	r3, #1
 800902c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800902e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1f1      	bne.n	8009018 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800903a:	429a      	cmp	r2, r3
 800903c:	d102      	bne.n	8009044 <_tx_queue_receive+0x22c>
                {
            
                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009048:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 8009050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009052:	3b01      	subs	r3, #1
 8009054:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	629a      	str	r2, [r3, #40]	; 0x28
 8009062:	e00e      	b.n	8009082 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009068:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800906e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009074:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800907a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800907c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009080:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009086:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908a:	2200      	movs	r2, #0
 800908c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800908e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8009096:	4b41      	ldr	r3, [pc, #260]	; (800919c <_tx_queue_receive+0x384>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3301      	adds	r3, #1
 800909c:	4a3f      	ldr	r2, [pc, #252]	; (800919c <_tx_queue_receive+0x384>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	f383 8810 	msr	PRIMASK, r3
}
 80090aa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80090ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090ae:	f000 fbfd 	bl	80098ac <_tx_thread_system_resume>
 80090b2:	e06d      	b.n	8009190 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d062      	beq.n	8009180 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80090ba:	4b38      	ldr	r3, [pc, #224]	; (800919c <_tx_queue_receive+0x384>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <_tx_queue_receive+0x2bc>
 80090c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f383 8810 	msr	PRIMASK, r3
}
 80090cc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
           
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 80090ce:	230a      	movs	r3, #10
 80090d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090d2:	e05d      	b.n	8009190 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80090d4:	4b32      	ldr	r3, [pc, #200]	; (80091a0 <_tx_queue_receive+0x388>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80090da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090dc:	4a31      	ldr	r2, [pc, #196]	; (80091a4 <_tx_queue_receive+0x38c>)
 80090de:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80090e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 80090e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80090ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80090f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8009102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	d109      	bne.n	800911c <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800910c:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800910e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009112:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009118:	675a      	str	r2, [r3, #116]	; 0x74
 800911a:	e011      	b.n	8009140 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009120:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009126:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800912e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009132:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009138:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800913e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8009140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914a:	2205      	movs	r2, #5
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800914e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009150:	2201      	movs	r2, #1
 8009152:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <_tx_queue_receive+0x384>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3301      	adds	r3, #1
 8009160:	4a0e      	ldr	r2, [pc, #56]	; (800919c <_tx_queue_receive+0x384>)
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009166:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	f383 8810 	msr	PRIMASK, r3
}
 800916e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009170:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009172:	f000 fc9b 	bl	8009aac <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800917c:	64bb      	str	r3, [r7, #72]	; 0x48
 800917e:	e007      	b.n	8009190 <_tx_queue_receive+0x378>
 8009180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009182:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f383 8810 	msr	PRIMASK, r3
}
 800918a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
           
        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800918c:	230a      	movs	r3, #10
 800918e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8009190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009192:	4618      	mov	r0, r3
 8009194:	3758      	adds	r7, #88	; 0x58
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20002ad8 	.word	0x20002ad8
 80091a0:	20002adc 	.word	0x20002adc
 80091a4:	08008c29 	.word	0x08008c29

080091a8 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b094      	sub	sp, #80	; 0x50
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80091b4:	2300      	movs	r3, #0
 80091b6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091b8:	f3ef 8310 	mrs	r3, PRIMASK
 80091bc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80091c2:	b672      	cpsid	i
    return(int_posture);
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 809b 	beq.w	800930e <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d13c      	bne.n	8009258 <_tx_queue_send+0xb0>
        {
        
            /* No suspended threads, simply place the message in the queue.  */
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	1e5a      	subs	r2, r3, #1
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009204:	1d13      	adds	r3, r2, #4
 8009206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800920a:	1d19      	adds	r1, r3, #4
 800920c:	64b9      	str	r1, [r7, #72]	; 0x48
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009214:	2b01      	cmp	r3, #1
 8009216:	d90e      	bls.n	8009236 <_tx_queue_send+0x8e>
 8009218:	e007      	b.n	800922a <_tx_queue_send+0x82>
 800921a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800921c:	1d13      	adds	r3, r2, #4
 800921e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009222:	1d19      	adds	r1, r3, #4
 8009224:	64b9      	str	r1, [r7, #72]	; 0x48
 8009226:	6812      	ldr	r2, [r2, #0]
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922c:	3b01      	subs	r3, #1
 800922e:	647b      	str	r3, [r7, #68]	; 0x44
 8009230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1f1      	bne.n	800921a <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800923c:	429a      	cmp	r2, r3
 800923e:	d102      	bne.n	8009246 <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800924a:	625a      	str	r2, [r3, #36]	; 0x24
 800924c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	f383 8810 	msr	PRIMASK, r3
}
 8009256:	e0c8      	b.n	80093ea <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply 
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800925e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009260:	3b01      	subs	r3, #1
 8009262:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	629a      	str	r2, [r3, #40]	; 0x28
 8009270:	e012      	b.n	8009298 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800927a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009284:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928a:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009290:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009296:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800929c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a0:	2200      	movs	r2, #0
 80092a2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80092a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ac:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80092b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092b6:	1d13      	adds	r3, r2, #4
 80092b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092bc:	1d19      	adds	r1, r3, #4
 80092be:	64b9      	str	r1, [r7, #72]	; 0x48
 80092c0:	6812      	ldr	r2, [r2, #0]
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d90e      	bls.n	80092e8 <_tx_queue_send+0x140>
 80092ca:	e007      	b.n	80092dc <_tx_queue_send+0x134>
 80092cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092ce:	1d13      	adds	r3, r2, #4
 80092d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d4:	1d19      	adds	r1, r3, #4
 80092d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092d8:	6812      	ldr	r2, [r2, #0]
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092de:	3b01      	subs	r3, #1
 80092e0:	647b      	str	r3, [r7, #68]	; 0x44
 80092e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1f1      	bne.n	80092cc <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80092e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80092f0:	4b40      	ldr	r3, [pc, #256]	; (80093f4 <_tx_queue_send+0x24c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	4a3f      	ldr	r2, [pc, #252]	; (80093f4 <_tx_queue_send+0x24c>)
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	f383 8810 	msr	PRIMASK, r3
}
 8009304:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8009306:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009308:	f000 fad0 	bl	80098ac <_tx_thread_system_resume>
 800930c:	e06d      	b.n	80093ea <_tx_queue_send+0x242>
#endif
        }
    }
    
    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d062      	beq.n	80093da <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009314:	4b37      	ldr	r3, [pc, #220]	; (80093f4 <_tx_queue_send+0x24c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d008      	beq.n	800932e <_tx_queue_send+0x186>
 800931c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	f383 8810 	msr	PRIMASK, r3
}
 8009326:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8009328:	230b      	movs	r3, #11
 800932a:	643b      	str	r3, [r7, #64]	; 0x40
 800932c:	e05d      	b.n	80093ea <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800932e:	4b32      	ldr	r3, [pc, #200]	; (80093f8 <_tx_queue_send+0x250>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	4a31      	ldr	r2, [pc, #196]	; (80093fc <_tx_queue_send+0x254>)
 8009338:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800934e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009350:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	2b00      	cmp	r3, #0
 8009360:	d109      	bne.n	8009376 <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009366:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800936c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009372:	675a      	str	r2, [r3, #116]	; 0x74
 8009374:	e011      	b.n	800939a <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009380:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009386:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938c:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009392:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009398:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80093a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a4:	2205      	movs	r2, #5
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80093a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093aa:	2201      	movs	r2, #1
 80093ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80093ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80093b4:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <_tx_queue_send+0x24c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4a0e      	ldr	r2, [pc, #56]	; (80093f4 <_tx_queue_send+0x24c>)
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f383 8810 	msr	PRIMASK, r3
}
 80093c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80093ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093cc:	f000 fb6e 	bl	8009aac <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80093d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d6:	643b      	str	r3, [r7, #64]	; 0x40
 80093d8:	e007      	b.n	80093ea <_tx_queue_send+0x242>
 80093da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f383 8810 	msr	PRIMASK, r3
}
 80093e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 80093e6:	230b      	movs	r3, #11
 80093e8:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 80093ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3750      	adds	r7, #80	; 0x50
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20002ad8 	.word	0x20002ad8
 80093f8:	20002adc 	.word	0x20002adc
 80093fc:	08008c29 	.word	0x08008c29

08009400 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b092      	sub	sp, #72	; 0x48
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800940e:	2300      	movs	r3, #0
 8009410:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8009412:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009414:	21ef      	movs	r1, #239	; 0xef
 8009416:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009418:	f001 fd2e 	bl	800ae78 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800941c:	22b0      	movs	r2, #176	; 0xb0
 800941e:	2100      	movs	r1, #0
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f001 fd29 	bl	800ae78 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800943c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009442:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009448:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800944e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009456:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800945c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2220      	movs	r2, #32
 8009462:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8009466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009468:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800946a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800946c:	3b01      	subs	r3, #1
 800946e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009470:	4413      	add	r3, r2
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009478:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800947a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800947c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800947e:	429a      	cmp	r2, r3
 8009480:	d007      	beq.n	8009492 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009490:	e006      	b.n	80094a0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009496:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800949c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2203      	movs	r2, #3
 80094a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4a48      	ldr	r2, [pc, #288]	; (80095cc <_tx_thread_create+0x1cc>)
 80094aa:	655a      	str	r2, [r3, #84]	; 0x54
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80094b2:	4947      	ldr	r1, [pc, #284]	; (80095d0 <_tx_thread_create+0x1d0>)
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7f6 ff33 	bl	8000320 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094ba:	f3ef 8310 	mrs	r3, PRIMASK
 80094be:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80094c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80094c2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80094c4:	b672      	cpsid	i
    return(int_posture);
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4a41      	ldr	r2, [pc, #260]	; (80095d4 <_tx_thread_create+0x1d4>)
 80094ce:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80094d0:	4b41      	ldr	r3, [pc, #260]	; (80095d8 <_tx_thread_create+0x1d8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10b      	bne.n	80094f0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80094d8:	4a40      	ldr	r2, [pc, #256]	; (80095dc <_tx_thread_create+0x1dc>)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80094ee:	e016      	b.n	800951e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80094f0:	4b3a      	ldr	r3, [pc, #232]	; (80095dc <_tx_thread_create+0x1dc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800951a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800951e:	4b2e      	ldr	r3, [pc, #184]	; (80095d8 <_tx_thread_create+0x1d8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	4a2c      	ldr	r2, [pc, #176]	; (80095d8 <_tx_thread_create+0x1d8>)
 8009526:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009528:	4b2d      	ldr	r3, [pc, #180]	; (80095e0 <_tx_thread_create+0x1e0>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	4a2c      	ldr	r2, [pc, #176]	; (80095e0 <_tx_thread_create+0x1e0>)
 8009530:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8009532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009534:	2b01      	cmp	r3, #1
 8009536:	d129      	bne.n	800958c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009538:	f3ef 8305 	mrs	r3, IPSR
 800953c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800953e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8009540:	4b28      	ldr	r3, [pc, #160]	; (80095e4 <_tx_thread_create+0x1e4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4313      	orrs	r3, r2
 8009546:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800954a:	d30d      	bcc.n	8009568 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800954c:	4b26      	ldr	r3, [pc, #152]	; (80095e8 <_tx_thread_create+0x1e8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8009552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <_tx_thread_create+0x16c>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800955a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800955e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009564:	63da      	str	r2, [r3, #60]	; 0x3c
 8009566:	e001      	b.n	800956c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	647b      	str	r3, [r7, #68]	; 0x44
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	f383 8810 	msr	PRIMASK, r3
}
 8009576:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f997 	bl	80098ac <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800957e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01e      	beq.n	80095c2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8009584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009588:	63da      	str	r2, [r3, #60]	; 0x3c
 800958a:	e01a      	b.n	80095c2 <_tx_thread_create+0x1c2>
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f383 8810 	msr	PRIMASK, r3
}
 8009596:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009598:	f3ef 8310 	mrs	r3, PRIMASK
 800959c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800959e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80095a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095a2:	b672      	cpsid	i
    return(int_posture);
 80095a4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80095a6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80095a8:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <_tx_thread_create+0x1e0>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4a0c      	ldr	r2, [pc, #48]	; (80095e0 <_tx_thread_create+0x1e0>)
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f383 8810 	msr	PRIMASK, r3
}
 80095bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80095be:	f000 f93b 	bl	8009838 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3748      	adds	r7, #72	; 0x48
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	08009d81 	.word	0x08009d81
 80095d0:	080096a1 	.word	0x080096a1
 80095d4:	54485244 	.word	0x54485244
 80095d8:	20002ad0 	.word	0x20002ad0
 80095dc:	20002ac8 	.word	0x20002ac8
 80095e0:	20002ad8 	.word	0x20002ad8
 80095e4:	20000170 	.word	0x20000170
 80095e8:	20002ae0 	.word	0x20002ae0

080095ec <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095f2:	f3ef 8310 	mrs	r3, PRIMASK
 80095f6:	60bb      	str	r3, [r7, #8]
    return(posture);
 80095f8:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80095fa:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095fc:	b672      	cpsid	i
    return(int_posture);
 80095fe:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8009600:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <_tx_thread_identify+0x38>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f383 8810 	msr	PRIMASK, r3
}
 8009612:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8009614:	693b      	ldr	r3, [r7, #16]
}
 8009616:	4618      	mov	r0, r3
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20002adc 	.word	0x20002adc

08009628 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800962c:	4b12      	ldr	r3, [pc, #72]	; (8009678 <_tx_thread_initialize+0x50>)
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8009632:	4b12      	ldr	r3, [pc, #72]	; (800967c <_tx_thread_initialize+0x54>)
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <_tx_thread_initialize+0x58>)
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800963e:	4b11      	ldr	r3, [pc, #68]	; (8009684 <_tx_thread_initialize+0x5c>)
 8009640:	2220      	movs	r2, #32
 8009642:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8009644:	2280      	movs	r2, #128	; 0x80
 8009646:	2100      	movs	r1, #0
 8009648:	480f      	ldr	r0, [pc, #60]	; (8009688 <_tx_thread_initialize+0x60>)
 800964a:	f001 fc15 	bl	800ae78 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <_tx_thread_initialize+0x64>)
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8009654:	4b0e      	ldr	r3, [pc, #56]	; (8009690 <_tx_thread_initialize+0x68>)
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800965a:	4b0e      	ldr	r3, [pc, #56]	; (8009694 <_tx_thread_initialize+0x6c>)
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8009660:	4b0d      	ldr	r3, [pc, #52]	; (8009698 <_tx_thread_initialize+0x70>)
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8009666:	4b0d      	ldr	r3, [pc, #52]	; (800969c <_tx_thread_initialize+0x74>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800966e:	4a0b      	ldr	r2, [pc, #44]	; (800969c <_tx_thread_initialize+0x74>)
 8009670:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20002adc 	.word	0x20002adc
 800967c:	20002ae0 	.word	0x20002ae0
 8009680:	20002ac4 	.word	0x20002ac4
 8009684:	20002ae4 	.word	0x20002ae4
 8009688:	20002a40 	.word	0x20002a40
 800968c:	20002ac8 	.word	0x20002ac8
 8009690:	20002ad0 	.word	0x20002ad0
 8009694:	20002ad8 	.word	0x20002ad8
 8009698:	20002ac0 	.word	0x20002ac0
 800969c:	20002acc 	.word	0x20002acc

080096a0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80096a6:	4b21      	ldr	r3, [pc, #132]	; (800972c <_tx_thread_shell_entry+0x8c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80096b8:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <_tx_thread_shell_entry+0x90>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80096c0:	4b1b      	ldr	r3, [pc, #108]	; (8009730 <_tx_thread_shell_entry+0x90>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	69f8      	ldr	r0, [r7, #28]
 80096c6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096c8:	f3ef 8310 	mrs	r3, PRIMASK
 80096cc:	607b      	str	r3, [r7, #4]
    return(posture);
 80096ce:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80096d0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80096d2:	b672      	cpsid	i
    return(int_posture);
 80096d4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80096d6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	2201      	movs	r2, #1
 80096dc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	2201      	movs	r2, #1
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	2200      	movs	r2, #0
 80096e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80096ea:	4b12      	ldr	r3, [pc, #72]	; (8009734 <_tx_thread_shell_entry+0x94>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3301      	adds	r3, #1
 80096f0:	4a10      	ldr	r2, [pc, #64]	; (8009734 <_tx_thread_shell_entry+0x94>)
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f383 8810 	msr	PRIMASK, r3
}
 80096fe:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8009700:	f3ef 8314 	mrs	r3, CONTROL
 8009704:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8009706:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f023 0304 	bic.w	r3, r3, #4
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f383 8814 	msr	CONTROL, r3
}
 800971c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800971e:	69f8      	ldr	r0, [r7, #28]
 8009720:	f000 f9c4 	bl	8009aac <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009724:	bf00      	nop
 8009726:	3720      	adds	r7, #32
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20002adc 	.word	0x20002adc
 8009730:	20002ac0 	.word	0x20002ac0
 8009734:	20002ad8 	.word	0x20002ad8

08009738 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08e      	sub	sp, #56	; 0x38
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009740:	f3ef 8310 	mrs	r3, PRIMASK
 8009744:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800974a:	b672      	cpsid	i
    return(int_posture);
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800974e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009750:	4b35      	ldr	r3, [pc, #212]	; (8009828 <_tx_thread_sleep+0xf0>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d108      	bne.n	800976e <_tx_thread_sleep+0x36>
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f383 8810 	msr	PRIMASK, r3
}
 8009766:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009768:	2313      	movs	r3, #19
 800976a:	637b      	str	r3, [r7, #52]	; 0x34
 800976c:	e056      	b.n	800981c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800976e:	f3ef 8305 	mrs	r3, IPSR
 8009772:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8009774:	69fa      	ldr	r2, [r7, #28]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009776:	4b2d      	ldr	r3, [pc, #180]	; (800982c <_tx_thread_sleep+0xf4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4313      	orrs	r3, r2
 800977c:	2b00      	cmp	r3, #0
 800977e:	d008      	beq.n	8009792 <_tx_thread_sleep+0x5a>
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f383 8810 	msr	PRIMASK, r3
}
 800978a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800978c:	2313      	movs	r3, #19
 800978e:	637b      	str	r3, [r7, #52]	; 0x34
 8009790:	e044      	b.n	800981c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	4a26      	ldr	r2, [pc, #152]	; (8009830 <_tx_thread_sleep+0xf8>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d108      	bne.n	80097ac <_tx_thread_sleep+0x74>
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f383 8810 	msr	PRIMASK, r3
}
 80097a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80097a6:	2313      	movs	r3, #19
 80097a8:	637b      	str	r3, [r7, #52]	; 0x34
 80097aa:	e037      	b.n	800981c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d108      	bne.n	80097c4 <_tx_thread_sleep+0x8c>
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f383 8810 	msr	PRIMASK, r3
}
 80097bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80097be:	2300      	movs	r3, #0
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
 80097c2:	e02b      	b.n	800981c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80097c4:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <_tx_thread_sleep+0xfc>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d008      	beq.n	80097de <_tx_thread_sleep+0xa6>
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f383 8810 	msr	PRIMASK, r3
}
 80097d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80097d8:	2313      	movs	r3, #19
 80097da:	637b      	str	r3, [r7, #52]	; 0x34
 80097dc:	e01e      	b.n	800981c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	2204      	movs	r2, #4
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	2201      	movs	r2, #1
 80097e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80097f8:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <_tx_thread_sleep+0xfc>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	4a0d      	ldr	r2, [pc, #52]	; (8009834 <_tx_thread_sleep+0xfc>)
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f383 8810 	msr	PRIMASK, r3
}
 800980c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800980e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009810:	f000 f94c 	bl	8009aac <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800981a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 800981c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800981e:	4618      	mov	r0, r3
 8009820:	3738      	adds	r7, #56	; 0x38
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20002adc 	.word	0x20002adc
 800982c:	20000170 	.word	0x20000170
 8009830:	20002b7c 	.word	0x20002b7c
 8009834:	20002ad8 	.word	0x20002ad8

08009838 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8009838:	b480      	push	{r7}
 800983a:	b089      	sub	sp, #36	; 0x24
 800983c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800983e:	4b17      	ldr	r3, [pc, #92]	; (800989c <_tx_thread_system_preempt_check+0x64>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d121      	bne.n	800988e <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800984a:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <_tx_thread_system_preempt_check+0x68>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8009850:	4b14      	ldr	r3, [pc, #80]	; (80098a4 <_tx_thread_system_preempt_check+0x6c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	429a      	cmp	r2, r3
 800985c:	d017      	beq.n	800988e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <_tx_thread_system_preempt_check+0x70>)
 8009860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009864:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009866:	f3ef 8305 	mrs	r3, IPSR
 800986a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800986c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10c      	bne.n	800988c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009872:	f3ef 8310 	mrs	r3, PRIMASK
 8009876:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009878:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800987a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800987c:	b662      	cpsie	i
}
 800987e:	bf00      	nop
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f383 8810 	msr	PRIMASK, r3
}
 800988a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800988c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800988e:	bf00      	nop
 8009890:	3724      	adds	r7, #36	; 0x24
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	20002ad8 	.word	0x20002ad8
 80098a0:	20002adc 	.word	0x20002adc
 80098a4:	20002ae0 	.word	0x20002ae0
 80098a8:	e000ed04 	.word	0xe000ed04

080098ac <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b096      	sub	sp, #88	; 0x58
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098b4:	f3ef 8310 	mrs	r3, PRIMASK
 80098b8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80098ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80098bc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80098be:	b672      	cpsid	i
    return(int_posture);
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80098c2:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	334c      	adds	r3, #76	; 0x4c
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fb91 	bl	8009ff8 <_tx_timer_system_deactivate>
 80098d6:	e002      	b.n	80098de <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80098de:	4b6c      	ldr	r3, [pc, #432]	; (8009a90 <_tx_thread_system_resume+0x1e4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	4a6a      	ldr	r2, [pc, #424]	; (8009a90 <_tx_thread_system_resume+0x1e4>)
 80098e6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 8083 	bne.w	80099f8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 8097 	beq.w	8009a2a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009900:	2b00      	cmp	r3, #0
 8009902:	d172      	bne.n	80099ea <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8009910:	4a60      	ldr	r2, [pc, #384]	; (8009a94 <_tx_thread_system_resume+0x1e8>)
 8009912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009918:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800991a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d154      	bne.n	80099ca <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8009920:	495c      	ldr	r1, [pc, #368]	; (8009a94 <_tx_thread_system_resume+0x1e8>)
 8009922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8009936:	2201      	movs	r2, #1
 8009938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800993a:	fa02 f303 	lsl.w	r3, r2, r3
 800993e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8009940:	4b55      	ldr	r3, [pc, #340]	; (8009a98 <_tx_thread_system_resume+0x1ec>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009946:	4313      	orrs	r3, r2
 8009948:	4a53      	ldr	r2, [pc, #332]	; (8009a98 <_tx_thread_system_resume+0x1ec>)
 800994a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800994c:	4b53      	ldr	r3, [pc, #332]	; (8009a9c <_tx_thread_system_resume+0x1f0>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009952:	429a      	cmp	r2, r3
 8009954:	d269      	bcs.n	8009a2a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8009956:	4a51      	ldr	r2, [pc, #324]	; (8009a9c <_tx_thread_system_resume+0x1f0>)
 8009958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800995a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800995c:	4b50      	ldr	r3, [pc, #320]	; (8009aa0 <_tx_thread_system_resume+0x1f4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8009962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d103      	bne.n	8009970 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8009968:	4a4d      	ldr	r2, [pc, #308]	; (8009aa0 <_tx_thread_system_resume+0x1f4>)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	e05c      	b.n	8009a2a <_tx_thread_system_resume+0x17e>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8009970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009974:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009976:	429a      	cmp	r2, r3
 8009978:	d257      	bcs.n	8009a2a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800997a:	4a49      	ldr	r2, [pc, #292]	; (8009aa0 <_tx_thread_system_resume+0x1f4>)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009982:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	f383 8810 	msr	PRIMASK, r3
}
 800998a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800998c:	4b40      	ldr	r3, [pc, #256]	; (8009a90 <_tx_thread_system_resume+0x1e4>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8009992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d174      	bne.n	8009a82 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009998:	4b42      	ldr	r3, [pc, #264]	; (8009aa4 <_tx_thread_system_resume+0x1f8>)
 800999a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099a0:	f3ef 8305 	mrs	r3, IPSR
 80099a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10c      	bne.n	80099c6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099ac:	f3ef 8310 	mrs	r3, PRIMASK
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80099b4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80099b6:	b662      	cpsie	i
}
 80099b8:	bf00      	nop
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	f383 8810 	msr	PRIMASK, r3
}
 80099c4:	bf00      	nop
}
 80099c6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80099c8:	e05b      	b.n	8009a82 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80099ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80099d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80099d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099e6:	621a      	str	r2, [r3, #32]
 80099e8:	e01f      	b.n	8009a2a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2203      	movs	r2, #3
 80099f4:	631a      	str	r2, [r3, #48]	; 0x30
 80099f6:	e018      	b.n	8009a2a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d014      	beq.n	8009a2a <_tx_thread_system_resume+0x17e>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d010      	beq.n	8009a2a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d106      	bne.n	8009a1e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8009a1c:	e005      	b.n	8009a2a <_tx_thread_system_resume+0x17e>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2203      	movs	r2, #3
 8009a28:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009a2a:	4b1f      	ldr	r3, [pc, #124]	; (8009aa8 <_tx_thread_system_resume+0x1fc>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a32:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	f383 8810 	msr	PRIMASK, r3
}
 8009a3a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009a3c:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <_tx_thread_system_resume+0x1f4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d020      	beq.n	8009a88 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009a46:	4b12      	ldr	r3, [pc, #72]	; (8009a90 <_tx_thread_system_resume+0x1e4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8009a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d11a      	bne.n	8009a88 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <_tx_thread_system_resume+0x1f8>)
 8009a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a58:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009a5a:	f3ef 8305 	mrs	r3, IPSR
 8009a5e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009a60:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10f      	bne.n	8009a86 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a66:	f3ef 8310 	mrs	r3, PRIMASK
 8009a6a:	613b      	str	r3, [r7, #16]
    return(posture);
 8009a6c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8009a6e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009a70:	b662      	cpsie	i
}
 8009a72:	bf00      	nop
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f383 8810 	msr	PRIMASK, r3
}
 8009a7e:	bf00      	nop
}
 8009a80:	e001      	b.n	8009a86 <_tx_thread_system_resume+0x1da>
                                return;
 8009a82:	bf00      	nop
 8009a84:	e000      	b.n	8009a88 <_tx_thread_system_resume+0x1dc>
 8009a86:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8009a88:	3758      	adds	r7, #88	; 0x58
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20002ad8 	.word	0x20002ad8
 8009a94:	20002a40 	.word	0x20002a40
 8009a98:	20002ac4 	.word	0x20002ac4
 8009a9c:	20002ae4 	.word	0x20002ae4
 8009aa0:	20002ae0 	.word	0x20002ae0
 8009aa4:	e000ed04 	.word	0xe000ed04
 8009aa8:	20002adc 	.word	0x20002adc

08009aac <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b09e      	sub	sp, #120	; 0x78
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009ab4:	4b81      	ldr	r3, [pc, #516]	; (8009cbc <_tx_thread_system_suspend+0x210>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009aba:	f3ef 8310 	mrs	r3, PRIMASK
 8009abe:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8009ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8009ac2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ac4:	b672      	cpsid	i
    return(int_posture);
 8009ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009ac8:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d112      	bne.n	8009af8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8009ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d008      	beq.n	8009af0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8009ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ae4:	d004      	beq.n	8009af0 <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	334c      	adds	r3, #76	; 0x4c
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fa22 	bl	8009f34 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	4a72      	ldr	r2, [pc, #456]	; (8009cc0 <_tx_thread_system_suspend+0x214>)
 8009af6:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009af8:	4b72      	ldr	r3, [pc, #456]	; (8009cc4 <_tx_thread_system_suspend+0x218>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	4a71      	ldr	r2, [pc, #452]	; (8009cc4 <_tx_thread_system_suspend+0x218>)
 8009b00:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	f040 80a6 	bne.w	8009c58 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a1b      	ldr	r3, [r3, #32]
 8009b1c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8009b1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d015      	beq.n	8009b52 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8009b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b30:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8009b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b36:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8009b38:	4a63      	ldr	r2, [pc, #396]	; (8009cc8 <_tx_thread_system_suspend+0x21c>)
 8009b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d157      	bne.n	8009bf6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8009b46:	4960      	ldr	r1, [pc, #384]	; (8009cc8 <_tx_thread_system_suspend+0x21c>)
 8009b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b50:	e051      	b.n	8009bf6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8009b52:	4a5d      	ldr	r2, [pc, #372]	; (8009cc8 <_tx_thread_system_suspend+0x21c>)
 8009b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b56:	2100      	movs	r1, #0
 8009b58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b60:	fa02 f303 	lsl.w	r3, r2, r3
 8009b64:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8009b66:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <_tx_thread_system_suspend+0x220>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	4013      	ands	r3, r2
 8009b70:	4a56      	ldr	r2, [pc, #344]	; (8009ccc <_tx_thread_system_suspend+0x220>)
 8009b72:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8009b74:	2300      	movs	r3, #0
 8009b76:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8009b78:	4b54      	ldr	r3, [pc, #336]	; (8009ccc <_tx_thread_system_suspend+0x220>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8009b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d12b      	bne.n	8009bdc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009b84:	4b52      	ldr	r3, [pc, #328]	; (8009cd0 <_tx_thread_system_suspend+0x224>)
 8009b86:	2220      	movs	r2, #32
 8009b88:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8009b8a:	4b52      	ldr	r3, [pc, #328]	; (8009cd4 <_tx_thread_system_suspend+0x228>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b92:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b96:	f383 8810 	msr	PRIMASK, r3
}
 8009b9a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009b9c:	4b49      	ldr	r3, [pc, #292]	; (8009cc4 <_tx_thread_system_suspend+0x218>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8009ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f040 8081 	bne.w	8009cac <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009baa:	4b4b      	ldr	r3, [pc, #300]	; (8009cd8 <_tx_thread_system_suspend+0x22c>)
 8009bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009bb2:	f3ef 8305 	mrs	r3, IPSR
 8009bb6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8009bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10c      	bne.n	8009bd8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8009bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8009bc6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009bc8:	b662      	cpsie	i
}
 8009bca:	bf00      	nop
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bce:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd2:	f383 8810 	msr	PRIMASK, r3
}
 8009bd6:	bf00      	nop
}
 8009bd8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8009bda:	e067      	b.n	8009cac <_tx_thread_system_suspend+0x200>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8009bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bde:	fa93 f3a3 	rbit	r3, r3
 8009be2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009be6:	fab3 f383 	clz	r3, r3
 8009bea:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8009bec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bf0:	4413      	add	r3, r2
 8009bf2:	4a37      	ldr	r2, [pc, #220]	; (8009cd0 <_tx_thread_system_suspend+0x224>)
 8009bf4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8009bf6:	4b37      	ldr	r3, [pc, #220]	; (8009cd4 <_tx_thread_system_suspend+0x228>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d12b      	bne.n	8009c58 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009c00:	4b33      	ldr	r3, [pc, #204]	; (8009cd0 <_tx_thread_system_suspend+0x224>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a30      	ldr	r2, [pc, #192]	; (8009cc8 <_tx_thread_system_suspend+0x21c>)
 8009c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c0a:	4a32      	ldr	r2, [pc, #200]	; (8009cd4 <_tx_thread_system_suspend+0x228>)
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	f383 8810 	msr	PRIMASK, r3
}
 8009c18:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009c1a:	4b2a      	ldr	r3, [pc, #168]	; (8009cc4 <_tx_thread_system_suspend+0x218>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8009c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d144      	bne.n	8009cb0 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009c26:	4b2c      	ldr	r3, [pc, #176]	; (8009cd8 <_tx_thread_system_suspend+0x22c>)
 8009c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c2e:	f3ef 8305 	mrs	r3, IPSR
 8009c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10c      	bne.n	8009c54 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009c44:	b662      	cpsie	i
}
 8009c46:	bf00      	nop
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	f383 8810 	msr	PRIMASK, r3
}
 8009c52:	bf00      	nop
}
 8009c54:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8009c56:	e02b      	b.n	8009cb0 <_tx_thread_system_suspend+0x204>
 8009c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	f383 8810 	msr	PRIMASK, r3
}
 8009c62:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009c64:	4b1b      	ldr	r3, [pc, #108]	; (8009cd4 <_tx_thread_system_suspend+0x228>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d022      	beq.n	8009cb4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009c6e:	4b15      	ldr	r3, [pc, #84]	; (8009cc4 <_tx_thread_system_suspend+0x218>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8009c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d11c      	bne.n	8009cb4 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009c7a:	4b17      	ldr	r3, [pc, #92]	; (8009cd8 <_tx_thread_system_suspend+0x22c>)
 8009c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c82:	f3ef 8305 	mrs	r3, IPSR
 8009c86:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009c88:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10c      	bne.n	8009ca8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c92:	617b      	str	r3, [r7, #20]
    return(posture);
 8009c94:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8009c96:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009c98:	b662      	cpsie	i
}
 8009c9a:	bf00      	nop
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f383 8810 	msr	PRIMASK, r3
}
 8009ca6:	bf00      	nop
}
 8009ca8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8009caa:	e003      	b.n	8009cb4 <_tx_thread_system_suspend+0x208>
                return;
 8009cac:	bf00      	nop
 8009cae:	e002      	b.n	8009cb6 <_tx_thread_system_suspend+0x20a>
            return;
 8009cb0:	bf00      	nop
 8009cb2:	e000      	b.n	8009cb6 <_tx_thread_system_suspend+0x20a>
    return;
 8009cb4:	bf00      	nop
}
 8009cb6:	3778      	adds	r7, #120	; 0x78
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	20002adc 	.word	0x20002adc
 8009cc0:	20002b70 	.word	0x20002b70
 8009cc4:	20002ad8 	.word	0x20002ad8
 8009cc8:	20002a40 	.word	0x20002a40
 8009ccc:	20002ac4 	.word	0x20002ac4
 8009cd0:	20002ae4 	.word	0x20002ae4
 8009cd4:	20002ae0 	.word	0x20002ae0
 8009cd8:	e000ed04 	.word	0xe000ed04

08009cdc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009ce2:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <_tx_thread_time_slice+0x8c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cec:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009cee:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009cf0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009cf2:	b672      	cpsid	i
    return(int_posture);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8009cf6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009cf8:	4b1c      	ldr	r3, [pc, #112]	; (8009d6c <_tx_thread_time_slice+0x90>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d024      	beq.n	8009d4e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d120      	bne.n	8009d4e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	69da      	ldr	r2, [r3, #28]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <_tx_thread_time_slice+0x94>)
 8009d1a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d013      	beq.n	8009d4e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d10d      	bne.n	8009d4e <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	6a12      	ldr	r2, [r2, #32]
 8009d3a:	490e      	ldr	r1, [pc, #56]	; (8009d74 <_tx_thread_time_slice+0x98>)
 8009d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009d40:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <_tx_thread_time_slice+0x9c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a0b      	ldr	r2, [pc, #44]	; (8009d74 <_tx_thread_time_slice+0x98>)
 8009d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d4a:	4a0c      	ldr	r2, [pc, #48]	; (8009d7c <_tx_thread_time_slice+0xa0>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f383 8810 	msr	PRIMASK, r3
}
 8009d58:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8009d5a:	bf00      	nop
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20002adc 	.word	0x20002adc
 8009d6c:	20003044 	.word	0x20003044
 8009d70:	20002b70 	.word	0x20002b70
 8009d74:	20002a40 	.word	0x20002a40
 8009d78:	20002ae4 	.word	0x20002ae4
 8009d7c:	20002ae0 	.word	0x20002ae0

08009d80 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08a      	sub	sp, #40	; 0x28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d90:	617b      	str	r3, [r7, #20]
    return(posture);
 8009d92:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009d94:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d96:	b672      	cpsid	i
    return(int_posture);
 8009d98:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009d9a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d10e      	bne.n	8009dc2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8009da4:	4b13      	ldr	r3, [pc, #76]	; (8009df4 <_tx_thread_timeout+0x74>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3301      	adds	r3, #1
 8009daa:	4a12      	ldr	r2, [pc, #72]	; (8009df4 <_tx_thread_timeout+0x74>)
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f383 8810 	msr	PRIMASK, r3
}
 8009db8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dbc:	f7ff fd76 	bl	80098ac <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009dc0:	e013      	b.n	8009dea <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dc6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009dce:	61bb      	str	r3, [r7, #24]
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f383 8810 	msr	PRIMASK, r3
}
 8009dda:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	69b9      	ldr	r1, [r7, #24]
 8009de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009de8:	4798      	blx	r3
}
 8009dea:	bf00      	nop
 8009dec:	3728      	adds	r7, #40	; 0x28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20002ad8 	.word	0x20002ad8

08009df8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8009e02:	607b      	str	r3, [r7, #4]
    return(posture);
 8009e04:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009e06:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e08:	b672      	cpsid	i
    return(int_posture);
 8009e0a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009e0c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <_tx_timer_expiration_process+0x3c>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	4a07      	ldr	r2, [pc, #28]	; (8009e34 <_tx_timer_expiration_process+0x3c>)
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f383 8810 	msr	PRIMASK, r3
}
 8009e22:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8009e24:	4804      	ldr	r0, [pc, #16]	; (8009e38 <_tx_timer_expiration_process+0x40>)
 8009e26:	f7ff fd41 	bl	80098ac <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20002ad8 	.word	0x20002ad8
 8009e38:	20002b7c 	.word	0x20002b7c

08009e3c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b089      	sub	sp, #36	; 0x24
 8009e40:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009e42:	4b28      	ldr	r3, [pc, #160]	; (8009ee4 <_tx_timer_initialize+0xa8>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8009e48:	4b27      	ldr	r3, [pc, #156]	; (8009ee8 <_tx_timer_initialize+0xac>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009e4e:	4b27      	ldr	r3, [pc, #156]	; (8009eec <_tx_timer_initialize+0xb0>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009e54:	4b26      	ldr	r3, [pc, #152]	; (8009ef0 <_tx_timer_initialize+0xb4>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8009e5a:	4b26      	ldr	r3, [pc, #152]	; (8009ef4 <_tx_timer_initialize+0xb8>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009e60:	2280      	movs	r2, #128	; 0x80
 8009e62:	2100      	movs	r1, #0
 8009e64:	4824      	ldr	r0, [pc, #144]	; (8009ef8 <_tx_timer_initialize+0xbc>)
 8009e66:	f001 f807 	bl	800ae78 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8009e6a:	4b24      	ldr	r3, [pc, #144]	; (8009efc <_tx_timer_initialize+0xc0>)
 8009e6c:	4a22      	ldr	r2, [pc, #136]	; (8009ef8 <_tx_timer_initialize+0xbc>)
 8009e6e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009e70:	4b23      	ldr	r3, [pc, #140]	; (8009f00 <_tx_timer_initialize+0xc4>)
 8009e72:	4a21      	ldr	r2, [pc, #132]	; (8009ef8 <_tx_timer_initialize+0xbc>)
 8009e74:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8009e76:	4b23      	ldr	r3, [pc, #140]	; (8009f04 <_tx_timer_initialize+0xc8>)
 8009e78:	4a23      	ldr	r2, [pc, #140]	; (8009f08 <_tx_timer_initialize+0xcc>)
 8009e7a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009e7c:	4b21      	ldr	r3, [pc, #132]	; (8009f04 <_tx_timer_initialize+0xc8>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4a20      	ldr	r2, [pc, #128]	; (8009f04 <_tx_timer_initialize+0xc8>)
 8009e84:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8009e86:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <_tx_timer_initialize+0xd0>)
 8009e88:	4a21      	ldr	r2, [pc, #132]	; (8009f10 <_tx_timer_initialize+0xd4>)
 8009e8a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009e8c:	4b21      	ldr	r3, [pc, #132]	; (8009f14 <_tx_timer_initialize+0xd8>)
 8009e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e92:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009e94:	4b20      	ldr	r3, [pc, #128]	; (8009f18 <_tx_timer_initialize+0xdc>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8009e9a:	4b1c      	ldr	r3, [pc, #112]	; (8009f0c <_tx_timer_initialize+0xd0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a1d      	ldr	r2, [pc, #116]	; (8009f14 <_tx_timer_initialize+0xd8>)
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	491d      	ldr	r1, [pc, #116]	; (8009f18 <_tx_timer_initialize+0xdc>)
 8009ea4:	6809      	ldr	r1, [r1, #0]
 8009ea6:	481c      	ldr	r0, [pc, #112]	; (8009f18 <_tx_timer_initialize+0xdc>)
 8009ea8:	6800      	ldr	r0, [r0, #0]
 8009eaa:	2400      	movs	r4, #0
 8009eac:	9405      	str	r4, [sp, #20]
 8009eae:	2400      	movs	r4, #0
 8009eb0:	9404      	str	r4, [sp, #16]
 8009eb2:	9003      	str	r0, [sp, #12]
 8009eb4:	9102      	str	r1, [sp, #8]
 8009eb6:	9201      	str	r2, [sp, #4]
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	4b18      	ldr	r3, [pc, #96]	; (8009f1c <_tx_timer_initialize+0xe0>)
 8009ebc:	4a18      	ldr	r2, [pc, #96]	; (8009f20 <_tx_timer_initialize+0xe4>)
 8009ebe:	4919      	ldr	r1, [pc, #100]	; (8009f24 <_tx_timer_initialize+0xe8>)
 8009ec0:	4819      	ldr	r0, [pc, #100]	; (8009f28 <_tx_timer_initialize+0xec>)
 8009ec2:	f7ff fa9d 	bl	8009400 <_tx_thread_create>
 8009ec6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e5      	bne.n	8009e9a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009ece:	4b17      	ldr	r3, [pc, #92]	; (8009f2c <_tx_timer_initialize+0xf0>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009ed4:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <_tx_timer_initialize+0xf4>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd90      	pop	{r4, r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20003048 	.word	0x20003048
 8009ee8:	20002b70 	.word	0x20002b70
 8009eec:	20003044 	.word	0x20003044
 8009ef0:	20002b6c 	.word	0x20002b6c
 8009ef4:	20002c2c 	.word	0x20002c2c
 8009ef8:	20002aec 	.word	0x20002aec
 8009efc:	20002c30 	.word	0x20002c30
 8009f00:	20002ae8 	.word	0x20002ae8
 8009f04:	20002b78 	.word	0x20002b78
 8009f08:	20002b68 	.word	0x20002b68
 8009f0c:	2000303c 	.word	0x2000303c
 8009f10:	20002c3c 	.word	0x20002c3c
 8009f14:	20002c38 	.word	0x20002c38
 8009f18:	20002b74 	.word	0x20002b74
 8009f1c:	4154494d 	.word	0x4154494d
 8009f20:	0800a069 	.word	0x0800a069
 8009f24:	0800dd6c 	.word	0x0800dd6c
 8009f28:	20002b7c 	.word	0x20002b7c
 8009f2c:	20002c34 	.word	0x20002c34
 8009f30:	20003040 	.word	0x20003040

08009f34 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b089      	sub	sp, #36	; 0x24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d04a      	beq.n	8009fde <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f4e:	d046      	beq.n	8009fde <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d142      	bne.n	8009fde <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d902      	bls.n	8009f64 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009f5e:	231f      	movs	r3, #31
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e002      	b.n	8009f6a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009f6a:	4b20      	ldr	r3, [pc, #128]	; (8009fec <_tx_timer_system_activate+0xb8>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009f76:	4b1e      	ldr	r3, [pc, #120]	; (8009ff0 <_tx_timer_system_activate+0xbc>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d30b      	bcc.n	8009f98 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009f80:	4b1b      	ldr	r3, [pc, #108]	; (8009ff0 <_tx_timer_system_activate+0xbc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	109b      	asrs	r3, r3, #2
 8009f8a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009f8c:	4b19      	ldr	r3, [pc, #100]	; (8009ff4 <_tx_timer_system_activate+0xc0>)
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	e011      	b.n	8009fd8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009fde:	bf00      	nop
 8009fe0:	3724      	adds	r7, #36	; 0x24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20002ae8 	.word	0x20002ae8
 8009ff0:	20002b78 	.word	0x20002b78
 8009ff4:	20002c30 	.word	0x20002c30

08009ff8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d026      	beq.n	800a05a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	d108      	bne.n	800a02c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d117      	bne.n	800a054 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2200      	movs	r2, #0
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	e013      	b.n	800a054 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	429a      	cmp	r2, r3
 800a046:	d105      	bne.n	800a054 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	619a      	str	r2, [r3, #24]
    }
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
	...

0800a068 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b098      	sub	sp, #96	; 0x60
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800a070:	2300      	movs	r3, #0
 800a072:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a73      	ldr	r2, [pc, #460]	; (800a244 <_tx_timer_thread_entry+0x1dc>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	f040 80de 	bne.w	800a23a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a07e:	f3ef 8310 	mrs	r3, PRIMASK
 800a082:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800a084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800a086:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a088:	b672      	cpsid	i
    return(int_posture);
 800a08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800a08c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800a08e:	4b6e      	ldr	r3, [pc, #440]	; (800a248 <_tx_timer_thread_entry+0x1e0>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f107 020c 	add.w	r2, r7, #12
 800a0a2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800a0a4:	4b68      	ldr	r3, [pc, #416]	; (800a248 <_tx_timer_thread_entry+0x1e0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800a0ac:	4b66      	ldr	r3, [pc, #408]	; (800a248 <_tx_timer_thread_entry+0x1e0>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	4a65      	ldr	r2, [pc, #404]	; (800a248 <_tx_timer_thread_entry+0x1e0>)
 800a0b4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a0b6:	4b64      	ldr	r3, [pc, #400]	; (800a248 <_tx_timer_thread_entry+0x1e0>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	4b64      	ldr	r3, [pc, #400]	; (800a24c <_tx_timer_thread_entry+0x1e4>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d103      	bne.n	800a0ca <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 800a0c2:	4b63      	ldr	r3, [pc, #396]	; (800a250 <_tx_timer_thread_entry+0x1e8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a60      	ldr	r2, [pc, #384]	; (800a248 <_tx_timer_thread_entry+0x1e0>)
 800a0c8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800a0ca:	4b62      	ldr	r3, [pc, #392]	; (800a254 <_tx_timer_thread_entry+0x1ec>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0d2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	f383 8810 	msr	PRIMASK, r3
}
 800a0da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a0e0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0e6:	b672      	cpsid	i
    return(int_posture);
 800a0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800a0ea:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800a0ec:	e07f      	b.n	800a1ee <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800a0fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a100:	429a      	cmp	r2, r3
 800a102:	d102      	bne.n	800a10a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	e00e      	b.n	800a128 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800a10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a114:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a11a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800a11c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a11e:	f107 020c 	add.w	r2, r7, #12
 800a122:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800a124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a126:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	d911      	bls.n	800a154 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800a130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800a138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13a:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a142:	f107 0208 	add.w	r2, r7, #8
 800a146:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800a148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a14a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a14c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800a14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	e01a      	b.n	800a18a <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800a154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800a15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800a160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a166:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800a168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d009      	beq.n	800a184 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a172:	f107 0208 	add.w	r2, r7, #8
 800a176:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800a178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a17a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a17c:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800a17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a180:	60bb      	str	r3, [r7, #8]
 800a182:	e002      	b.n	800a18a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800a184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a186:	2200      	movs	r2, #0
 800a188:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800a18a:	4a33      	ldr	r2, [pc, #204]	; (800a258 <_tx_timer_thread_entry+0x1f0>)
 800a18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a196:	f383 8810 	msr	PRIMASK, r3
}
 800a19a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800a19c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 800a1a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a1a6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1b2:	b672      	cpsid	i
    return(int_posture);
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a1b6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800a1b8:	4b27      	ldr	r3, [pc, #156]	; (800a258 <_tx_timer_thread_entry+0x1f0>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d105      	bne.n	800a1d2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800a1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800a1cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a1ce:	f7ff feb1 	bl	8009f34 <_tx_timer_system_activate>
 800a1d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	f383 8810 	msr	PRIMASK, r3
}
 800a1dc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1de:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e2:	623b      	str	r3, [r7, #32]
    return(posture);
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a1e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1e8:	b672      	cpsid	i
    return(int_posture);
 800a1ea:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a1ec:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f47f af7c 	bne.w	800a0ee <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800a1f6:	4b17      	ldr	r3, [pc, #92]	; (800a254 <_tx_timer_thread_entry+0x1ec>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d116      	bne.n	800a22c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800a1fe:	4b17      	ldr	r3, [pc, #92]	; (800a25c <_tx_timer_thread_entry+0x1f4>)
 800a200:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a204:	2203      	movs	r2, #3
 800a206:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a20a:	2201      	movs	r2, #1
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800a20e:	4b14      	ldr	r3, [pc, #80]	; (800a260 <_tx_timer_thread_entry+0x1f8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	4a12      	ldr	r2, [pc, #72]	; (800a260 <_tx_timer_thread_entry+0x1f8>)
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a21a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f383 8810 	msr	PRIMASK, r3
}
 800a222:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a224:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a226:	f7ff fc41 	bl	8009aac <_tx_thread_system_suspend>
 800a22a:	e728      	b.n	800a07e <_tx_timer_thread_entry+0x16>
 800a22c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a22e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f383 8810 	msr	PRIMASK, r3
}
 800a236:	bf00      	nop
            TX_DISABLE
 800a238:	e721      	b.n	800a07e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800a23a:	bf00      	nop
 800a23c:	3760      	adds	r7, #96	; 0x60
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	4154494d 	.word	0x4154494d
 800a248:	20002ae8 	.word	0x20002ae8
 800a24c:	20002b78 	.word	0x20002b78
 800a250:	20002c30 	.word	0x20002c30
 800a254:	20002b6c 	.word	0x20002b6c
 800a258:	20002c2c 	.word	0x20002c2c
 800a25c:	20002b7c 	.word	0x20002b7c
 800a260:	20002ad8 	.word	0x20002ad8

0800a264 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b092      	sub	sp, #72	; 0x48
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a272:	2300      	movs	r3, #0
 800a274:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a27c:	2302      	movs	r3, #2
 800a27e:	647b      	str	r3, [r7, #68]	; 0x44
 800a280:	e075      	b.n	800a36e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a284:	2b34      	cmp	r3, #52	; 0x34
 800a286:	d002      	beq.n	800a28e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a288:	2302      	movs	r3, #2
 800a28a:	647b      	str	r3, [r7, #68]	; 0x44
 800a28c:	e06f      	b.n	800a36e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a28e:	f3ef 8310 	mrs	r3, PRIMASK
 800a292:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a296:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a298:	b672      	cpsid	i
    return(int_posture);
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 800a29c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a29e:	4b3b      	ldr	r3, [pc, #236]	; (800a38c <_txe_byte_pool_create+0x128>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	4a39      	ldr	r2, [pc, #228]	; (800a38c <_txe_byte_pool_create+0x128>)
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	f383 8810 	msr	PRIMASK, r3
}
 800a2b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a2b4:	4b36      	ldr	r3, [pc, #216]	; (800a390 <_txe_byte_pool_create+0x12c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2be:	e009      	b.n	800a2d4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d00b      	beq.n	800a2e0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	643b      	str	r3, [r7, #64]	; 0x40
 800a2d4:	4b2f      	ldr	r3, [pc, #188]	; (800a394 <_txe_byte_pool_create+0x130>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d3f0      	bcc.n	800a2c0 <_txe_byte_pool_create+0x5c>
 800a2de:	e000      	b.n	800a2e2 <_txe_byte_pool_create+0x7e>
                break;
 800a2e0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2e6:	623b      	str	r3, [r7, #32]
    return(posture);
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a2ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2ec:	b672      	cpsid	i
    return(int_posture);
 800a2ee:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a2f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a2f2:	4b26      	ldr	r3, [pc, #152]	; (800a38c <_txe_byte_pool_create+0x128>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4a24      	ldr	r2, [pc, #144]	; (800a38c <_txe_byte_pool_create+0x128>)
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	f383 8810 	msr	PRIMASK, r3
}
 800a306:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a308:	f7ff fa96 	bl	8009838 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a310:	429a      	cmp	r2, r3
 800a312:	d102      	bne.n	800a31a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a314:	2302      	movs	r3, #2
 800a316:	647b      	str	r3, [r7, #68]	; 0x44
 800a318:	e029      	b.n	800a36e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a320:	2303      	movs	r3, #3
 800a322:	647b      	str	r3, [r7, #68]	; 0x44
 800a324:	e023      	b.n	800a36e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b63      	cmp	r3, #99	; 0x63
 800a32a:	d802      	bhi.n	800a332 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a32c:	2305      	movs	r3, #5
 800a32e:	647b      	str	r3, [r7, #68]	; 0x44
 800a330:	e01d      	b.n	800a36e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a332:	4b19      	ldr	r3, [pc, #100]	; (800a398 <_txe_byte_pool_create+0x134>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33a:	4a18      	ldr	r2, [pc, #96]	; (800a39c <_txe_byte_pool_create+0x138>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d101      	bne.n	800a344 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a340:	2313      	movs	r3, #19
 800a342:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a344:	f3ef 8305 	mrs	r3, IPSR
 800a348:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a34a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a34c:	4b14      	ldr	r3, [pc, #80]	; (800a3a0 <_txe_byte_pool_create+0x13c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4313      	orrs	r3, r2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00b      	beq.n	800a36e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a356:	f3ef 8305 	mrs	r3, IPSR
 800a35a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a35c:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a35e:	4b10      	ldr	r3, [pc, #64]	; (800a3a0 <_txe_byte_pool_create+0x13c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4313      	orrs	r3, r2
 800a364:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a368:	d201      	bcs.n	800a36e <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a36a:	2313      	movs	r3, #19
 800a36c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7fe fb50 	bl	8008a20 <_tx_byte_pool_create>
 800a380:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a384:	4618      	mov	r0, r3
 800a386:	3748      	adds	r7, #72	; 0x48
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20002ad8 	.word	0x20002ad8
 800a390:	20002a20 	.word	0x20002a20
 800a394:	20002a3c 	.word	0x20002a3c
 800a398:	20002adc 	.word	0x20002adc
 800a39c:	20002b7c 	.word	0x20002b7c
 800a3a0:	20000170 	.word	0x20000170

0800a3a4 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b094      	sub	sp, #80	; 0x50
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d102      	bne.n	800a3c2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800a3bc:	2309      	movs	r3, #9
 800a3be:	647b      	str	r3, [r7, #68]	; 0x44
 800a3c0:	e083      	b.n	800a4ca <_txe_queue_create+0x126>
    }
    
    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800a3c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3c4:	2b38      	cmp	r3, #56	; 0x38
 800a3c6:	d002      	beq.n	800a3ce <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800a3c8:	2309      	movs	r3, #9
 800a3ca:	647b      	str	r3, [r7, #68]	; 0x44
 800a3cc:	e07d      	b.n	800a4ca <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a3ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a3d6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a3d8:	b672      	cpsid	i
    return(int_posture);
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a3dc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a3de:	4b43      	ldr	r3, [pc, #268]	; (800a4ec <_txe_queue_create+0x148>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	4a41      	ldr	r2, [pc, #260]	; (800a4ec <_txe_queue_create+0x148>)
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	f383 8810 	msr	PRIMASK, r3
}
 800a3f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800a3f4:	4b3e      	ldr	r3, [pc, #248]	; (800a4f0 <_txe_queue_create+0x14c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a3fe:	e009      	b.n	800a414 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a404:	429a      	cmp	r2, r3
 800a406:	d00b      	beq.n	800a420 <_txe_queue_create+0x7c>
            }
            else
            {
        
                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800a408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800a40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a410:	3301      	adds	r3, #1
 800a412:	643b      	str	r3, [r7, #64]	; 0x40
 800a414:	4b37      	ldr	r3, [pc, #220]	; (800a4f4 <_txe_queue_create+0x150>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d3f0      	bcc.n	800a400 <_txe_queue_create+0x5c>
 800a41e:	e000      	b.n	800a422 <_txe_queue_create+0x7e>
                break;
 800a420:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a422:	f3ef 8310 	mrs	r3, PRIMASK
 800a426:	623b      	str	r3, [r7, #32]
    return(posture);
 800a428:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a42a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a42c:	b672      	cpsid	i
    return(int_posture);
 800a42e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a430:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a432:	4b2e      	ldr	r3, [pc, #184]	; (800a4ec <_txe_queue_create+0x148>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3b01      	subs	r3, #1
 800a438:	4a2c      	ldr	r2, [pc, #176]	; (800a4ec <_txe_queue_create+0x148>)
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	f383 8810 	msr	PRIMASK, r3
}
 800a446:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a448:	f7ff f9f6 	bl	8009838 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a450:	429a      	cmp	r2, r3
 800a452:	d102      	bne.n	800a45a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800a454:	2309      	movs	r3, #9
 800a456:	647b      	str	r3, [r7, #68]	; 0x44
 800a458:	e037      	b.n	800a4ca <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800a460:	2303      	movs	r3, #3
 800a462:	647b      	str	r3, [r7, #68]	; 0x44
 800a464:	e031      	b.n	800a4ca <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800a46c:	2305      	movs	r3, #5
 800a46e:	647b      	str	r3, [r7, #68]	; 0x44
 800a470:	e02b      	b.n	800a4ca <_txe_queue_create+0x126>
        }
    
        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b10      	cmp	r3, #16
 800a476:	d902      	bls.n	800a47e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800a478:	2305      	movs	r3, #5
 800a47a:	647b      	str	r3, [r7, #68]	; 0x44
 800a47c:	e025      	b.n	800a4ca <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800a47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a480:	089b      	lsrs	r3, r3, #2
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	429a      	cmp	r2, r3
 800a486:	d902      	bls.n	800a48e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800a488:	2305      	movs	r3, #5
 800a48a:	647b      	str	r3, [r7, #68]	; 0x44
 800a48c:	e01d      	b.n	800a4ca <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a48e:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <_txe_queue_create+0x154>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a496:	4a19      	ldr	r2, [pc, #100]	; (800a4fc <_txe_queue_create+0x158>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d101      	bne.n	800a4a0 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a49c:	2313      	movs	r3, #19
 800a49e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4a0:	f3ef 8305 	mrs	r3, IPSR
 800a4a4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a4a6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <_txe_queue_create+0x15c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00b      	beq.n	800a4ca <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4b2:	f3ef 8305 	mrs	r3, IPSR
 800a4b6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a4b8:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <_txe_queue_create+0x15c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a4c4:	d201      	bcs.n	800a4ca <_txe_queue_create+0x126>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a4c6:	2313      	movs	r3, #19
 800a4c8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d108      	bne.n	800a4e2 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800a4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7fe fc28 	bl	8008d30 <_tx_queue_create>
 800a4e0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3748      	adds	r7, #72	; 0x48
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20002ad8 	.word	0x20002ad8
 800a4f0:	20002a38 	.word	0x20002a38
 800a4f4:	20002a18 	.word	0x20002a18
 800a4f8:	20002adc 	.word	0x20002adc
 800a4fc:	20002b7c 	.word	0x20002b7c
 800a500:	20000170 	.word	0x20000170

0800a504 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a510:	2300      	movs	r3, #0
 800a512:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800a51a:	2309      	movs	r3, #9
 800a51c:	61fb      	str	r3, [r7, #28]
 800a51e:	e025      	b.n	800a56c <_txe_queue_receive+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a18      	ldr	r2, [pc, #96]	; (800a588 <_txe_queue_receive+0x84>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d002      	beq.n	800a530 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800a52a:	2309      	movs	r3, #9
 800a52c:	61fb      	str	r3, [r7, #28]
 800a52e:	e01d      	b.n	800a56c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d102      	bne.n	800a53c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a536:	2303      	movs	r3, #3
 800a538:	61fb      	str	r3, [r7, #28]
 800a53a:	e017      	b.n	800a56c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d014      	beq.n	800a56c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a542:	f3ef 8305 	mrs	r3, IPSR
 800a546:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a548:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a54a:	4b10      	ldr	r3, [pc, #64]	; (800a58c <_txe_queue_receive+0x88>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4313      	orrs	r3, r2
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a554:	2304      	movs	r3, #4
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	e008      	b.n	800a56c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a55a:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <_txe_queue_receive+0x8c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	4a0c      	ldr	r2, [pc, #48]	; (800a594 <_txe_queue_receive+0x90>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d101      	bne.n	800a56c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a568:	2304      	movs	r3, #4
 800a56a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7fe fc4e 	bl	8008e18 <_tx_queue_receive>
 800a57c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800a57e:	69fb      	ldr	r3, [r7, #28]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3720      	adds	r7, #32
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	51554555 	.word	0x51554555
 800a58c:	20000170 	.word	0x20000170
 800a590:	20002adc 	.word	0x20002adc
 800a594:	20002b7c 	.word	0x20002b7c

0800a598 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800a5ae:	2309      	movs	r3, #9
 800a5b0:	61fb      	str	r3, [r7, #28]
 800a5b2:	e025      	b.n	800a600 <_txe_queue_send+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a18      	ldr	r2, [pc, #96]	; (800a61c <_txe_queue_send+0x84>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d002      	beq.n	800a5c4 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800a5be:	2309      	movs	r3, #9
 800a5c0:	61fb      	str	r3, [r7, #28]
 800a5c2:	e01d      	b.n	800a600 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	61fb      	str	r3, [r7, #28]
 800a5ce:	e017      	b.n	800a600 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d014      	beq.n	800a600 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a5d6:	f3ef 8305 	mrs	r3, IPSR
 800a5da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a5dc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a5de:	4b10      	ldr	r3, [pc, #64]	; (800a620 <_txe_queue_send+0x88>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a5e8:	2304      	movs	r3, #4
 800a5ea:	61fb      	str	r3, [r7, #28]
 800a5ec:	e008      	b.n	800a600 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
    
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <_txe_queue_send+0x8c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	4a0c      	ldr	r2, [pc, #48]	; (800a628 <_txe_queue_send+0x90>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d101      	bne.n	800a600 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d105      	bne.n	800a612 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7fe fdcc 	bl	80091a8 <_tx_queue_send>
 800a610:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800a612:	69fb      	ldr	r3, [r7, #28]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3720      	adds	r7, #32
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	51554555 	.word	0x51554555
 800a620:	20000170 	.word	0x20000170
 800a624:	20002adc 	.word	0x20002adc
 800a628:	20002b7c 	.word	0x20002b7c

0800a62c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b09a      	sub	sp, #104	; 0x68
 800a630:	af06      	add	r7, sp, #24
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a63a:	2300      	movs	r3, #0
 800a63c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a644:	230e      	movs	r3, #14
 800a646:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a648:	e0bb      	b.n	800a7c2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800a64a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a64c:	2bb0      	cmp	r3, #176	; 0xb0
 800a64e:	d002      	beq.n	800a656 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a650:	230e      	movs	r3, #14
 800a652:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a654:	e0b5      	b.n	800a7c2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a656:	f3ef 8310 	mrs	r3, PRIMASK
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a660:	b672      	cpsid	i
    return(int_posture);
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a666:	4b64      	ldr	r3, [pc, #400]	; (800a7f8 <_txe_thread_create+0x1cc>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3301      	adds	r3, #1
 800a66c:	4a62      	ldr	r2, [pc, #392]	; (800a7f8 <_txe_thread_create+0x1cc>)
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a672:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	f383 8810 	msr	PRIMASK, r3
}
 800a67a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800a67c:	2300      	movs	r3, #0
 800a67e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800a680:	4b5e      	ldr	r3, [pc, #376]	; (800a7fc <_txe_thread_create+0x1d0>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a688:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800a68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a68c:	3b01      	subs	r3, #1
 800a68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a690:	4413      	add	r3, r2
 800a692:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a698:	2300      	movs	r3, #0
 800a69a:	647b      	str	r3, [r7, #68]	; 0x44
 800a69c:	e02b      	b.n	800a6f6 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d101      	bne.n	800a6aa <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800a6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d028      	beq.n	800a702 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800a6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d308      	bcc.n	800a6cc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800a6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d203      	bcs.n	800a6cc <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d308      	bcc.n	800a6e8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800a6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d203      	bcs.n	800a6e8 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800a6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ee:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f6:	4b42      	ldr	r3, [pc, #264]	; (800a800 <_txe_thread_create+0x1d4>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d3ce      	bcc.n	800a69e <_txe_thread_create+0x72>
 800a700:	e000      	b.n	800a704 <_txe_thread_create+0xd8>
                break;
 800a702:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a704:	f3ef 8310 	mrs	r3, PRIMASK
 800a708:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a70a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a70c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a70e:	b672      	cpsid	i
    return(int_posture);
 800a710:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a714:	4b38      	ldr	r3, [pc, #224]	; (800a7f8 <_txe_thread_create+0x1cc>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3b01      	subs	r3, #1
 800a71a:	4a37      	ldr	r2, [pc, #220]	; (800a7f8 <_txe_thread_create+0x1cc>)
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a720:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	f383 8810 	msr	PRIMASK, r3
}
 800a728:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a72a:	f7ff f885 	bl	8009838 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a732:	429a      	cmp	r2, r3
 800a734:	d102      	bne.n	800a73c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800a736:	230e      	movs	r3, #14
 800a738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a73a:	e042      	b.n	800a7c2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800a73c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a742:	2303      	movs	r3, #3
 800a744:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a746:	e03c      	b.n	800a7c2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a74e:	2303      	movs	r3, #3
 800a750:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a752:	e036      	b.n	800a7c2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800a754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a756:	2bc7      	cmp	r3, #199	; 0xc7
 800a758:	d802      	bhi.n	800a760 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800a75a:	2305      	movs	r3, #5
 800a75c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a75e:	e030      	b.n	800a7c2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800a760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a762:	2b1f      	cmp	r3, #31
 800a764:	d902      	bls.n	800a76c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800a766:	230f      	movs	r3, #15
 800a768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a76a:	e02a      	b.n	800a7c2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800a76c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a76e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a770:	429a      	cmp	r2, r3
 800a772:	d902      	bls.n	800a77a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800a774:	2318      	movs	r3, #24
 800a776:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a778:	e023      	b.n	800a7c2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800a77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d902      	bls.n	800a786 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800a780:	2310      	movs	r3, #16
 800a782:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a784:	e01d      	b.n	800a7c2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800a786:	4b1f      	ldr	r3, [pc, #124]	; (800a804 <_txe_thread_create+0x1d8>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	4a1e      	ldr	r2, [pc, #120]	; (800a808 <_txe_thread_create+0x1dc>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d101      	bne.n	800a798 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a794:	2313      	movs	r3, #19
 800a796:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a798:	f3ef 8305 	mrs	r3, IPSR
 800a79c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a79e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a7a0:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <_txe_thread_create+0x1e0>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00b      	beq.n	800a7c2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7aa:	f3ef 8305 	mrs	r3, IPSR
 800a7ae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a7b0:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a7b2:	4b16      	ldr	r3, [pc, #88]	; (800a80c <_txe_thread_create+0x1e0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a7bc:	d201      	bcs.n	800a7c2 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a7be:	2313      	movs	r3, #19
 800a7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d112      	bne.n	800a7ee <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800a7c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ca:	9305      	str	r3, [sp, #20]
 800a7cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d2:	9303      	str	r3, [sp, #12]
 800a7d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7d6:	9302      	str	r3, [sp, #8]
 800a7d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7fe fe0a 	bl	8009400 <_tx_thread_create>
 800a7ec:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3750      	adds	r7, #80	; 0x50
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20002ad8 	.word	0x20002ad8
 800a7fc:	20002ac8 	.word	0x20002ac8
 800a800:	20002ad0 	.word	0x20002ad0
 800a804:	20002adc 	.word	0x20002adc
 800a808:	20002b7c 	.word	0x20002b7c
 800a80c:	20000170 	.word	0x20000170

0800a810 <task_Powerstep01>:
static void BusyInterruptHandler(void);
static void FlagInterruptHandler(void);
static void ErrorHandler(uint16_t error);

void task_Powerstep01(uint32_t interval)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
	//self_state = TASK_S_INIT;
	initMotor();
 800a818:	f000 f884 	bl	800a924 <initMotor>
	 * TODO:
	 * DELEGARE A SERIAL TASK STAMPA DI ADC E GET POS
	 * */
	while(1){
		//goForward(50000);
		switch(self_state)
 800a81c:	4b2e      	ldr	r3, [pc, #184]	; (800a8d8 <task_Powerstep01+0xc8>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d053      	beq.n	800a8cc <task_Powerstep01+0xbc>
 800a824:	2b02      	cmp	r3, #2
 800a826:	d000      	beq.n	800a82a <task_Powerstep01+0x1a>

			break;
		}
		default:
		{
			break;
 800a828:	e051      	b.n	800a8ce <task_Powerstep01+0xbe>
			tx_queue_receive(ptr_motor_queue,&msg,TX_WAIT_FOREVER);
 800a82a:	4b2c      	ldr	r3, [pc, #176]	; (800a8dc <task_Powerstep01+0xcc>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a832:	492b      	ldr	r1, [pc, #172]	; (800a8e0 <task_Powerstep01+0xd0>)
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff fe65 	bl	800a504 <_txe_queue_receive>
			switch(msg.cmd)
 800a83a:	4b29      	ldr	r3, [pc, #164]	; (800a8e0 <task_Powerstep01+0xd0>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b06      	cmp	r3, #6
 800a840:	d842      	bhi.n	800a8c8 <task_Powerstep01+0xb8>
 800a842:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <task_Powerstep01+0x38>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a865 	.word	0x0800a865
 800a84c:	0800a86d 	.word	0x0800a86d
 800a850:	0800a875 	.word	0x0800a875
 800a854:	0800a881 	.word	0x0800a881
 800a858:	0800a88d 	.word	0x0800a88d
 800a85c:	0800a8b7 	.word	0x0800a8b7
 800a860:	0800a8c3 	.word	0x0800a8c3
				BSP_MotorControl_CmdHardHiZ(0);
 800a864:	2000      	movs	r0, #0
 800a866:	f7fa f877 	bl	8004958 <BSP_MotorControl_CmdHardHiZ>
				break;
 800a86a:	e02e      	b.n	800a8ca <task_Powerstep01+0xba>
				BSP_MotorControl_HardStop(0);
 800a86c:	2000      	movs	r0, #0
 800a86e:	f7fa f80d 	bl	800488c <BSP_MotorControl_HardStop>
				break;
 800a872:	e02a      	b.n	800a8ca <task_Powerstep01+0xba>
				goForward(msg.val);
 800a874:	4b1a      	ldr	r3, [pc, #104]	; (800a8e0 <task_Powerstep01+0xd0>)
 800a876:	885b      	ldrh	r3, [r3, #2]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f8db 	bl	800aa34 <goForward>
				break;
 800a87e:	e024      	b.n	800a8ca <task_Powerstep01+0xba>
				goBackward(msg.val);
 800a880:	4b17      	ldr	r3, [pc, #92]	; (800a8e0 <task_Powerstep01+0xd0>)
 800a882:	885b      	ldrh	r3, [r3, #2]
 800a884:	4618      	mov	r0, r3
 800a886:	f000 f8e2 	bl	800aa4e <goBackward>
				break;
 800a88a:	e01e      	b.n	800a8ca <task_Powerstep01+0xba>
				pos = (uint32_t)getPosition();
 800a88c:	f000 f8ff 	bl	800aa8e <getPosition>
 800a890:	4603      	mov	r3, r0
 800a892:	461a      	mov	r2, r3
 800a894:	4b13      	ldr	r3, [pc, #76]	; (800a8e4 <task_Powerstep01+0xd4>)
 800a896:	601a      	str	r2, [r3, #0]
				uart_msg.cmd = MOTOR_GET_POS;
 800a898:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <task_Powerstep01+0xd8>)
 800a89a:	2204      	movs	r2, #4
 800a89c:	701a      	strb	r2, [r3, #0]
				uart_msg.pos = pos;
 800a89e:	4b11      	ldr	r3, [pc, #68]	; (800a8e4 <task_Powerstep01+0xd4>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a11      	ldr	r2, [pc, #68]	; (800a8e8 <task_Powerstep01+0xd8>)
 800a8a4:	6053      	str	r3, [r2, #4]
				tx_queue_send(ptr_uart_cmd_queue, &uart_msg, TX_NO_WAIT);
 800a8a6:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <task_Powerstep01+0xdc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	490e      	ldr	r1, [pc, #56]	; (800a8e8 <task_Powerstep01+0xd8>)
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff fe72 	bl	800a598 <_txe_queue_send>
				break;
 800a8b4:	e009      	b.n	800a8ca <task_Powerstep01+0xba>
				goTo(msg.val);
 800a8b6:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <task_Powerstep01+0xd0>)
 800a8b8:	885b      	ldrh	r3, [r3, #2]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 f8d4 	bl	800aa68 <goTo>
				break;
 800a8c0:	e003      	b.n	800a8ca <task_Powerstep01+0xba>
				goHome();
 800a8c2:	f000 f8dd 	bl	800aa80 <goHome>
				break;
 800a8c6:	e000      	b.n	800a8ca <task_Powerstep01+0xba>
				break;
 800a8c8:	bf00      	nop
			break;
 800a8ca:	e000      	b.n	800a8ce <task_Powerstep01+0xbe>
			break;
 800a8cc:	bf00      	nop
		}
		}
		tx_thread_sleep(interval);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7fe ff32 	bl	8009738 <_tx_thread_sleep>
		switch(self_state)
 800a8d4:	e7a2      	b.n	800a81c <task_Powerstep01+0xc>
 800a8d6:	bf00      	nop
 800a8d8:	200008b6 	.word	0x200008b6
 800a8dc:	200008b8 	.word	0x200008b8
 800a8e0:	200032bc 	.word	0x200032bc
 800a8e4:	200008d8 	.word	0x200008d8
 800a8e8:	2000304c 	.word	0x2000304c
 800a8ec:	200008bc 	.word	0x200008bc

0800a8f0 <task_Powerstep01_Init>:
	}

}

void task_Powerstep01_Init(TX_QUEUE *motor_queue, TX_QUEUE *uart_queue)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
	ptr_motor_queue = motor_queue;
 800a8fa:	4a07      	ldr	r2, [pc, #28]	; (800a918 <task_Powerstep01_Init+0x28>)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6013      	str	r3, [r2, #0]
	ptr_uart_cmd_queue = uart_queue;
 800a900:	4a06      	ldr	r2, [pc, #24]	; (800a91c <task_Powerstep01_Init+0x2c>)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	6013      	str	r3, [r2, #0]
	self_state = TASK_S_RUN;
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <task_Powerstep01_Init+0x30>)
 800a908:	2202      	movs	r2, #2
 800a90a:	701a      	strb	r2, [r3, #0]
	//initMotor();
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	200008b8 	.word	0x200008b8
 800a91c:	200008bc 	.word	0x200008bc
 800a920:	200008b6 	.word	0x200008b6

0800a924 <initMotor>:
void initMotor()
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b09a      	sub	sp, #104	; 0x68
 800a928:	af00      	add	r7, sp, #0
#ifdef CURRENT_MODE
	/* Initialization parameters for current mode */
	union powerstep01_Init_u initDeviceParameters =
 800a92a:	1d3b      	adds	r3, r7, #4
 800a92c:	2264      	movs	r2, #100	; 0x64
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f000 faa1 	bl	800ae78 <memset>
 800a936:	2308      	movs	r3, #8
 800a938:	713b      	strb	r3, [r7, #4]
 800a93a:	4b27      	ldr	r3, [pc, #156]	; (800a9d8 <initMotor+0xb4>)
 800a93c:	60bb      	str	r3, [r7, #8]
 800a93e:	4b26      	ldr	r3, [pc, #152]	; (800a9d8 <initMotor+0xb4>)
 800a940:	60fb      	str	r3, [r7, #12]
 800a942:	4b26      	ldr	r3, [pc, #152]	; (800a9dc <initMotor+0xb8>)
 800a944:	613b      	str	r3, [r7, #16]
 800a946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a94a:	833b      	strh	r3, [r7, #24]
 800a94c:	4b24      	ldr	r3, [pc, #144]	; (800a9e0 <initMotor+0xbc>)
 800a94e:	61fb      	str	r3, [r7, #28]
 800a950:	4b24      	ldr	r3, [pc, #144]	; (800a9e4 <initMotor+0xc0>)
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
 800a954:	2301      	movs	r3, #1
 800a956:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a95a:	23ef      	movs	r3, #239	; 0xef
 800a95c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a960:	23c0      	movs	r3, #192	; 0xc0
 800a962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a966:	2303      	movs	r3, #3
 800a968:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a96c:	2340      	movs	r3, #64	; 0x40
 800a96e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a972:	4b1d      	ldr	r3, [pc, #116]	; (800a9e8 <initMotor+0xc4>)
 800a974:	637b      	str	r3, [r7, #52]	; 0x34
 800a976:	4b1c      	ldr	r3, [pc, #112]	; (800a9e8 <initMotor+0xc4>)
 800a978:	63bb      	str	r3, [r7, #56]	; 0x38
 800a97a:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <initMotor+0xc4>)
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a97e:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <initMotor+0xc4>)
 800a980:	643b      	str	r3, [r7, #64]	; 0x40
 800a982:	2330      	movs	r3, #48	; 0x30
 800a984:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a988:	2305      	movs	r3, #5
 800a98a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a98e:	4b17      	ldr	r3, [pc, #92]	; (800a9ec <initMotor+0xc8>)
 800a990:	64bb      	str	r3, [r7, #72]	; 0x48
 800a992:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <initMotor+0xcc>)
 800a994:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a996:	2308      	movs	r3, #8
 800a998:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800a99c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9a0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800a9a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a9a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					POWERSTEP01_CONFIG_PWM_MUL_1, // PWM Frequency Integer Multiplier, enum powerstep01_ConfigFPwmDec_t
	};
#endif //VOLTAGE_MODE

	/* Set the Powerstep01 library to use 1 device */
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 1);
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	f7f9 fff4 	bl	800499c <BSP_MotorControl_SetNbDevices>
	/* whose Id is n-1.                                                         */
	/* Uncomment the call to BSP_MotorControl_Init below to initialize the      */
	/* device with the union declared in the the main.c file and comment the    */
	/* subsequent call having the NULL pointer                                  */
	//BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, &initDeviceParameters);
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	2001      	movs	r0, #1
 800a9b8:	f7f9 fee2 	bl	8004780 <BSP_MotorControl_Init>
	/* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
	BSP_MotorControl_AttachFlagInterrupt(FlagInterruptHandler);
 800a9bc:	480d      	ldr	r0, [pc, #52]	; (800a9f4 <initMotor+0xd0>)
 800a9be:	f7f9 fe85 	bl	80046cc <BSP_MotorControl_AttachFlagInterrupt>
	/* Attach the function MyBusyInterruptHandler (defined below) to the busy interrupt */
	BSP_MotorControl_AttachBusyInterrupt(BusyInterruptHandler);
 800a9c2:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <initMotor+0xd4>)
 800a9c4:	f7f9 fea0 	bl	8004708 <BSP_MotorControl_AttachBusyInterrupt>
	/* Attach the function Error_Handler (defined below) to the error Handler*/
	BSP_MotorControl_AttachErrorHandler(ErrorHandler);
 800a9c8:	480c      	ldr	r0, [pc, #48]	; (800a9fc <initMotor+0xd8>)
 800a9ca:	f7f9 fe61 	bl	8004690 <BSP_MotorControl_AttachErrorHandler>
}
 800a9ce:	bf00      	nop
 800a9d0:	3768      	adds	r7, #104	; 0x68
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	44118000 	.word	0x44118000
 800a9dc:	43f40000 	.word	0x43f40000
 800a9e0:	437428f6 	.word	0x437428f6
 800a9e4:	438ca000 	.word	0x438ca000
 800a9e8:	41a00000 	.word	0x41a00000
 800a9ec:	40400000 	.word	0x40400000
 800a9f0:	41a80000 	.word	0x41a80000
 800a9f4:	0800aa01 	.word	0x0800aa01
 800a9f8:	0800aa0f 	.word	0x0800aa0f
 800a9fc:	0800aa1d 	.word	0x0800aa1d

0800aa00 <FlagInterruptHandler>:
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
static void FlagInterruptHandler(void)
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
	//    //overcurrent detection
	//    uart_buff_size = (uint8_t) sprintf((char *) uart_buff, "Stall on bridge B\n\r");
	//    HAL_UART_Transmit(&huart3, uart_buff, uart_buff_size, 5000);
	//  }

}
 800aa04:	bf00      	nop
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <BusyInterruptHandler>:
 * @brief  This function is the User handler for the busy interrupt
 * @param  None
 * @retval None
 */
static void BusyInterruptHandler(void)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	af00      	add	r7, sp, #0

	if (BSP_MotorControl_CheckBusyHw())
 800aa12:	f7f9 ff7f 	bl	8004914 <BSP_MotorControl_CheckBusyHw>
	}
	else
	{
		/* To be customized (for example Switch off a LED) */
	}
}
 800aa16:	bf00      	nop
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <ErrorHandler>:
 * @brief  This function is executed in case of error occurrence.
 * @param[in] error Number of the error
 * @retval None
 */
static void ErrorHandler(uint16_t error)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	80fb      	strh	r3, [r7, #6]
	/* Backup error number */
	gLastError = error;
 800aa26:	4a02      	ldr	r2, [pc, #8]	; (800aa30 <ErrorHandler+0x14>)
 800aa28:	88fb      	ldrh	r3, [r7, #6]
 800aa2a:	8013      	strh	r3, [r2, #0]

	/* Infinite loop */
	while(1)
 800aa2c:	e7fe      	b.n	800aa2c <ErrorHandler+0x10>
 800aa2e:	bf00      	nop
 800aa30:	200008c0 	.word	0x200008c0

0800aa34 <goForward>:
	{
	}
}

void goForward(uint32_t N_STEP){
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	BSP_MotorControl_Move(0, FORWARD, N_STEP);
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	2101      	movs	r1, #1
 800aa40:	2000      	movs	r0, #0
 800aa42:	f7f9 ff43 	bl	80048cc <BSP_MotorControl_Move>
	//BSP_MotorControl_WaitWhileActive(0);
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <goBackward>:

void goBackward(uint32_t N_STEP){
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
	BSP_MotorControl_Move(0, BACKWARD, N_STEP);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	2100      	movs	r1, #0
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	f7f9 ff36 	bl	80048cc <BSP_MotorControl_Move>
	//BSP_MotorControl_WaitWhileActive(0);
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <goTo>:

void goTo(int32_t POSITION){
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	BSP_MotorControl_GoTo(0, POSITION);
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	2000      	movs	r0, #0
 800aa74:	f7f9 fee8 	bl	8004848 <BSP_MotorControl_GoTo>
	//BSP_MotorControl_WaitWhileActive(0);
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <goHome>:

void goHome(){
 800aa80:	b580      	push	{r7, lr}
 800aa82:	af00      	add	r7, sp, #0
	BSP_MotorControl_GoHome(0);
 800aa84:	2000      	movs	r0, #0
 800aa86:	f7f9 febf 	bl	8004808 <BSP_MotorControl_GoHome>
	//BSP_MotorControl_WaitWhileActive(0);
}
 800aa8a:	bf00      	nop
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <getPosition>:


int32_t getPosition(){
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	af00      	add	r7, sp, #0
	return BSP_MotorControl_GetPosition(0);
 800aa92:	2000      	movs	r0, #0
 800aa94:	f7f9 fe94 	bl	80047c0 <BSP_MotorControl_GetPosition>
 800aa98:	4603      	mov	r3, r0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <task_UART>:
		" GET POS: ps+000000\n\r"
		" GO TO: gt+123456\n\r"
		" GO HOME: gh+000000\n\r"
		;

void task_UART(uint32_t interval){
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
	self = _tx_thread_identify();
 800aaa8:	f7fe fda0 	bl	80095ec <_tx_thread_identify>
 800aaac:	4603      	mov	r3, r0
 800aaae:	4a20      	ldr	r2, [pc, #128]	; (800ab30 <task_UART+0x90>)
 800aab0:	6013      	str	r3, [r2, #0]
	memset((uint8_t *)rx_buff, 0x0, sizeof(char)*RX_BUFF_SIZE);
 800aab2:	220a      	movs	r2, #10
 800aab4:	2100      	movs	r1, #0
 800aab6:	481f      	ldr	r0, [pc, #124]	; (800ab34 <task_UART+0x94>)
 800aab8:	f000 f9de 	bl	800ae78 <memset>
	memset((uint8_t*)tx_buff, (uint8_t)0x0, sizeof(char)*TX_BUFF_SIZE);
 800aabc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aac0:	2100      	movs	r1, #0
 800aac2:	481d      	ldr	r0, [pc, #116]	; (800ab38 <task_UART+0x98>)
 800aac4:	f000 f9d8 	bl	800ae78 <memset>
	while(1){
		tx_queue_receive(ptr_uart_cmd_queue,&uart_msg,TX_WAIT_FOREVER);
 800aac8:	4b1c      	ldr	r3, [pc, #112]	; (800ab3c <task_UART+0x9c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aad0:	491b      	ldr	r1, [pc, #108]	; (800ab40 <task_UART+0xa0>)
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fd16 	bl	800a504 <_txe_queue_receive>
		if(uart_msg.cmd == MOTOR_GET_POS){
 800aad8:	4b19      	ldr	r3, [pc, #100]	; (800ab40 <task_UART+0xa0>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d111      	bne.n	800ab04 <task_UART+0x64>
			sprintf(msg_buff, "Actual motor position %lu \r\n", uart_msg.pos);
 800aae0:	4b17      	ldr	r3, [pc, #92]	; (800ab40 <task_UART+0xa0>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	461a      	mov	r2, r3
 800aae6:	4917      	ldr	r1, [pc, #92]	; (800ab44 <task_UART+0xa4>)
 800aae8:	4817      	ldr	r0, [pc, #92]	; (800ab48 <task_UART+0xa8>)
 800aaea:	f000 fe37 	bl	800b75c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_buff, strlen(msg_buff), 100);
 800aaee:	4816      	ldr	r0, [pc, #88]	; (800ab48 <task_UART+0xa8>)
 800aaf0:	f7f5 fc9c 	bl	800042c <strlen>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	2364      	movs	r3, #100	; 0x64
 800aafa:	4913      	ldr	r1, [pc, #76]	; (800ab48 <task_UART+0xa8>)
 800aafc:	4813      	ldr	r0, [pc, #76]	; (800ab4c <task_UART+0xac>)
 800aafe:	f7fc ffd9 	bl	8007ab4 <HAL_UART_Transmit>
 800ab02:	e7e1      	b.n	800aac8 <task_UART+0x28>
		}else{
			if(received == 1){
 800ab04:	4b12      	ldr	r3, [pc, #72]	; (800ab50 <task_UART+0xb0>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d10d      	bne.n	800ab28 <task_UART+0x88>
				memset((uint8_t *) rx_buff, 0x0, sizeof(char)*RX_BUFF_SIZE);
 800ab0c:	220a      	movs	r2, #10
 800ab0e:	2100      	movs	r1, #0
 800ab10:	4808      	ldr	r0, [pc, #32]	; (800ab34 <task_UART+0x94>)
 800ab12:	f000 f9b1 	bl	800ae78 <memset>
				HAL_UART_Receive_IT(&huart2, (uint8_t *) rx_buff, RX_BUFF_SIZE);
 800ab16:	220a      	movs	r2, #10
 800ab18:	4906      	ldr	r1, [pc, #24]	; (800ab34 <task_UART+0x94>)
 800ab1a:	480c      	ldr	r0, [pc, #48]	; (800ab4c <task_UART+0xac>)
 800ab1c:	f7fd f8a1 	bl	8007c62 <HAL_UART_Receive_IT>
				received = 0;
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <task_UART+0xb0>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	e7cf      	b.n	800aac8 <task_UART+0x28>
			}
			else{
				tx_thread_sleep(interval);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7fe fe05 	bl	8009738 <_tx_thread_sleep>
		tx_queue_receive(ptr_uart_cmd_queue,&uart_msg,TX_WAIT_FOREVER);
 800ab2e:	e7cb      	b.n	800aac8 <task_UART+0x28>
 800ab30:	20003054 	.word	0x20003054
 800ab34:	20003058 	.word	0x20003058
 800ab38:	20003164 	.word	0x20003164
 800ab3c:	200008c8 	.word	0x200008c8
 800ab40:	2000304c 	.word	0x2000304c
 800ab44:	0800dd80 	.word	0x0800dd80
 800ab48:	20003068 	.word	0x20003068
 800ab4c:	200029b8 	.word	0x200029b8
 800ab50:	200008cc 	.word	0x200008cc

0800ab54 <task_UART_Init>:
	//			tx_thread_sleep(interval);
	//		}
	//	}
}

void task_UART_Init(TX_QUEUE *motor_queue, TX_QUEUE *uart_queue){
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	ptr_motor_queue = motor_queue;
 800ab5e:	4a14      	ldr	r2, [pc, #80]	; (800abb0 <task_UART_Init+0x5c>)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6013      	str	r3, [r2, #0]
	ptr_uart_cmd_queue = uart_queue;
 800ab64:	4a13      	ldr	r2, [pc, #76]	; (800abb4 <task_UART_Init+0x60>)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	6013      	str	r3, [r2, #0]
	tx_buff_size = (uint8_t) sprintf((char *) tx_buff, "Ready\n\r");
 800ab6a:	4913      	ldr	r1, [pc, #76]	; (800abb8 <task_UART_Init+0x64>)
 800ab6c:	4813      	ldr	r0, [pc, #76]	; (800abbc <task_UART_Init+0x68>)
 800ab6e:	f000 fdf5 	bl	800b75c <siprintf>
 800ab72:	4603      	mov	r3, r0
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <task_UART_Init+0x6c>)
 800ab78:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, tx_buff_size, 100);
 800ab7a:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <task_UART_Init+0x6c>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	2364      	movs	r3, #100	; 0x64
 800ab82:	490e      	ldr	r1, [pc, #56]	; (800abbc <task_UART_Init+0x68>)
 800ab84:	480f      	ldr	r0, [pc, #60]	; (800abc4 <task_UART_Init+0x70>)
 800ab86:	f7fc ff95 	bl	8007ab4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)options, strlen((const char *)options), 100);
 800ab8a:	480f      	ldr	r0, [pc, #60]	; (800abc8 <task_UART_Init+0x74>)
 800ab8c:	f7f5 fc4e 	bl	800042c <strlen>
 800ab90:	4603      	mov	r3, r0
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	2364      	movs	r3, #100	; 0x64
 800ab96:	490c      	ldr	r1, [pc, #48]	; (800abc8 <task_UART_Init+0x74>)
 800ab98:	480a      	ldr	r0, [pc, #40]	; (800abc4 <task_UART_Init+0x70>)
 800ab9a:	f7fc ff8b 	bl	8007ab4 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buff, RX_BUFF_SIZE);
 800ab9e:	220a      	movs	r2, #10
 800aba0:	490a      	ldr	r1, [pc, #40]	; (800abcc <task_UART_Init+0x78>)
 800aba2:	4808      	ldr	r0, [pc, #32]	; (800abc4 <task_UART_Init+0x70>)
 800aba4:	f7fd f85d 	bl	8007c62 <HAL_UART_Receive_IT>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	200008c4 	.word	0x200008c4
 800abb4:	200008c8 	.word	0x200008c8
 800abb8:	0800dda0 	.word	0x0800dda0
 800abbc:	20003164 	.word	0x20003164
 800abc0:	20003297 	.word	0x20003297
 800abc4:	200029b8 	.word	0x200029b8
 800abc8:	20000174 	.word	0x20000174
 800abcc:	20003058 	.word	0x20003058

0800abd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
	ULONG retui = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]
	received = 1;
 800abdc:	4b17      	ldr	r3, [pc, #92]	; (800ac3c <HAL_UART_RxCpltCallback+0x6c>)
 800abde:	2201      	movs	r2, #1
 800abe0:	701a      	strb	r2, [r3, #0]
	build_cmd();
 800abe2:	f000 f865 	bl	800acb0 <build_cmd>
	retui = parse_cmd();
 800abe6:	f000 f87f 	bl	800ace8 <parse_cmd>
 800abea:	60f8      	str	r0, [r7, #12]
	if (retui != TX_SUCCESS)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d006      	beq.n	800ac00 <HAL_UART_RxCpltCallback+0x30>
	{
		sprintf(tx_buff, "[echo]%s\n\r[retui]%lu\n\r", rx_buff, retui);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4a12      	ldr	r2, [pc, #72]	; (800ac40 <HAL_UART_RxCpltCallback+0x70>)
 800abf6:	4913      	ldr	r1, [pc, #76]	; (800ac44 <HAL_UART_RxCpltCallback+0x74>)
 800abf8:	4813      	ldr	r0, [pc, #76]	; (800ac48 <HAL_UART_RxCpltCallback+0x78>)
 800abfa:	f000 fdaf 	bl	800b75c <siprintf>
 800abfe:	e004      	b.n	800ac0a <HAL_UART_RxCpltCallback+0x3a>
	}
	else
	{
		sprintf(tx_buff, " [echo] %s \n\r",rx_buff);
 800ac00:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <HAL_UART_RxCpltCallback+0x70>)
 800ac02:	4912      	ldr	r1, [pc, #72]	; (800ac4c <HAL_UART_RxCpltCallback+0x7c>)
 800ac04:	4810      	ldr	r0, [pc, #64]	; (800ac48 <HAL_UART_RxCpltCallback+0x78>)
 800ac06:	f000 fda9 	bl	800b75c <siprintf>
	}
	if(HAL_UART_Transmit_IT(huart2, (uint8_t*)tx_buff, strlen(tx_buff))!= HAL_OK)
 800ac0a:	480f      	ldr	r0, [pc, #60]	; (800ac48 <HAL_UART_RxCpltCallback+0x78>)
 800ac0c:	f7f5 fc0e 	bl	800042c <strlen>
 800ac10:	4603      	mov	r3, r0
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	461a      	mov	r2, r3
 800ac16:	490c      	ldr	r1, [pc, #48]	; (800ac48 <HAL_UART_RxCpltCallback+0x78>)
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7fc ffdd 	bl	8007bd8 <HAL_UART_Transmit_IT>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <HAL_UART_RxCpltCallback+0x58>
	{
		Error_Handler();
 800ac24:	f7f6 fcd9 	bl	80015da <Error_Handler>
	}
	memset((uint8_t *) rx_buff, 0x0, sizeof(char)*RX_BUFF_SIZE);
 800ac28:	220a      	movs	r2, #10
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4804      	ldr	r0, [pc, #16]	; (800ac40 <HAL_UART_RxCpltCallback+0x70>)
 800ac2e:	f000 f923 	bl	800ae78 <memset>
	//memset((uint8_t*)tx_buff, (uint8_t)0x0, sizeof(char)*TX_BUFF_SIZE);
}
 800ac32:	bf00      	nop
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	200008cc 	.word	0x200008cc
 800ac40:	20003058 	.word	0x20003058
 800ac44:	0800dda8 	.word	0x0800dda8
 800ac48:	20003164 	.word	0x20003164
 800ac4c:	0800ddc0 	.word	0x0800ddc0

0800ac50 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart2)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
	//Error_Handler();
	HAL_UART_DeInit(huart2);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7fc fefc 	bl	8007a56 <HAL_UART_DeInit>
	HAL_Delay(50);
 800ac5e:	2032      	movs	r0, #50	; 0x32
 800ac60:	f7f9 ff6c 	bl	8004b3c <HAL_Delay>
	HAL_UART_Init(huart2);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7fc fea9 	bl	80079bc <HAL_UART_Init>
	HAL_Delay(50);
 800ac6a:	2032      	movs	r0, #50	; 0x32
 800ac6c:	f7f9 ff66 	bl	8004b3c <HAL_Delay>
	tx_buff_size = (uint8_t) sprintf((char *) tx_buff, "-- UART RESET --\n\r");
 800ac70:	490c      	ldr	r1, [pc, #48]	; (800aca4 <HAL_UART_ErrorCallback+0x54>)
 800ac72:	480d      	ldr	r0, [pc, #52]	; (800aca8 <HAL_UART_ErrorCallback+0x58>)
 800ac74:	f000 fd72 	bl	800b75c <siprintf>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	4b0b      	ldr	r3, [pc, #44]	; (800acac <HAL_UART_ErrorCallback+0x5c>)
 800ac7e:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Transmit_IT(huart2, (uint8_t*)tx_buff, tx_buff_size)!= HAL_OK)
 800ac80:	4b0a      	ldr	r3, [pc, #40]	; (800acac <HAL_UART_ErrorCallback+0x5c>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	461a      	mov	r2, r3
 800ac88:	4907      	ldr	r1, [pc, #28]	; (800aca8 <HAL_UART_ErrorCallback+0x58>)
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7fc ffa4 	bl	8007bd8 <HAL_UART_Transmit_IT>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <HAL_UART_ErrorCallback+0x4a>
	{
		Error_Handler();
 800ac96:	f7f6 fca0 	bl	80015da <Error_Handler>
	}
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	0800ddd0 	.word	0x0800ddd0
 800aca8:	20003164 	.word	0x20003164
 800acac:	20003297 	.word	0x20003297

0800acb0 <build_cmd>:

void build_cmd(){
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
	strncpy(motor_cmd, rx_buff, 2);
 800acb4:	2202      	movs	r2, #2
 800acb6:	4908      	ldr	r1, [pc, #32]	; (800acd8 <build_cmd+0x28>)
 800acb8:	4808      	ldr	r0, [pc, #32]	; (800acdc <build_cmd+0x2c>)
 800acba:	f000 fd6f 	bl	800b79c <strncpy>
	motor_cmd[2] = '\0';
 800acbe:	4b07      	ldr	r3, [pc, #28]	; (800acdc <build_cmd+0x2c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	709a      	strb	r2, [r3, #2]
	strncpy(cmd_params, &rx_buff[3], 6);
 800acc4:	2206      	movs	r2, #6
 800acc6:	4906      	ldr	r1, [pc, #24]	; (800ace0 <build_cmd+0x30>)
 800acc8:	4806      	ldr	r0, [pc, #24]	; (800ace4 <build_cmd+0x34>)
 800acca:	f000 fd67 	bl	800b79c <strncpy>
	cmd_params[6] = '\0';
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <build_cmd+0x34>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	719a      	strb	r2, [r3, #6]
}
 800acd4:	bf00      	nop
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	20003058 	.word	0x20003058
 800acdc:	20003064 	.word	0x20003064
 800ace0:	2000305b 	.word	0x2000305b
 800ace4:	20003290 	.word	0x20003290

0800ace8 <parse_cmd>:

ULONG parse_cmd(){
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
	ULONG ret_val = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	607b      	str	r3, [r7, #4]
	if(strcmp(motor_cmd, "fw")==0){
 800acf2:	493f      	ldr	r1, [pc, #252]	; (800adf0 <parse_cmd+0x108>)
 800acf4:	483f      	ldr	r0, [pc, #252]	; (800adf4 <parse_cmd+0x10c>)
 800acf6:	f7f5 fb8f 	bl	8000418 <strcmp>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <parse_cmd+0x2e>
		msg.cmd = MOTOR_MOVE_FW;
 800ad00:	4b3d      	ldr	r3, [pc, #244]	; (800adf8 <parse_cmd+0x110>)
 800ad02:	2202      	movs	r2, #2
 800ad04:	701a      	strb	r2, [r3, #0]
		msg.val = atoi(cmd_params);
 800ad06:	483d      	ldr	r0, [pc, #244]	; (800adfc <parse_cmd+0x114>)
 800ad08:	f000 f888 	bl	800ae1c <atoi>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	4b39      	ldr	r3, [pc, #228]	; (800adf8 <parse_cmd+0x110>)
 800ad12:	805a      	strh	r2, [r3, #2]
 800ad14:	e05d      	b.n	800add2 <parse_cmd+0xea>
	}else if((strcmp(motor_cmd, "bw")==0)){
 800ad16:	493a      	ldr	r1, [pc, #232]	; (800ae00 <parse_cmd+0x118>)
 800ad18:	4836      	ldr	r0, [pc, #216]	; (800adf4 <parse_cmd+0x10c>)
 800ad1a:	f7f5 fb7d 	bl	8000418 <strcmp>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <parse_cmd+0x52>
		msg.cmd = MOTOR_MOVE_FW;
 800ad24:	4b34      	ldr	r3, [pc, #208]	; (800adf8 <parse_cmd+0x110>)
 800ad26:	2202      	movs	r2, #2
 800ad28:	701a      	strb	r2, [r3, #0]
		msg.val = atoi(cmd_params);
 800ad2a:	4834      	ldr	r0, [pc, #208]	; (800adfc <parse_cmd+0x114>)
 800ad2c:	f000 f876 	bl	800ae1c <atoi>
 800ad30:	4603      	mov	r3, r0
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	4b30      	ldr	r3, [pc, #192]	; (800adf8 <parse_cmd+0x110>)
 800ad36:	805a      	strh	r2, [r3, #2]
 800ad38:	e04b      	b.n	800add2 <parse_cmd+0xea>
	}else if((strcmp(motor_cmd, "hd")==0)){
 800ad3a:	4932      	ldr	r1, [pc, #200]	; (800ae04 <parse_cmd+0x11c>)
 800ad3c:	482d      	ldr	r0, [pc, #180]	; (800adf4 <parse_cmd+0x10c>)
 800ad3e:	f7f5 fb6b 	bl	8000418 <strcmp>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <parse_cmd+0x6e>
		msg.cmd = MOTOR_HOLD;
 800ad48:	4b2b      	ldr	r3, [pc, #172]	; (800adf8 <parse_cmd+0x110>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	701a      	strb	r2, [r3, #0]
		msg.val = 0;
 800ad4e:	4b2a      	ldr	r3, [pc, #168]	; (800adf8 <parse_cmd+0x110>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	805a      	strh	r2, [r3, #2]
 800ad54:	e03d      	b.n	800add2 <parse_cmd+0xea>
	}else if((strcmp(motor_cmd, "st")==0)){
 800ad56:	492c      	ldr	r1, [pc, #176]	; (800ae08 <parse_cmd+0x120>)
 800ad58:	4826      	ldr	r0, [pc, #152]	; (800adf4 <parse_cmd+0x10c>)
 800ad5a:	f7f5 fb5d 	bl	8000418 <strcmp>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <parse_cmd+0x8a>
		msg.cmd = MOTOR_STOP;
 800ad64:	4b24      	ldr	r3, [pc, #144]	; (800adf8 <parse_cmd+0x110>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]
		msg.val = 0;
 800ad6a:	4b23      	ldr	r3, [pc, #140]	; (800adf8 <parse_cmd+0x110>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	805a      	strh	r2, [r3, #2]
 800ad70:	e02f      	b.n	800add2 <parse_cmd+0xea>
	}else if(strcmp(motor_cmd, "ps")==0){
 800ad72:	4926      	ldr	r1, [pc, #152]	; (800ae0c <parse_cmd+0x124>)
 800ad74:	481f      	ldr	r0, [pc, #124]	; (800adf4 <parse_cmd+0x10c>)
 800ad76:	f7f5 fb4f 	bl	8000418 <strcmp>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d106      	bne.n	800ad8e <parse_cmd+0xa6>
		msg.cmd = MOTOR_GET_POS;
 800ad80:	4b1d      	ldr	r3, [pc, #116]	; (800adf8 <parse_cmd+0x110>)
 800ad82:	2204      	movs	r2, #4
 800ad84:	701a      	strb	r2, [r3, #0]
		msg.val = 0;
 800ad86:	4b1c      	ldr	r3, [pc, #112]	; (800adf8 <parse_cmd+0x110>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	805a      	strh	r2, [r3, #2]
 800ad8c:	e021      	b.n	800add2 <parse_cmd+0xea>
	}else if((strcmp(motor_cmd, "gt")==0)){
 800ad8e:	4920      	ldr	r1, [pc, #128]	; (800ae10 <parse_cmd+0x128>)
 800ad90:	4818      	ldr	r0, [pc, #96]	; (800adf4 <parse_cmd+0x10c>)
 800ad92:	f7f5 fb41 	bl	8000418 <strcmp>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <parse_cmd+0xca>
		msg.cmd = MOTOR_GO_TO;
 800ad9c:	4b16      	ldr	r3, [pc, #88]	; (800adf8 <parse_cmd+0x110>)
 800ad9e:	2205      	movs	r2, #5
 800ada0:	701a      	strb	r2, [r3, #0]
		msg.val = atoi(cmd_params);
 800ada2:	4816      	ldr	r0, [pc, #88]	; (800adfc <parse_cmd+0x114>)
 800ada4:	f000 f83a 	bl	800ae1c <atoi>
 800ada8:	4603      	mov	r3, r0
 800adaa:	b29a      	uxth	r2, r3
 800adac:	4b12      	ldr	r3, [pc, #72]	; (800adf8 <parse_cmd+0x110>)
 800adae:	805a      	strh	r2, [r3, #2]
 800adb0:	e00f      	b.n	800add2 <parse_cmd+0xea>
	}else if((strcmp(motor_cmd, "gh")==0)){
 800adb2:	4918      	ldr	r1, [pc, #96]	; (800ae14 <parse_cmd+0x12c>)
 800adb4:	480f      	ldr	r0, [pc, #60]	; (800adf4 <parse_cmd+0x10c>)
 800adb6:	f7f5 fb2f 	bl	8000418 <strcmp>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <parse_cmd+0xe6>
		msg.cmd = MOTOR_GO_HOME;
 800adc0:	4b0d      	ldr	r3, [pc, #52]	; (800adf8 <parse_cmd+0x110>)
 800adc2:	2206      	movs	r2, #6
 800adc4:	701a      	strb	r2, [r3, #0]
		msg.val = 0;
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <parse_cmd+0x110>)
 800adc8:	2200      	movs	r2, #0
 800adca:	805a      	strh	r2, [r3, #2]
 800adcc:	e001      	b.n	800add2 <parse_cmd+0xea>
	}else{
		ret_val = 1;
 800adce:	2301      	movs	r3, #1
 800add0:	607b      	str	r3, [r7, #4]
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong command!\r\n", strlen("Wrong command!\r\n"),100);
	}
	if(ret_val == 0){
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d106      	bne.n	800ade6 <parse_cmd+0xfe>
		tx_queue_send(ptr_motor_queue, &msg, TX_NO_WAIT);
 800add8:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <parse_cmd+0x130>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2200      	movs	r2, #0
 800adde:	4906      	ldr	r1, [pc, #24]	; (800adf8 <parse_cmd+0x110>)
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7ff fbd9 	bl	800a598 <_txe_queue_send>
	}
	return ret_val;
 800ade6:	687b      	ldr	r3, [r7, #4]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	0800dde4 	.word	0x0800dde4
 800adf4:	20003064 	.word	0x20003064
 800adf8:	200032bc 	.word	0x200032bc
 800adfc:	20003290 	.word	0x20003290
 800ae00:	0800dde8 	.word	0x0800dde8
 800ae04:	0800ddec 	.word	0x0800ddec
 800ae08:	0800ddf0 	.word	0x0800ddf0
 800ae0c:	0800ddf4 	.word	0x0800ddf4
 800ae10:	0800ddf8 	.word	0x0800ddf8
 800ae14:	0800ddfc 	.word	0x0800ddfc
 800ae18:	200008c4 	.word	0x200008c4

0800ae1c <atoi>:
 800ae1c:	220a      	movs	r2, #10
 800ae1e:	2100      	movs	r1, #0
 800ae20:	f000 bd54 	b.w	800b8cc <strtol>

0800ae24 <__errno>:
 800ae24:	4b01      	ldr	r3, [pc, #4]	; (800ae2c <__errno+0x8>)
 800ae26:	6818      	ldr	r0, [r3, #0]
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	2000026c 	.word	0x2000026c

0800ae30 <__libc_init_array>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	4d0d      	ldr	r5, [pc, #52]	; (800ae68 <__libc_init_array+0x38>)
 800ae34:	4c0d      	ldr	r4, [pc, #52]	; (800ae6c <__libc_init_array+0x3c>)
 800ae36:	1b64      	subs	r4, r4, r5
 800ae38:	10a4      	asrs	r4, r4, #2
 800ae3a:	2600      	movs	r6, #0
 800ae3c:	42a6      	cmp	r6, r4
 800ae3e:	d109      	bne.n	800ae54 <__libc_init_array+0x24>
 800ae40:	4d0b      	ldr	r5, [pc, #44]	; (800ae70 <__libc_init_array+0x40>)
 800ae42:	4c0c      	ldr	r4, [pc, #48]	; (800ae74 <__libc_init_array+0x44>)
 800ae44:	f002 ff56 	bl	800dcf4 <_init>
 800ae48:	1b64      	subs	r4, r4, r5
 800ae4a:	10a4      	asrs	r4, r4, #2
 800ae4c:	2600      	movs	r6, #0
 800ae4e:	42a6      	cmp	r6, r4
 800ae50:	d105      	bne.n	800ae5e <__libc_init_array+0x2e>
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae58:	4798      	blx	r3
 800ae5a:	3601      	adds	r6, #1
 800ae5c:	e7ee      	b.n	800ae3c <__libc_init_array+0xc>
 800ae5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae62:	4798      	blx	r3
 800ae64:	3601      	adds	r6, #1
 800ae66:	e7f2      	b.n	800ae4e <__libc_init_array+0x1e>
 800ae68:	0800e204 	.word	0x0800e204
 800ae6c:	0800e204 	.word	0x0800e204
 800ae70:	0800e204 	.word	0x0800e204
 800ae74:	0800e208 	.word	0x0800e208

0800ae78 <memset>:
 800ae78:	4402      	add	r2, r0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d100      	bne.n	800ae82 <memset+0xa>
 800ae80:	4770      	bx	lr
 800ae82:	f803 1b01 	strb.w	r1, [r3], #1
 800ae86:	e7f9      	b.n	800ae7c <memset+0x4>

0800ae88 <__cvt>:
 800ae88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	ec55 4b10 	vmov	r4, r5, d0
 800ae90:	2d00      	cmp	r5, #0
 800ae92:	460e      	mov	r6, r1
 800ae94:	4619      	mov	r1, r3
 800ae96:	462b      	mov	r3, r5
 800ae98:	bfbb      	ittet	lt
 800ae9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae9e:	461d      	movlt	r5, r3
 800aea0:	2300      	movge	r3, #0
 800aea2:	232d      	movlt	r3, #45	; 0x2d
 800aea4:	700b      	strb	r3, [r1, #0]
 800aea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aea8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aeac:	4691      	mov	r9, r2
 800aeae:	f023 0820 	bic.w	r8, r3, #32
 800aeb2:	bfbc      	itt	lt
 800aeb4:	4622      	movlt	r2, r4
 800aeb6:	4614      	movlt	r4, r2
 800aeb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aebc:	d005      	beq.n	800aeca <__cvt+0x42>
 800aebe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aec2:	d100      	bne.n	800aec6 <__cvt+0x3e>
 800aec4:	3601      	adds	r6, #1
 800aec6:	2102      	movs	r1, #2
 800aec8:	e000      	b.n	800aecc <__cvt+0x44>
 800aeca:	2103      	movs	r1, #3
 800aecc:	ab03      	add	r3, sp, #12
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	ab02      	add	r3, sp, #8
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	ec45 4b10 	vmov	d0, r4, r5
 800aed8:	4653      	mov	r3, sl
 800aeda:	4632      	mov	r2, r6
 800aedc:	f000 fd8c 	bl	800b9f8 <_dtoa_r>
 800aee0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aee4:	4607      	mov	r7, r0
 800aee6:	d102      	bne.n	800aeee <__cvt+0x66>
 800aee8:	f019 0f01 	tst.w	r9, #1
 800aeec:	d022      	beq.n	800af34 <__cvt+0xac>
 800aeee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aef2:	eb07 0906 	add.w	r9, r7, r6
 800aef6:	d110      	bne.n	800af1a <__cvt+0x92>
 800aef8:	783b      	ldrb	r3, [r7, #0]
 800aefa:	2b30      	cmp	r3, #48	; 0x30
 800aefc:	d10a      	bne.n	800af14 <__cvt+0x8c>
 800aefe:	2200      	movs	r2, #0
 800af00:	2300      	movs	r3, #0
 800af02:	4620      	mov	r0, r4
 800af04:	4629      	mov	r1, r5
 800af06:	f7f5 ff0f 	bl	8000d28 <__aeabi_dcmpeq>
 800af0a:	b918      	cbnz	r0, 800af14 <__cvt+0x8c>
 800af0c:	f1c6 0601 	rsb	r6, r6, #1
 800af10:	f8ca 6000 	str.w	r6, [sl]
 800af14:	f8da 3000 	ldr.w	r3, [sl]
 800af18:	4499      	add	r9, r3
 800af1a:	2200      	movs	r2, #0
 800af1c:	2300      	movs	r3, #0
 800af1e:	4620      	mov	r0, r4
 800af20:	4629      	mov	r1, r5
 800af22:	f7f5 ff01 	bl	8000d28 <__aeabi_dcmpeq>
 800af26:	b108      	cbz	r0, 800af2c <__cvt+0xa4>
 800af28:	f8cd 900c 	str.w	r9, [sp, #12]
 800af2c:	2230      	movs	r2, #48	; 0x30
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	454b      	cmp	r3, r9
 800af32:	d307      	bcc.n	800af44 <__cvt+0xbc>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af38:	1bdb      	subs	r3, r3, r7
 800af3a:	4638      	mov	r0, r7
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	b004      	add	sp, #16
 800af40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af44:	1c59      	adds	r1, r3, #1
 800af46:	9103      	str	r1, [sp, #12]
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	e7f0      	b.n	800af2e <__cvt+0xa6>

0800af4c <__exponent>:
 800af4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af4e:	4603      	mov	r3, r0
 800af50:	2900      	cmp	r1, #0
 800af52:	bfb8      	it	lt
 800af54:	4249      	neglt	r1, r1
 800af56:	f803 2b02 	strb.w	r2, [r3], #2
 800af5a:	bfb4      	ite	lt
 800af5c:	222d      	movlt	r2, #45	; 0x2d
 800af5e:	222b      	movge	r2, #43	; 0x2b
 800af60:	2909      	cmp	r1, #9
 800af62:	7042      	strb	r2, [r0, #1]
 800af64:	dd2a      	ble.n	800afbc <__exponent+0x70>
 800af66:	f10d 0407 	add.w	r4, sp, #7
 800af6a:	46a4      	mov	ip, r4
 800af6c:	270a      	movs	r7, #10
 800af6e:	46a6      	mov	lr, r4
 800af70:	460a      	mov	r2, r1
 800af72:	fb91 f6f7 	sdiv	r6, r1, r7
 800af76:	fb07 1516 	mls	r5, r7, r6, r1
 800af7a:	3530      	adds	r5, #48	; 0x30
 800af7c:	2a63      	cmp	r2, #99	; 0x63
 800af7e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800af82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af86:	4631      	mov	r1, r6
 800af88:	dcf1      	bgt.n	800af6e <__exponent+0x22>
 800af8a:	3130      	adds	r1, #48	; 0x30
 800af8c:	f1ae 0502 	sub.w	r5, lr, #2
 800af90:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af94:	1c44      	adds	r4, r0, #1
 800af96:	4629      	mov	r1, r5
 800af98:	4561      	cmp	r1, ip
 800af9a:	d30a      	bcc.n	800afb2 <__exponent+0x66>
 800af9c:	f10d 0209 	add.w	r2, sp, #9
 800afa0:	eba2 020e 	sub.w	r2, r2, lr
 800afa4:	4565      	cmp	r5, ip
 800afa6:	bf88      	it	hi
 800afa8:	2200      	movhi	r2, #0
 800afaa:	4413      	add	r3, r2
 800afac:	1a18      	subs	r0, r3, r0
 800afae:	b003      	add	sp, #12
 800afb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800afba:	e7ed      	b.n	800af98 <__exponent+0x4c>
 800afbc:	2330      	movs	r3, #48	; 0x30
 800afbe:	3130      	adds	r1, #48	; 0x30
 800afc0:	7083      	strb	r3, [r0, #2]
 800afc2:	70c1      	strb	r1, [r0, #3]
 800afc4:	1d03      	adds	r3, r0, #4
 800afc6:	e7f1      	b.n	800afac <__exponent+0x60>

0800afc8 <_printf_float>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	ed2d 8b02 	vpush	{d8}
 800afd0:	b08d      	sub	sp, #52	; 0x34
 800afd2:	460c      	mov	r4, r1
 800afd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afd8:	4616      	mov	r6, r2
 800afda:	461f      	mov	r7, r3
 800afdc:	4605      	mov	r5, r0
 800afde:	f001 fbed 	bl	800c7bc <_localeconv_r>
 800afe2:	f8d0 a000 	ldr.w	sl, [r0]
 800afe6:	4650      	mov	r0, sl
 800afe8:	f7f5 fa20 	bl	800042c <strlen>
 800afec:	2300      	movs	r3, #0
 800afee:	930a      	str	r3, [sp, #40]	; 0x28
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	9305      	str	r3, [sp, #20]
 800aff4:	f8d8 3000 	ldr.w	r3, [r8]
 800aff8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800affc:	3307      	adds	r3, #7
 800affe:	f023 0307 	bic.w	r3, r3, #7
 800b002:	f103 0208 	add.w	r2, r3, #8
 800b006:	f8c8 2000 	str.w	r2, [r8]
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b012:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b016:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b01a:	9307      	str	r3, [sp, #28]
 800b01c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b020:	ee08 0a10 	vmov	s16, r0
 800b024:	4b9f      	ldr	r3, [pc, #636]	; (800b2a4 <_printf_float+0x2dc>)
 800b026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b02a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b02e:	f7f5 fead 	bl	8000d8c <__aeabi_dcmpun>
 800b032:	bb88      	cbnz	r0, 800b098 <_printf_float+0xd0>
 800b034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b038:	4b9a      	ldr	r3, [pc, #616]	; (800b2a4 <_printf_float+0x2dc>)
 800b03a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b03e:	f7f5 fe87 	bl	8000d50 <__aeabi_dcmple>
 800b042:	bb48      	cbnz	r0, 800b098 <_printf_float+0xd0>
 800b044:	2200      	movs	r2, #0
 800b046:	2300      	movs	r3, #0
 800b048:	4640      	mov	r0, r8
 800b04a:	4649      	mov	r1, r9
 800b04c:	f7f5 fe76 	bl	8000d3c <__aeabi_dcmplt>
 800b050:	b110      	cbz	r0, 800b058 <_printf_float+0x90>
 800b052:	232d      	movs	r3, #45	; 0x2d
 800b054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b058:	4b93      	ldr	r3, [pc, #588]	; (800b2a8 <_printf_float+0x2e0>)
 800b05a:	4894      	ldr	r0, [pc, #592]	; (800b2ac <_printf_float+0x2e4>)
 800b05c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b060:	bf94      	ite	ls
 800b062:	4698      	movls	r8, r3
 800b064:	4680      	movhi	r8, r0
 800b066:	2303      	movs	r3, #3
 800b068:	6123      	str	r3, [r4, #16]
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	f023 0204 	bic.w	r2, r3, #4
 800b070:	6022      	str	r2, [r4, #0]
 800b072:	f04f 0900 	mov.w	r9, #0
 800b076:	9700      	str	r7, [sp, #0]
 800b078:	4633      	mov	r3, r6
 800b07a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b07c:	4621      	mov	r1, r4
 800b07e:	4628      	mov	r0, r5
 800b080:	f000 f9d8 	bl	800b434 <_printf_common>
 800b084:	3001      	adds	r0, #1
 800b086:	f040 8090 	bne.w	800b1aa <_printf_float+0x1e2>
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b08e:	b00d      	add	sp, #52	; 0x34
 800b090:	ecbd 8b02 	vpop	{d8}
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	4642      	mov	r2, r8
 800b09a:	464b      	mov	r3, r9
 800b09c:	4640      	mov	r0, r8
 800b09e:	4649      	mov	r1, r9
 800b0a0:	f7f5 fe74 	bl	8000d8c <__aeabi_dcmpun>
 800b0a4:	b140      	cbz	r0, 800b0b8 <_printf_float+0xf0>
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bfbc      	itt	lt
 800b0ac:	232d      	movlt	r3, #45	; 0x2d
 800b0ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0b2:	487f      	ldr	r0, [pc, #508]	; (800b2b0 <_printf_float+0x2e8>)
 800b0b4:	4b7f      	ldr	r3, [pc, #508]	; (800b2b4 <_printf_float+0x2ec>)
 800b0b6:	e7d1      	b.n	800b05c <_printf_float+0x94>
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b0be:	9206      	str	r2, [sp, #24]
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	d13f      	bne.n	800b144 <_printf_float+0x17c>
 800b0c4:	2306      	movs	r3, #6
 800b0c6:	6063      	str	r3, [r4, #4]
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	6861      	ldr	r1, [r4, #4]
 800b0cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	ab0a      	add	r3, sp, #40	; 0x28
 800b0d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b0da:	ab09      	add	r3, sp, #36	; 0x24
 800b0dc:	ec49 8b10 	vmov	d0, r8, r9
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	6022      	str	r2, [r4, #0]
 800b0e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f7ff fecd 	bl	800ae88 <__cvt>
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 800b0f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0f2:	2b47      	cmp	r3, #71	; 0x47
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	d108      	bne.n	800b10a <_printf_float+0x142>
 800b0f8:	1cc8      	adds	r0, r1, #3
 800b0fa:	db02      	blt.n	800b102 <_printf_float+0x13a>
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	4299      	cmp	r1, r3
 800b100:	dd41      	ble.n	800b186 <_printf_float+0x1be>
 800b102:	f1ab 0b02 	sub.w	fp, fp, #2
 800b106:	fa5f fb8b 	uxtb.w	fp, fp
 800b10a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b10e:	d820      	bhi.n	800b152 <_printf_float+0x18a>
 800b110:	3901      	subs	r1, #1
 800b112:	465a      	mov	r2, fp
 800b114:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b118:	9109      	str	r1, [sp, #36]	; 0x24
 800b11a:	f7ff ff17 	bl	800af4c <__exponent>
 800b11e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b120:	1813      	adds	r3, r2, r0
 800b122:	2a01      	cmp	r2, #1
 800b124:	4681      	mov	r9, r0
 800b126:	6123      	str	r3, [r4, #16]
 800b128:	dc02      	bgt.n	800b130 <_printf_float+0x168>
 800b12a:	6822      	ldr	r2, [r4, #0]
 800b12c:	07d2      	lsls	r2, r2, #31
 800b12e:	d501      	bpl.n	800b134 <_printf_float+0x16c>
 800b130:	3301      	adds	r3, #1
 800b132:	6123      	str	r3, [r4, #16]
 800b134:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d09c      	beq.n	800b076 <_printf_float+0xae>
 800b13c:	232d      	movs	r3, #45	; 0x2d
 800b13e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b142:	e798      	b.n	800b076 <_printf_float+0xae>
 800b144:	9a06      	ldr	r2, [sp, #24]
 800b146:	2a47      	cmp	r2, #71	; 0x47
 800b148:	d1be      	bne.n	800b0c8 <_printf_float+0x100>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1bc      	bne.n	800b0c8 <_printf_float+0x100>
 800b14e:	2301      	movs	r3, #1
 800b150:	e7b9      	b.n	800b0c6 <_printf_float+0xfe>
 800b152:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b156:	d118      	bne.n	800b18a <_printf_float+0x1c2>
 800b158:	2900      	cmp	r1, #0
 800b15a:	6863      	ldr	r3, [r4, #4]
 800b15c:	dd0b      	ble.n	800b176 <_printf_float+0x1ae>
 800b15e:	6121      	str	r1, [r4, #16]
 800b160:	b913      	cbnz	r3, 800b168 <_printf_float+0x1a0>
 800b162:	6822      	ldr	r2, [r4, #0]
 800b164:	07d0      	lsls	r0, r2, #31
 800b166:	d502      	bpl.n	800b16e <_printf_float+0x1a6>
 800b168:	3301      	adds	r3, #1
 800b16a:	440b      	add	r3, r1
 800b16c:	6123      	str	r3, [r4, #16]
 800b16e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b170:	f04f 0900 	mov.w	r9, #0
 800b174:	e7de      	b.n	800b134 <_printf_float+0x16c>
 800b176:	b913      	cbnz	r3, 800b17e <_printf_float+0x1b6>
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	07d2      	lsls	r2, r2, #31
 800b17c:	d501      	bpl.n	800b182 <_printf_float+0x1ba>
 800b17e:	3302      	adds	r3, #2
 800b180:	e7f4      	b.n	800b16c <_printf_float+0x1a4>
 800b182:	2301      	movs	r3, #1
 800b184:	e7f2      	b.n	800b16c <_printf_float+0x1a4>
 800b186:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18c:	4299      	cmp	r1, r3
 800b18e:	db05      	blt.n	800b19c <_printf_float+0x1d4>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	6121      	str	r1, [r4, #16]
 800b194:	07d8      	lsls	r0, r3, #31
 800b196:	d5ea      	bpl.n	800b16e <_printf_float+0x1a6>
 800b198:	1c4b      	adds	r3, r1, #1
 800b19a:	e7e7      	b.n	800b16c <_printf_float+0x1a4>
 800b19c:	2900      	cmp	r1, #0
 800b19e:	bfd4      	ite	le
 800b1a0:	f1c1 0202 	rsble	r2, r1, #2
 800b1a4:	2201      	movgt	r2, #1
 800b1a6:	4413      	add	r3, r2
 800b1a8:	e7e0      	b.n	800b16c <_printf_float+0x1a4>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	055a      	lsls	r2, r3, #21
 800b1ae:	d407      	bmi.n	800b1c0 <_printf_float+0x1f8>
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	4642      	mov	r2, r8
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	47b8      	blx	r7
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	d12c      	bne.n	800b218 <_printf_float+0x250>
 800b1be:	e764      	b.n	800b08a <_printf_float+0xc2>
 800b1c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1c4:	f240 80e0 	bls.w	800b388 <_printf_float+0x3c0>
 800b1c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f7f5 fdaa 	bl	8000d28 <__aeabi_dcmpeq>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d034      	beq.n	800b242 <_printf_float+0x27a>
 800b1d8:	4a37      	ldr	r2, [pc, #220]	; (800b2b8 <_printf_float+0x2f0>)
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4628      	mov	r0, r5
 800b1e0:	47b8      	blx	r7
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	f43f af51 	beq.w	800b08a <_printf_float+0xc2>
 800b1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	db02      	blt.n	800b1f6 <_printf_float+0x22e>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	07d8      	lsls	r0, r3, #31
 800b1f4:	d510      	bpl.n	800b218 <_printf_float+0x250>
 800b1f6:	ee18 3a10 	vmov	r3, s16
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f af41 	beq.w	800b08a <_printf_float+0xc2>
 800b208:	f04f 0800 	mov.w	r8, #0
 800b20c:	f104 091a 	add.w	r9, r4, #26
 800b210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b212:	3b01      	subs	r3, #1
 800b214:	4543      	cmp	r3, r8
 800b216:	dc09      	bgt.n	800b22c <_printf_float+0x264>
 800b218:	6823      	ldr	r3, [r4, #0]
 800b21a:	079b      	lsls	r3, r3, #30
 800b21c:	f100 8105 	bmi.w	800b42a <_printf_float+0x462>
 800b220:	68e0      	ldr	r0, [r4, #12]
 800b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b224:	4298      	cmp	r0, r3
 800b226:	bfb8      	it	lt
 800b228:	4618      	movlt	r0, r3
 800b22a:	e730      	b.n	800b08e <_printf_float+0xc6>
 800b22c:	2301      	movs	r3, #1
 800b22e:	464a      	mov	r2, r9
 800b230:	4631      	mov	r1, r6
 800b232:	4628      	mov	r0, r5
 800b234:	47b8      	blx	r7
 800b236:	3001      	adds	r0, #1
 800b238:	f43f af27 	beq.w	800b08a <_printf_float+0xc2>
 800b23c:	f108 0801 	add.w	r8, r8, #1
 800b240:	e7e6      	b.n	800b210 <_printf_float+0x248>
 800b242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	dc39      	bgt.n	800b2bc <_printf_float+0x2f4>
 800b248:	4a1b      	ldr	r2, [pc, #108]	; (800b2b8 <_printf_float+0x2f0>)
 800b24a:	2301      	movs	r3, #1
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	47b8      	blx	r7
 800b252:	3001      	adds	r0, #1
 800b254:	f43f af19 	beq.w	800b08a <_printf_float+0xc2>
 800b258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b25c:	4313      	orrs	r3, r2
 800b25e:	d102      	bne.n	800b266 <_printf_float+0x29e>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	07d9      	lsls	r1, r3, #31
 800b264:	d5d8      	bpl.n	800b218 <_printf_float+0x250>
 800b266:	ee18 3a10 	vmov	r3, s16
 800b26a:	4652      	mov	r2, sl
 800b26c:	4631      	mov	r1, r6
 800b26e:	4628      	mov	r0, r5
 800b270:	47b8      	blx	r7
 800b272:	3001      	adds	r0, #1
 800b274:	f43f af09 	beq.w	800b08a <_printf_float+0xc2>
 800b278:	f04f 0900 	mov.w	r9, #0
 800b27c:	f104 0a1a 	add.w	sl, r4, #26
 800b280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b282:	425b      	negs	r3, r3
 800b284:	454b      	cmp	r3, r9
 800b286:	dc01      	bgt.n	800b28c <_printf_float+0x2c4>
 800b288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b28a:	e792      	b.n	800b1b2 <_printf_float+0x1ea>
 800b28c:	2301      	movs	r3, #1
 800b28e:	4652      	mov	r2, sl
 800b290:	4631      	mov	r1, r6
 800b292:	4628      	mov	r0, r5
 800b294:	47b8      	blx	r7
 800b296:	3001      	adds	r0, #1
 800b298:	f43f aef7 	beq.w	800b08a <_printf_float+0xc2>
 800b29c:	f109 0901 	add.w	r9, r9, #1
 800b2a0:	e7ee      	b.n	800b280 <_printf_float+0x2b8>
 800b2a2:	bf00      	nop
 800b2a4:	7fefffff 	.word	0x7fefffff
 800b2a8:	0800de1c 	.word	0x0800de1c
 800b2ac:	0800de20 	.word	0x0800de20
 800b2b0:	0800de28 	.word	0x0800de28
 800b2b4:	0800de24 	.word	0x0800de24
 800b2b8:	0800de2c 	.word	0x0800de2c
 800b2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	bfa8      	it	ge
 800b2c4:	461a      	movge	r2, r3
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	4691      	mov	r9, r2
 800b2ca:	dc37      	bgt.n	800b33c <_printf_float+0x374>
 800b2cc:	f04f 0b00 	mov.w	fp, #0
 800b2d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2d4:	f104 021a 	add.w	r2, r4, #26
 800b2d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2da:	9305      	str	r3, [sp, #20]
 800b2dc:	eba3 0309 	sub.w	r3, r3, r9
 800b2e0:	455b      	cmp	r3, fp
 800b2e2:	dc33      	bgt.n	800b34c <_printf_float+0x384>
 800b2e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	db3b      	blt.n	800b364 <_printf_float+0x39c>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	07da      	lsls	r2, r3, #31
 800b2f0:	d438      	bmi.n	800b364 <_printf_float+0x39c>
 800b2f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2f4:	9b05      	ldr	r3, [sp, #20]
 800b2f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	eba2 0901 	sub.w	r9, r2, r1
 800b2fe:	4599      	cmp	r9, r3
 800b300:	bfa8      	it	ge
 800b302:	4699      	movge	r9, r3
 800b304:	f1b9 0f00 	cmp.w	r9, #0
 800b308:	dc35      	bgt.n	800b376 <_printf_float+0x3ae>
 800b30a:	f04f 0800 	mov.w	r8, #0
 800b30e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b312:	f104 0a1a 	add.w	sl, r4, #26
 800b316:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b31a:	1a9b      	subs	r3, r3, r2
 800b31c:	eba3 0309 	sub.w	r3, r3, r9
 800b320:	4543      	cmp	r3, r8
 800b322:	f77f af79 	ble.w	800b218 <_printf_float+0x250>
 800b326:	2301      	movs	r3, #1
 800b328:	4652      	mov	r2, sl
 800b32a:	4631      	mov	r1, r6
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	f43f aeaa 	beq.w	800b08a <_printf_float+0xc2>
 800b336:	f108 0801 	add.w	r8, r8, #1
 800b33a:	e7ec      	b.n	800b316 <_printf_float+0x34e>
 800b33c:	4613      	mov	r3, r2
 800b33e:	4631      	mov	r1, r6
 800b340:	4642      	mov	r2, r8
 800b342:	4628      	mov	r0, r5
 800b344:	47b8      	blx	r7
 800b346:	3001      	adds	r0, #1
 800b348:	d1c0      	bne.n	800b2cc <_printf_float+0x304>
 800b34a:	e69e      	b.n	800b08a <_printf_float+0xc2>
 800b34c:	2301      	movs	r3, #1
 800b34e:	4631      	mov	r1, r6
 800b350:	4628      	mov	r0, r5
 800b352:	9205      	str	r2, [sp, #20]
 800b354:	47b8      	blx	r7
 800b356:	3001      	adds	r0, #1
 800b358:	f43f ae97 	beq.w	800b08a <_printf_float+0xc2>
 800b35c:	9a05      	ldr	r2, [sp, #20]
 800b35e:	f10b 0b01 	add.w	fp, fp, #1
 800b362:	e7b9      	b.n	800b2d8 <_printf_float+0x310>
 800b364:	ee18 3a10 	vmov	r3, s16
 800b368:	4652      	mov	r2, sl
 800b36a:	4631      	mov	r1, r6
 800b36c:	4628      	mov	r0, r5
 800b36e:	47b8      	blx	r7
 800b370:	3001      	adds	r0, #1
 800b372:	d1be      	bne.n	800b2f2 <_printf_float+0x32a>
 800b374:	e689      	b.n	800b08a <_printf_float+0xc2>
 800b376:	9a05      	ldr	r2, [sp, #20]
 800b378:	464b      	mov	r3, r9
 800b37a:	4442      	add	r2, r8
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	47b8      	blx	r7
 800b382:	3001      	adds	r0, #1
 800b384:	d1c1      	bne.n	800b30a <_printf_float+0x342>
 800b386:	e680      	b.n	800b08a <_printf_float+0xc2>
 800b388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b38a:	2a01      	cmp	r2, #1
 800b38c:	dc01      	bgt.n	800b392 <_printf_float+0x3ca>
 800b38e:	07db      	lsls	r3, r3, #31
 800b390:	d538      	bpl.n	800b404 <_printf_float+0x43c>
 800b392:	2301      	movs	r3, #1
 800b394:	4642      	mov	r2, r8
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	f43f ae74 	beq.w	800b08a <_printf_float+0xc2>
 800b3a2:	ee18 3a10 	vmov	r3, s16
 800b3a6:	4652      	mov	r2, sl
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f43f ae6b 	beq.w	800b08a <_printf_float+0xc2>
 800b3b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f7f5 fcb4 	bl	8000d28 <__aeabi_dcmpeq>
 800b3c0:	b9d8      	cbnz	r0, 800b3fa <_printf_float+0x432>
 800b3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c4:	f108 0201 	add.w	r2, r8, #1
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	47b8      	blx	r7
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d10e      	bne.n	800b3f2 <_printf_float+0x42a>
 800b3d4:	e659      	b.n	800b08a <_printf_float+0xc2>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	4652      	mov	r2, sl
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	f43f ae52 	beq.w	800b08a <_printf_float+0xc2>
 800b3e6:	f108 0801 	add.w	r8, r8, #1
 800b3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	4543      	cmp	r3, r8
 800b3f0:	dcf1      	bgt.n	800b3d6 <_printf_float+0x40e>
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3f8:	e6dc      	b.n	800b1b4 <_printf_float+0x1ec>
 800b3fa:	f04f 0800 	mov.w	r8, #0
 800b3fe:	f104 0a1a 	add.w	sl, r4, #26
 800b402:	e7f2      	b.n	800b3ea <_printf_float+0x422>
 800b404:	2301      	movs	r3, #1
 800b406:	4642      	mov	r2, r8
 800b408:	e7df      	b.n	800b3ca <_printf_float+0x402>
 800b40a:	2301      	movs	r3, #1
 800b40c:	464a      	mov	r2, r9
 800b40e:	4631      	mov	r1, r6
 800b410:	4628      	mov	r0, r5
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	f43f ae38 	beq.w	800b08a <_printf_float+0xc2>
 800b41a:	f108 0801 	add.w	r8, r8, #1
 800b41e:	68e3      	ldr	r3, [r4, #12]
 800b420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b422:	1a5b      	subs	r3, r3, r1
 800b424:	4543      	cmp	r3, r8
 800b426:	dcf0      	bgt.n	800b40a <_printf_float+0x442>
 800b428:	e6fa      	b.n	800b220 <_printf_float+0x258>
 800b42a:	f04f 0800 	mov.w	r8, #0
 800b42e:	f104 0919 	add.w	r9, r4, #25
 800b432:	e7f4      	b.n	800b41e <_printf_float+0x456>

0800b434 <_printf_common>:
 800b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b438:	4616      	mov	r6, r2
 800b43a:	4699      	mov	r9, r3
 800b43c:	688a      	ldr	r2, [r1, #8]
 800b43e:	690b      	ldr	r3, [r1, #16]
 800b440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b444:	4293      	cmp	r3, r2
 800b446:	bfb8      	it	lt
 800b448:	4613      	movlt	r3, r2
 800b44a:	6033      	str	r3, [r6, #0]
 800b44c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b450:	4607      	mov	r7, r0
 800b452:	460c      	mov	r4, r1
 800b454:	b10a      	cbz	r2, 800b45a <_printf_common+0x26>
 800b456:	3301      	adds	r3, #1
 800b458:	6033      	str	r3, [r6, #0]
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	0699      	lsls	r1, r3, #26
 800b45e:	bf42      	ittt	mi
 800b460:	6833      	ldrmi	r3, [r6, #0]
 800b462:	3302      	addmi	r3, #2
 800b464:	6033      	strmi	r3, [r6, #0]
 800b466:	6825      	ldr	r5, [r4, #0]
 800b468:	f015 0506 	ands.w	r5, r5, #6
 800b46c:	d106      	bne.n	800b47c <_printf_common+0x48>
 800b46e:	f104 0a19 	add.w	sl, r4, #25
 800b472:	68e3      	ldr	r3, [r4, #12]
 800b474:	6832      	ldr	r2, [r6, #0]
 800b476:	1a9b      	subs	r3, r3, r2
 800b478:	42ab      	cmp	r3, r5
 800b47a:	dc26      	bgt.n	800b4ca <_printf_common+0x96>
 800b47c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b480:	1e13      	subs	r3, r2, #0
 800b482:	6822      	ldr	r2, [r4, #0]
 800b484:	bf18      	it	ne
 800b486:	2301      	movne	r3, #1
 800b488:	0692      	lsls	r2, r2, #26
 800b48a:	d42b      	bmi.n	800b4e4 <_printf_common+0xb0>
 800b48c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b490:	4649      	mov	r1, r9
 800b492:	4638      	mov	r0, r7
 800b494:	47c0      	blx	r8
 800b496:	3001      	adds	r0, #1
 800b498:	d01e      	beq.n	800b4d8 <_printf_common+0xa4>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	68e5      	ldr	r5, [r4, #12]
 800b49e:	6832      	ldr	r2, [r6, #0]
 800b4a0:	f003 0306 	and.w	r3, r3, #6
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	bf08      	it	eq
 800b4a8:	1aad      	subeq	r5, r5, r2
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	6922      	ldr	r2, [r4, #16]
 800b4ae:	bf0c      	ite	eq
 800b4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4b4:	2500      	movne	r5, #0
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	bfc4      	itt	gt
 800b4ba:	1a9b      	subgt	r3, r3, r2
 800b4bc:	18ed      	addgt	r5, r5, r3
 800b4be:	2600      	movs	r6, #0
 800b4c0:	341a      	adds	r4, #26
 800b4c2:	42b5      	cmp	r5, r6
 800b4c4:	d11a      	bne.n	800b4fc <_printf_common+0xc8>
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	e008      	b.n	800b4dc <_printf_common+0xa8>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	4652      	mov	r2, sl
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	47c0      	blx	r8
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d103      	bne.n	800b4e0 <_printf_common+0xac>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e0:	3501      	adds	r5, #1
 800b4e2:	e7c6      	b.n	800b472 <_printf_common+0x3e>
 800b4e4:	18e1      	adds	r1, r4, r3
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	2030      	movs	r0, #48	; 0x30
 800b4ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4ee:	4422      	add	r2, r4
 800b4f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	e7c7      	b.n	800b48c <_printf_common+0x58>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	4622      	mov	r2, r4
 800b500:	4649      	mov	r1, r9
 800b502:	4638      	mov	r0, r7
 800b504:	47c0      	blx	r8
 800b506:	3001      	adds	r0, #1
 800b508:	d0e6      	beq.n	800b4d8 <_printf_common+0xa4>
 800b50a:	3601      	adds	r6, #1
 800b50c:	e7d9      	b.n	800b4c2 <_printf_common+0x8e>
	...

0800b510 <_printf_i>:
 800b510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b514:	460c      	mov	r4, r1
 800b516:	4691      	mov	r9, r2
 800b518:	7e27      	ldrb	r7, [r4, #24]
 800b51a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b51c:	2f78      	cmp	r7, #120	; 0x78
 800b51e:	4680      	mov	r8, r0
 800b520:	469a      	mov	sl, r3
 800b522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b526:	d807      	bhi.n	800b538 <_printf_i+0x28>
 800b528:	2f62      	cmp	r7, #98	; 0x62
 800b52a:	d80a      	bhi.n	800b542 <_printf_i+0x32>
 800b52c:	2f00      	cmp	r7, #0
 800b52e:	f000 80d8 	beq.w	800b6e2 <_printf_i+0x1d2>
 800b532:	2f58      	cmp	r7, #88	; 0x58
 800b534:	f000 80a3 	beq.w	800b67e <_printf_i+0x16e>
 800b538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b53c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b540:	e03a      	b.n	800b5b8 <_printf_i+0xa8>
 800b542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b546:	2b15      	cmp	r3, #21
 800b548:	d8f6      	bhi.n	800b538 <_printf_i+0x28>
 800b54a:	a001      	add	r0, pc, #4	; (adr r0, 800b550 <_printf_i+0x40>)
 800b54c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b550:	0800b5a9 	.word	0x0800b5a9
 800b554:	0800b5bd 	.word	0x0800b5bd
 800b558:	0800b539 	.word	0x0800b539
 800b55c:	0800b539 	.word	0x0800b539
 800b560:	0800b539 	.word	0x0800b539
 800b564:	0800b539 	.word	0x0800b539
 800b568:	0800b5bd 	.word	0x0800b5bd
 800b56c:	0800b539 	.word	0x0800b539
 800b570:	0800b539 	.word	0x0800b539
 800b574:	0800b539 	.word	0x0800b539
 800b578:	0800b539 	.word	0x0800b539
 800b57c:	0800b6c9 	.word	0x0800b6c9
 800b580:	0800b5ed 	.word	0x0800b5ed
 800b584:	0800b6ab 	.word	0x0800b6ab
 800b588:	0800b539 	.word	0x0800b539
 800b58c:	0800b539 	.word	0x0800b539
 800b590:	0800b6eb 	.word	0x0800b6eb
 800b594:	0800b539 	.word	0x0800b539
 800b598:	0800b5ed 	.word	0x0800b5ed
 800b59c:	0800b539 	.word	0x0800b539
 800b5a0:	0800b539 	.word	0x0800b539
 800b5a4:	0800b6b3 	.word	0x0800b6b3
 800b5a8:	680b      	ldr	r3, [r1, #0]
 800b5aa:	1d1a      	adds	r2, r3, #4
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	600a      	str	r2, [r1, #0]
 800b5b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e0a3      	b.n	800b704 <_printf_i+0x1f4>
 800b5bc:	6825      	ldr	r5, [r4, #0]
 800b5be:	6808      	ldr	r0, [r1, #0]
 800b5c0:	062e      	lsls	r6, r5, #24
 800b5c2:	f100 0304 	add.w	r3, r0, #4
 800b5c6:	d50a      	bpl.n	800b5de <_printf_i+0xce>
 800b5c8:	6805      	ldr	r5, [r0, #0]
 800b5ca:	600b      	str	r3, [r1, #0]
 800b5cc:	2d00      	cmp	r5, #0
 800b5ce:	da03      	bge.n	800b5d8 <_printf_i+0xc8>
 800b5d0:	232d      	movs	r3, #45	; 0x2d
 800b5d2:	426d      	negs	r5, r5
 800b5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5d8:	485e      	ldr	r0, [pc, #376]	; (800b754 <_printf_i+0x244>)
 800b5da:	230a      	movs	r3, #10
 800b5dc:	e019      	b.n	800b612 <_printf_i+0x102>
 800b5de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5e2:	6805      	ldr	r5, [r0, #0]
 800b5e4:	600b      	str	r3, [r1, #0]
 800b5e6:	bf18      	it	ne
 800b5e8:	b22d      	sxthne	r5, r5
 800b5ea:	e7ef      	b.n	800b5cc <_printf_i+0xbc>
 800b5ec:	680b      	ldr	r3, [r1, #0]
 800b5ee:	6825      	ldr	r5, [r4, #0]
 800b5f0:	1d18      	adds	r0, r3, #4
 800b5f2:	6008      	str	r0, [r1, #0]
 800b5f4:	0628      	lsls	r0, r5, #24
 800b5f6:	d501      	bpl.n	800b5fc <_printf_i+0xec>
 800b5f8:	681d      	ldr	r5, [r3, #0]
 800b5fa:	e002      	b.n	800b602 <_printf_i+0xf2>
 800b5fc:	0669      	lsls	r1, r5, #25
 800b5fe:	d5fb      	bpl.n	800b5f8 <_printf_i+0xe8>
 800b600:	881d      	ldrh	r5, [r3, #0]
 800b602:	4854      	ldr	r0, [pc, #336]	; (800b754 <_printf_i+0x244>)
 800b604:	2f6f      	cmp	r7, #111	; 0x6f
 800b606:	bf0c      	ite	eq
 800b608:	2308      	moveq	r3, #8
 800b60a:	230a      	movne	r3, #10
 800b60c:	2100      	movs	r1, #0
 800b60e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b612:	6866      	ldr	r6, [r4, #4]
 800b614:	60a6      	str	r6, [r4, #8]
 800b616:	2e00      	cmp	r6, #0
 800b618:	bfa2      	ittt	ge
 800b61a:	6821      	ldrge	r1, [r4, #0]
 800b61c:	f021 0104 	bicge.w	r1, r1, #4
 800b620:	6021      	strge	r1, [r4, #0]
 800b622:	b90d      	cbnz	r5, 800b628 <_printf_i+0x118>
 800b624:	2e00      	cmp	r6, #0
 800b626:	d04d      	beq.n	800b6c4 <_printf_i+0x1b4>
 800b628:	4616      	mov	r6, r2
 800b62a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b62e:	fb03 5711 	mls	r7, r3, r1, r5
 800b632:	5dc7      	ldrb	r7, [r0, r7]
 800b634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b638:	462f      	mov	r7, r5
 800b63a:	42bb      	cmp	r3, r7
 800b63c:	460d      	mov	r5, r1
 800b63e:	d9f4      	bls.n	800b62a <_printf_i+0x11a>
 800b640:	2b08      	cmp	r3, #8
 800b642:	d10b      	bne.n	800b65c <_printf_i+0x14c>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	07df      	lsls	r7, r3, #31
 800b648:	d508      	bpl.n	800b65c <_printf_i+0x14c>
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	6861      	ldr	r1, [r4, #4]
 800b64e:	4299      	cmp	r1, r3
 800b650:	bfde      	ittt	le
 800b652:	2330      	movle	r3, #48	; 0x30
 800b654:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b658:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b65c:	1b92      	subs	r2, r2, r6
 800b65e:	6122      	str	r2, [r4, #16]
 800b660:	f8cd a000 	str.w	sl, [sp]
 800b664:	464b      	mov	r3, r9
 800b666:	aa03      	add	r2, sp, #12
 800b668:	4621      	mov	r1, r4
 800b66a:	4640      	mov	r0, r8
 800b66c:	f7ff fee2 	bl	800b434 <_printf_common>
 800b670:	3001      	adds	r0, #1
 800b672:	d14c      	bne.n	800b70e <_printf_i+0x1fe>
 800b674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b678:	b004      	add	sp, #16
 800b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67e:	4835      	ldr	r0, [pc, #212]	; (800b754 <_printf_i+0x244>)
 800b680:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	680e      	ldr	r6, [r1, #0]
 800b688:	061f      	lsls	r7, r3, #24
 800b68a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b68e:	600e      	str	r6, [r1, #0]
 800b690:	d514      	bpl.n	800b6bc <_printf_i+0x1ac>
 800b692:	07d9      	lsls	r1, r3, #31
 800b694:	bf44      	itt	mi
 800b696:	f043 0320 	orrmi.w	r3, r3, #32
 800b69a:	6023      	strmi	r3, [r4, #0]
 800b69c:	b91d      	cbnz	r5, 800b6a6 <_printf_i+0x196>
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	f023 0320 	bic.w	r3, r3, #32
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	2310      	movs	r3, #16
 800b6a8:	e7b0      	b.n	800b60c <_printf_i+0xfc>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	f043 0320 	orr.w	r3, r3, #32
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	2378      	movs	r3, #120	; 0x78
 800b6b4:	4828      	ldr	r0, [pc, #160]	; (800b758 <_printf_i+0x248>)
 800b6b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6ba:	e7e3      	b.n	800b684 <_printf_i+0x174>
 800b6bc:	065e      	lsls	r6, r3, #25
 800b6be:	bf48      	it	mi
 800b6c0:	b2ad      	uxthmi	r5, r5
 800b6c2:	e7e6      	b.n	800b692 <_printf_i+0x182>
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	e7bb      	b.n	800b640 <_printf_i+0x130>
 800b6c8:	680b      	ldr	r3, [r1, #0]
 800b6ca:	6826      	ldr	r6, [r4, #0]
 800b6cc:	6960      	ldr	r0, [r4, #20]
 800b6ce:	1d1d      	adds	r5, r3, #4
 800b6d0:	600d      	str	r5, [r1, #0]
 800b6d2:	0635      	lsls	r5, r6, #24
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	d501      	bpl.n	800b6dc <_printf_i+0x1cc>
 800b6d8:	6018      	str	r0, [r3, #0]
 800b6da:	e002      	b.n	800b6e2 <_printf_i+0x1d2>
 800b6dc:	0671      	lsls	r1, r6, #25
 800b6de:	d5fb      	bpl.n	800b6d8 <_printf_i+0x1c8>
 800b6e0:	8018      	strh	r0, [r3, #0]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	4616      	mov	r6, r2
 800b6e8:	e7ba      	b.n	800b660 <_printf_i+0x150>
 800b6ea:	680b      	ldr	r3, [r1, #0]
 800b6ec:	1d1a      	adds	r2, r3, #4
 800b6ee:	600a      	str	r2, [r1, #0]
 800b6f0:	681e      	ldr	r6, [r3, #0]
 800b6f2:	6862      	ldr	r2, [r4, #4]
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f7f4 fea2 	bl	8000440 <memchr>
 800b6fc:	b108      	cbz	r0, 800b702 <_printf_i+0x1f2>
 800b6fe:	1b80      	subs	r0, r0, r6
 800b700:	6060      	str	r0, [r4, #4]
 800b702:	6863      	ldr	r3, [r4, #4]
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	2300      	movs	r3, #0
 800b708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b70c:	e7a8      	b.n	800b660 <_printf_i+0x150>
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	4632      	mov	r2, r6
 800b712:	4649      	mov	r1, r9
 800b714:	4640      	mov	r0, r8
 800b716:	47d0      	blx	sl
 800b718:	3001      	adds	r0, #1
 800b71a:	d0ab      	beq.n	800b674 <_printf_i+0x164>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	079b      	lsls	r3, r3, #30
 800b720:	d413      	bmi.n	800b74a <_printf_i+0x23a>
 800b722:	68e0      	ldr	r0, [r4, #12]
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	4298      	cmp	r0, r3
 800b728:	bfb8      	it	lt
 800b72a:	4618      	movlt	r0, r3
 800b72c:	e7a4      	b.n	800b678 <_printf_i+0x168>
 800b72e:	2301      	movs	r3, #1
 800b730:	4632      	mov	r2, r6
 800b732:	4649      	mov	r1, r9
 800b734:	4640      	mov	r0, r8
 800b736:	47d0      	blx	sl
 800b738:	3001      	adds	r0, #1
 800b73a:	d09b      	beq.n	800b674 <_printf_i+0x164>
 800b73c:	3501      	adds	r5, #1
 800b73e:	68e3      	ldr	r3, [r4, #12]
 800b740:	9903      	ldr	r1, [sp, #12]
 800b742:	1a5b      	subs	r3, r3, r1
 800b744:	42ab      	cmp	r3, r5
 800b746:	dcf2      	bgt.n	800b72e <_printf_i+0x21e>
 800b748:	e7eb      	b.n	800b722 <_printf_i+0x212>
 800b74a:	2500      	movs	r5, #0
 800b74c:	f104 0619 	add.w	r6, r4, #25
 800b750:	e7f5      	b.n	800b73e <_printf_i+0x22e>
 800b752:	bf00      	nop
 800b754:	0800de2e 	.word	0x0800de2e
 800b758:	0800de3f 	.word	0x0800de3f

0800b75c <siprintf>:
 800b75c:	b40e      	push	{r1, r2, r3}
 800b75e:	b500      	push	{lr}
 800b760:	b09c      	sub	sp, #112	; 0x70
 800b762:	ab1d      	add	r3, sp, #116	; 0x74
 800b764:	9002      	str	r0, [sp, #8]
 800b766:	9006      	str	r0, [sp, #24]
 800b768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b76c:	4809      	ldr	r0, [pc, #36]	; (800b794 <siprintf+0x38>)
 800b76e:	9107      	str	r1, [sp, #28]
 800b770:	9104      	str	r1, [sp, #16]
 800b772:	4909      	ldr	r1, [pc, #36]	; (800b798 <siprintf+0x3c>)
 800b774:	f853 2b04 	ldr.w	r2, [r3], #4
 800b778:	9105      	str	r1, [sp, #20]
 800b77a:	6800      	ldr	r0, [r0, #0]
 800b77c:	9301      	str	r3, [sp, #4]
 800b77e:	a902      	add	r1, sp, #8
 800b780:	f001 fcce 	bl	800d120 <_svfiprintf_r>
 800b784:	9b02      	ldr	r3, [sp, #8]
 800b786:	2200      	movs	r2, #0
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	b01c      	add	sp, #112	; 0x70
 800b78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b790:	b003      	add	sp, #12
 800b792:	4770      	bx	lr
 800b794:	2000026c 	.word	0x2000026c
 800b798:	ffff0208 	.word	0xffff0208

0800b79c <strncpy>:
 800b79c:	b510      	push	{r4, lr}
 800b79e:	3901      	subs	r1, #1
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	b132      	cbz	r2, 800b7b2 <strncpy+0x16>
 800b7a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b7a8:	f803 4b01 	strb.w	r4, [r3], #1
 800b7ac:	3a01      	subs	r2, #1
 800b7ae:	2c00      	cmp	r4, #0
 800b7b0:	d1f7      	bne.n	800b7a2 <strncpy+0x6>
 800b7b2:	441a      	add	r2, r3
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d100      	bne.n	800b7bc <strncpy+0x20>
 800b7ba:	bd10      	pop	{r4, pc}
 800b7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c0:	e7f9      	b.n	800b7b6 <strncpy+0x1a>
	...

0800b7c4 <_strtol_l.isra.0>:
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ca:	d001      	beq.n	800b7d0 <_strtol_l.isra.0+0xc>
 800b7cc:	2b24      	cmp	r3, #36	; 0x24
 800b7ce:	d906      	bls.n	800b7de <_strtol_l.isra.0+0x1a>
 800b7d0:	f7ff fb28 	bl	800ae24 <__errno>
 800b7d4:	2316      	movs	r3, #22
 800b7d6:	6003      	str	r3, [r0, #0]
 800b7d8:	2000      	movs	r0, #0
 800b7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7de:	4f3a      	ldr	r7, [pc, #232]	; (800b8c8 <_strtol_l.isra.0+0x104>)
 800b7e0:	468e      	mov	lr, r1
 800b7e2:	4676      	mov	r6, lr
 800b7e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b7e8:	5de5      	ldrb	r5, [r4, r7]
 800b7ea:	f015 0508 	ands.w	r5, r5, #8
 800b7ee:	d1f8      	bne.n	800b7e2 <_strtol_l.isra.0+0x1e>
 800b7f0:	2c2d      	cmp	r4, #45	; 0x2d
 800b7f2:	d134      	bne.n	800b85e <_strtol_l.isra.0+0x9a>
 800b7f4:	f89e 4000 	ldrb.w	r4, [lr]
 800b7f8:	f04f 0801 	mov.w	r8, #1
 800b7fc:	f106 0e02 	add.w	lr, r6, #2
 800b800:	2b00      	cmp	r3, #0
 800b802:	d05c      	beq.n	800b8be <_strtol_l.isra.0+0xfa>
 800b804:	2b10      	cmp	r3, #16
 800b806:	d10c      	bne.n	800b822 <_strtol_l.isra.0+0x5e>
 800b808:	2c30      	cmp	r4, #48	; 0x30
 800b80a:	d10a      	bne.n	800b822 <_strtol_l.isra.0+0x5e>
 800b80c:	f89e 4000 	ldrb.w	r4, [lr]
 800b810:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b814:	2c58      	cmp	r4, #88	; 0x58
 800b816:	d14d      	bne.n	800b8b4 <_strtol_l.isra.0+0xf0>
 800b818:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b81c:	2310      	movs	r3, #16
 800b81e:	f10e 0e02 	add.w	lr, lr, #2
 800b822:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b826:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b82a:	2600      	movs	r6, #0
 800b82c:	fbbc f9f3 	udiv	r9, ip, r3
 800b830:	4635      	mov	r5, r6
 800b832:	fb03 ca19 	mls	sl, r3, r9, ip
 800b836:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b83a:	2f09      	cmp	r7, #9
 800b83c:	d818      	bhi.n	800b870 <_strtol_l.isra.0+0xac>
 800b83e:	463c      	mov	r4, r7
 800b840:	42a3      	cmp	r3, r4
 800b842:	dd24      	ble.n	800b88e <_strtol_l.isra.0+0xca>
 800b844:	2e00      	cmp	r6, #0
 800b846:	db1f      	blt.n	800b888 <_strtol_l.isra.0+0xc4>
 800b848:	45a9      	cmp	r9, r5
 800b84a:	d31d      	bcc.n	800b888 <_strtol_l.isra.0+0xc4>
 800b84c:	d101      	bne.n	800b852 <_strtol_l.isra.0+0x8e>
 800b84e:	45a2      	cmp	sl, r4
 800b850:	db1a      	blt.n	800b888 <_strtol_l.isra.0+0xc4>
 800b852:	fb05 4503 	mla	r5, r5, r3, r4
 800b856:	2601      	movs	r6, #1
 800b858:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b85c:	e7eb      	b.n	800b836 <_strtol_l.isra.0+0x72>
 800b85e:	2c2b      	cmp	r4, #43	; 0x2b
 800b860:	bf08      	it	eq
 800b862:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b866:	46a8      	mov	r8, r5
 800b868:	bf08      	it	eq
 800b86a:	f106 0e02 	addeq.w	lr, r6, #2
 800b86e:	e7c7      	b.n	800b800 <_strtol_l.isra.0+0x3c>
 800b870:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b874:	2f19      	cmp	r7, #25
 800b876:	d801      	bhi.n	800b87c <_strtol_l.isra.0+0xb8>
 800b878:	3c37      	subs	r4, #55	; 0x37
 800b87a:	e7e1      	b.n	800b840 <_strtol_l.isra.0+0x7c>
 800b87c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b880:	2f19      	cmp	r7, #25
 800b882:	d804      	bhi.n	800b88e <_strtol_l.isra.0+0xca>
 800b884:	3c57      	subs	r4, #87	; 0x57
 800b886:	e7db      	b.n	800b840 <_strtol_l.isra.0+0x7c>
 800b888:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b88c:	e7e4      	b.n	800b858 <_strtol_l.isra.0+0x94>
 800b88e:	2e00      	cmp	r6, #0
 800b890:	da05      	bge.n	800b89e <_strtol_l.isra.0+0xda>
 800b892:	2322      	movs	r3, #34	; 0x22
 800b894:	6003      	str	r3, [r0, #0]
 800b896:	4665      	mov	r5, ip
 800b898:	b942      	cbnz	r2, 800b8ac <_strtol_l.isra.0+0xe8>
 800b89a:	4628      	mov	r0, r5
 800b89c:	e79d      	b.n	800b7da <_strtol_l.isra.0+0x16>
 800b89e:	f1b8 0f00 	cmp.w	r8, #0
 800b8a2:	d000      	beq.n	800b8a6 <_strtol_l.isra.0+0xe2>
 800b8a4:	426d      	negs	r5, r5
 800b8a6:	2a00      	cmp	r2, #0
 800b8a8:	d0f7      	beq.n	800b89a <_strtol_l.isra.0+0xd6>
 800b8aa:	b10e      	cbz	r6, 800b8b0 <_strtol_l.isra.0+0xec>
 800b8ac:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800b8b0:	6011      	str	r1, [r2, #0]
 800b8b2:	e7f2      	b.n	800b89a <_strtol_l.isra.0+0xd6>
 800b8b4:	2430      	movs	r4, #48	; 0x30
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1b3      	bne.n	800b822 <_strtol_l.isra.0+0x5e>
 800b8ba:	2308      	movs	r3, #8
 800b8bc:	e7b1      	b.n	800b822 <_strtol_l.isra.0+0x5e>
 800b8be:	2c30      	cmp	r4, #48	; 0x30
 800b8c0:	d0a4      	beq.n	800b80c <_strtol_l.isra.0+0x48>
 800b8c2:	230a      	movs	r3, #10
 800b8c4:	e7ad      	b.n	800b822 <_strtol_l.isra.0+0x5e>
 800b8c6:	bf00      	nop
 800b8c8:	0800de51 	.word	0x0800de51

0800b8cc <strtol>:
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	460a      	mov	r2, r1
 800b8d0:	4601      	mov	r1, r0
 800b8d2:	4802      	ldr	r0, [pc, #8]	; (800b8dc <strtol+0x10>)
 800b8d4:	6800      	ldr	r0, [r0, #0]
 800b8d6:	f7ff bf75 	b.w	800b7c4 <_strtol_l.isra.0>
 800b8da:	bf00      	nop
 800b8dc:	2000026c 	.word	0x2000026c

0800b8e0 <quorem>:
 800b8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	6903      	ldr	r3, [r0, #16]
 800b8e6:	690c      	ldr	r4, [r1, #16]
 800b8e8:	42a3      	cmp	r3, r4
 800b8ea:	4607      	mov	r7, r0
 800b8ec:	f2c0 8081 	blt.w	800b9f2 <quorem+0x112>
 800b8f0:	3c01      	subs	r4, #1
 800b8f2:	f101 0814 	add.w	r8, r1, #20
 800b8f6:	f100 0514 	add.w	r5, r0, #20
 800b8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b908:	3301      	adds	r3, #1
 800b90a:	429a      	cmp	r2, r3
 800b90c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b914:	fbb2 f6f3 	udiv	r6, r2, r3
 800b918:	d331      	bcc.n	800b97e <quorem+0x9e>
 800b91a:	f04f 0e00 	mov.w	lr, #0
 800b91e:	4640      	mov	r0, r8
 800b920:	46ac      	mov	ip, r5
 800b922:	46f2      	mov	sl, lr
 800b924:	f850 2b04 	ldr.w	r2, [r0], #4
 800b928:	b293      	uxth	r3, r2
 800b92a:	fb06 e303 	mla	r3, r6, r3, lr
 800b92e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b932:	b29b      	uxth	r3, r3
 800b934:	ebaa 0303 	sub.w	r3, sl, r3
 800b938:	0c12      	lsrs	r2, r2, #16
 800b93a:	f8dc a000 	ldr.w	sl, [ip]
 800b93e:	fb06 e202 	mla	r2, r6, r2, lr
 800b942:	fa13 f38a 	uxtah	r3, r3, sl
 800b946:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b94a:	fa1f fa82 	uxth.w	sl, r2
 800b94e:	f8dc 2000 	ldr.w	r2, [ip]
 800b952:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b956:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b960:	4581      	cmp	r9, r0
 800b962:	f84c 3b04 	str.w	r3, [ip], #4
 800b966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b96a:	d2db      	bcs.n	800b924 <quorem+0x44>
 800b96c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b970:	b92b      	cbnz	r3, 800b97e <quorem+0x9e>
 800b972:	9b01      	ldr	r3, [sp, #4]
 800b974:	3b04      	subs	r3, #4
 800b976:	429d      	cmp	r5, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	d32e      	bcc.n	800b9da <quorem+0xfa>
 800b97c:	613c      	str	r4, [r7, #16]
 800b97e:	4638      	mov	r0, r7
 800b980:	f001 f9b8 	bl	800ccf4 <__mcmp>
 800b984:	2800      	cmp	r0, #0
 800b986:	db24      	blt.n	800b9d2 <quorem+0xf2>
 800b988:	3601      	adds	r6, #1
 800b98a:	4628      	mov	r0, r5
 800b98c:	f04f 0c00 	mov.w	ip, #0
 800b990:	f858 2b04 	ldr.w	r2, [r8], #4
 800b994:	f8d0 e000 	ldr.w	lr, [r0]
 800b998:	b293      	uxth	r3, r2
 800b99a:	ebac 0303 	sub.w	r3, ip, r3
 800b99e:	0c12      	lsrs	r2, r2, #16
 800b9a0:	fa13 f38e 	uxtah	r3, r3, lr
 800b9a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b9a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9b2:	45c1      	cmp	r9, r8
 800b9b4:	f840 3b04 	str.w	r3, [r0], #4
 800b9b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b9bc:	d2e8      	bcs.n	800b990 <quorem+0xb0>
 800b9be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9c6:	b922      	cbnz	r2, 800b9d2 <quorem+0xf2>
 800b9c8:	3b04      	subs	r3, #4
 800b9ca:	429d      	cmp	r5, r3
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	d30a      	bcc.n	800b9e6 <quorem+0x106>
 800b9d0:	613c      	str	r4, [r7, #16]
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	b003      	add	sp, #12
 800b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9da:	6812      	ldr	r2, [r2, #0]
 800b9dc:	3b04      	subs	r3, #4
 800b9de:	2a00      	cmp	r2, #0
 800b9e0:	d1cc      	bne.n	800b97c <quorem+0x9c>
 800b9e2:	3c01      	subs	r4, #1
 800b9e4:	e7c7      	b.n	800b976 <quorem+0x96>
 800b9e6:	6812      	ldr	r2, [r2, #0]
 800b9e8:	3b04      	subs	r3, #4
 800b9ea:	2a00      	cmp	r2, #0
 800b9ec:	d1f0      	bne.n	800b9d0 <quorem+0xf0>
 800b9ee:	3c01      	subs	r4, #1
 800b9f0:	e7eb      	b.n	800b9ca <quorem+0xea>
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	e7ee      	b.n	800b9d4 <quorem+0xf4>
	...

0800b9f8 <_dtoa_r>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	ed2d 8b02 	vpush	{d8}
 800ba00:	ec57 6b10 	vmov	r6, r7, d0
 800ba04:	b095      	sub	sp, #84	; 0x54
 800ba06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba0c:	9105      	str	r1, [sp, #20]
 800ba0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ba12:	4604      	mov	r4, r0
 800ba14:	9209      	str	r2, [sp, #36]	; 0x24
 800ba16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba18:	b975      	cbnz	r5, 800ba38 <_dtoa_r+0x40>
 800ba1a:	2010      	movs	r0, #16
 800ba1c:	f000 fed6 	bl	800c7cc <malloc>
 800ba20:	4602      	mov	r2, r0
 800ba22:	6260      	str	r0, [r4, #36]	; 0x24
 800ba24:	b920      	cbnz	r0, 800ba30 <_dtoa_r+0x38>
 800ba26:	4bb2      	ldr	r3, [pc, #712]	; (800bcf0 <_dtoa_r+0x2f8>)
 800ba28:	21ea      	movs	r1, #234	; 0xea
 800ba2a:	48b2      	ldr	r0, [pc, #712]	; (800bcf4 <_dtoa_r+0x2fc>)
 800ba2c:	f001 fef8 	bl	800d820 <__assert_func>
 800ba30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba34:	6005      	str	r5, [r0, #0]
 800ba36:	60c5      	str	r5, [r0, #12]
 800ba38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba3a:	6819      	ldr	r1, [r3, #0]
 800ba3c:	b151      	cbz	r1, 800ba54 <_dtoa_r+0x5c>
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	604a      	str	r2, [r1, #4]
 800ba42:	2301      	movs	r3, #1
 800ba44:	4093      	lsls	r3, r2
 800ba46:	608b      	str	r3, [r1, #8]
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 ff15 	bl	800c878 <_Bfree>
 800ba4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	1e3b      	subs	r3, r7, #0
 800ba56:	bfb9      	ittee	lt
 800ba58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ba5c:	9303      	strlt	r3, [sp, #12]
 800ba5e:	2300      	movge	r3, #0
 800ba60:	f8c8 3000 	strge.w	r3, [r8]
 800ba64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ba68:	4ba3      	ldr	r3, [pc, #652]	; (800bcf8 <_dtoa_r+0x300>)
 800ba6a:	bfbc      	itt	lt
 800ba6c:	2201      	movlt	r2, #1
 800ba6e:	f8c8 2000 	strlt.w	r2, [r8]
 800ba72:	ea33 0309 	bics.w	r3, r3, r9
 800ba76:	d11b      	bne.n	800bab0 <_dtoa_r+0xb8>
 800ba78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba84:	4333      	orrs	r3, r6
 800ba86:	f000 857a 	beq.w	800c57e <_dtoa_r+0xb86>
 800ba8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba8c:	b963      	cbnz	r3, 800baa8 <_dtoa_r+0xb0>
 800ba8e:	4b9b      	ldr	r3, [pc, #620]	; (800bcfc <_dtoa_r+0x304>)
 800ba90:	e024      	b.n	800badc <_dtoa_r+0xe4>
 800ba92:	4b9b      	ldr	r3, [pc, #620]	; (800bd00 <_dtoa_r+0x308>)
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	3308      	adds	r3, #8
 800ba98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	9800      	ldr	r0, [sp, #0]
 800ba9e:	b015      	add	sp, #84	; 0x54
 800baa0:	ecbd 8b02 	vpop	{d8}
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa8:	4b94      	ldr	r3, [pc, #592]	; (800bcfc <_dtoa_r+0x304>)
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	3303      	adds	r3, #3
 800baae:	e7f3      	b.n	800ba98 <_dtoa_r+0xa0>
 800bab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bab4:	2200      	movs	r2, #0
 800bab6:	ec51 0b17 	vmov	r0, r1, d7
 800baba:	2300      	movs	r3, #0
 800babc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bac0:	f7f5 f932 	bl	8000d28 <__aeabi_dcmpeq>
 800bac4:	4680      	mov	r8, r0
 800bac6:	b158      	cbz	r0, 800bae0 <_dtoa_r+0xe8>
 800bac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800baca:	2301      	movs	r3, #1
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 8551 	beq.w	800c578 <_dtoa_r+0xb80>
 800bad6:	488b      	ldr	r0, [pc, #556]	; (800bd04 <_dtoa_r+0x30c>)
 800bad8:	6018      	str	r0, [r3, #0]
 800bada:	1e43      	subs	r3, r0, #1
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	e7dd      	b.n	800ba9c <_dtoa_r+0xa4>
 800bae0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bae4:	aa12      	add	r2, sp, #72	; 0x48
 800bae6:	a913      	add	r1, sp, #76	; 0x4c
 800bae8:	4620      	mov	r0, r4
 800baea:	f001 f9a7 	bl	800ce3c <__d2b>
 800baee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800baf2:	4683      	mov	fp, r0
 800baf4:	2d00      	cmp	r5, #0
 800baf6:	d07c      	beq.n	800bbf2 <_dtoa_r+0x1fa>
 800baf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bafa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bafe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bb06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bb0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bb0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb12:	4b7d      	ldr	r3, [pc, #500]	; (800bd08 <_dtoa_r+0x310>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 fce5 	bl	80004e8 <__aeabi_dsub>
 800bb1e:	a36e      	add	r3, pc, #440	; (adr r3, 800bcd8 <_dtoa_r+0x2e0>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f4 fe98 	bl	8000858 <__aeabi_dmul>
 800bb28:	a36d      	add	r3, pc, #436	; (adr r3, 800bce0 <_dtoa_r+0x2e8>)
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f7f4 fcdd 	bl	80004ec <__adddf3>
 800bb32:	4606      	mov	r6, r0
 800bb34:	4628      	mov	r0, r5
 800bb36:	460f      	mov	r7, r1
 800bb38:	f7f4 fe24 	bl	8000784 <__aeabi_i2d>
 800bb3c:	a36a      	add	r3, pc, #424	; (adr r3, 800bce8 <_dtoa_r+0x2f0>)
 800bb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb42:	f7f4 fe89 	bl	8000858 <__aeabi_dmul>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	f7f4 fccd 	bl	80004ec <__adddf3>
 800bb52:	4606      	mov	r6, r0
 800bb54:	460f      	mov	r7, r1
 800bb56:	f7f5 f92f 	bl	8000db8 <__aeabi_d2iz>
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	4682      	mov	sl, r0
 800bb5e:	2300      	movs	r3, #0
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f5 f8ea 	bl	8000d3c <__aeabi_dcmplt>
 800bb68:	b148      	cbz	r0, 800bb7e <_dtoa_r+0x186>
 800bb6a:	4650      	mov	r0, sl
 800bb6c:	f7f4 fe0a 	bl	8000784 <__aeabi_i2d>
 800bb70:	4632      	mov	r2, r6
 800bb72:	463b      	mov	r3, r7
 800bb74:	f7f5 f8d8 	bl	8000d28 <__aeabi_dcmpeq>
 800bb78:	b908      	cbnz	r0, 800bb7e <_dtoa_r+0x186>
 800bb7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bb7e:	f1ba 0f16 	cmp.w	sl, #22
 800bb82:	d854      	bhi.n	800bc2e <_dtoa_r+0x236>
 800bb84:	4b61      	ldr	r3, [pc, #388]	; (800bd0c <_dtoa_r+0x314>)
 800bb86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb92:	f7f5 f8d3 	bl	8000d3c <__aeabi_dcmplt>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d04b      	beq.n	800bc32 <_dtoa_r+0x23a>
 800bb9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bb9e:	2300      	movs	r3, #0
 800bba0:	930e      	str	r3, [sp, #56]	; 0x38
 800bba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bba4:	1b5d      	subs	r5, r3, r5
 800bba6:	1e6b      	subs	r3, r5, #1
 800bba8:	9304      	str	r3, [sp, #16]
 800bbaa:	bf43      	ittte	mi
 800bbac:	2300      	movmi	r3, #0
 800bbae:	f1c5 0801 	rsbmi	r8, r5, #1
 800bbb2:	9304      	strmi	r3, [sp, #16]
 800bbb4:	f04f 0800 	movpl.w	r8, #0
 800bbb8:	f1ba 0f00 	cmp.w	sl, #0
 800bbbc:	db3b      	blt.n	800bc36 <_dtoa_r+0x23e>
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bbc4:	4453      	add	r3, sl
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	2300      	movs	r3, #0
 800bbca:	9306      	str	r3, [sp, #24]
 800bbcc:	9b05      	ldr	r3, [sp, #20]
 800bbce:	2b09      	cmp	r3, #9
 800bbd0:	d869      	bhi.n	800bca6 <_dtoa_r+0x2ae>
 800bbd2:	2b05      	cmp	r3, #5
 800bbd4:	bfc4      	itt	gt
 800bbd6:	3b04      	subgt	r3, #4
 800bbd8:	9305      	strgt	r3, [sp, #20]
 800bbda:	9b05      	ldr	r3, [sp, #20]
 800bbdc:	f1a3 0302 	sub.w	r3, r3, #2
 800bbe0:	bfcc      	ite	gt
 800bbe2:	2500      	movgt	r5, #0
 800bbe4:	2501      	movle	r5, #1
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d869      	bhi.n	800bcbe <_dtoa_r+0x2c6>
 800bbea:	e8df f003 	tbb	[pc, r3]
 800bbee:	4e2c      	.short	0x4e2c
 800bbf0:	5a4c      	.short	0x5a4c
 800bbf2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bbf6:	441d      	add	r5, r3
 800bbf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bbfc:	2b20      	cmp	r3, #32
 800bbfe:	bfc1      	itttt	gt
 800bc00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bc08:	fa09 f303 	lslgt.w	r3, r9, r3
 800bc0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bc10:	bfda      	itte	le
 800bc12:	f1c3 0320 	rsble	r3, r3, #32
 800bc16:	fa06 f003 	lslle.w	r0, r6, r3
 800bc1a:	4318      	orrgt	r0, r3
 800bc1c:	f7f4 fda2 	bl	8000764 <__aeabi_ui2d>
 800bc20:	2301      	movs	r3, #1
 800bc22:	4606      	mov	r6, r0
 800bc24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bc28:	3d01      	subs	r5, #1
 800bc2a:	9310      	str	r3, [sp, #64]	; 0x40
 800bc2c:	e771      	b.n	800bb12 <_dtoa_r+0x11a>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e7b6      	b.n	800bba0 <_dtoa_r+0x1a8>
 800bc32:	900e      	str	r0, [sp, #56]	; 0x38
 800bc34:	e7b5      	b.n	800bba2 <_dtoa_r+0x1aa>
 800bc36:	f1ca 0300 	rsb	r3, sl, #0
 800bc3a:	9306      	str	r3, [sp, #24]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	eba8 080a 	sub.w	r8, r8, sl
 800bc42:	930d      	str	r3, [sp, #52]	; 0x34
 800bc44:	e7c2      	b.n	800bbcc <_dtoa_r+0x1d4>
 800bc46:	2300      	movs	r3, #0
 800bc48:	9308      	str	r3, [sp, #32]
 800bc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dc39      	bgt.n	800bcc4 <_dtoa_r+0x2cc>
 800bc50:	f04f 0901 	mov.w	r9, #1
 800bc54:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc58:	464b      	mov	r3, r9
 800bc5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bc5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc60:	2200      	movs	r2, #0
 800bc62:	6042      	str	r2, [r0, #4]
 800bc64:	2204      	movs	r2, #4
 800bc66:	f102 0614 	add.w	r6, r2, #20
 800bc6a:	429e      	cmp	r6, r3
 800bc6c:	6841      	ldr	r1, [r0, #4]
 800bc6e:	d92f      	bls.n	800bcd0 <_dtoa_r+0x2d8>
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 fdc1 	bl	800c7f8 <_Balloc>
 800bc76:	9000      	str	r0, [sp, #0]
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d14b      	bne.n	800bd14 <_dtoa_r+0x31c>
 800bc7c:	4b24      	ldr	r3, [pc, #144]	; (800bd10 <_dtoa_r+0x318>)
 800bc7e:	4602      	mov	r2, r0
 800bc80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bc84:	e6d1      	b.n	800ba2a <_dtoa_r+0x32>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e7de      	b.n	800bc48 <_dtoa_r+0x250>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9308      	str	r3, [sp, #32]
 800bc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc90:	eb0a 0903 	add.w	r9, sl, r3
 800bc94:	f109 0301 	add.w	r3, r9, #1
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	bfb8      	it	lt
 800bc9e:	2301      	movlt	r3, #1
 800bca0:	e7dd      	b.n	800bc5e <_dtoa_r+0x266>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e7f2      	b.n	800bc8c <_dtoa_r+0x294>
 800bca6:	2501      	movs	r5, #1
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9305      	str	r3, [sp, #20]
 800bcac:	9508      	str	r5, [sp, #32]
 800bcae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bcb8:	2312      	movs	r3, #18
 800bcba:	9209      	str	r2, [sp, #36]	; 0x24
 800bcbc:	e7cf      	b.n	800bc5e <_dtoa_r+0x266>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	9308      	str	r3, [sp, #32]
 800bcc2:	e7f4      	b.n	800bcae <_dtoa_r+0x2b6>
 800bcc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bcc8:	f8cd 9004 	str.w	r9, [sp, #4]
 800bccc:	464b      	mov	r3, r9
 800bcce:	e7c6      	b.n	800bc5e <_dtoa_r+0x266>
 800bcd0:	3101      	adds	r1, #1
 800bcd2:	6041      	str	r1, [r0, #4]
 800bcd4:	0052      	lsls	r2, r2, #1
 800bcd6:	e7c6      	b.n	800bc66 <_dtoa_r+0x26e>
 800bcd8:	636f4361 	.word	0x636f4361
 800bcdc:	3fd287a7 	.word	0x3fd287a7
 800bce0:	8b60c8b3 	.word	0x8b60c8b3
 800bce4:	3fc68a28 	.word	0x3fc68a28
 800bce8:	509f79fb 	.word	0x509f79fb
 800bcec:	3fd34413 	.word	0x3fd34413
 800bcf0:	0800df5e 	.word	0x0800df5e
 800bcf4:	0800df75 	.word	0x0800df75
 800bcf8:	7ff00000 	.word	0x7ff00000
 800bcfc:	0800df5a 	.word	0x0800df5a
 800bd00:	0800df51 	.word	0x0800df51
 800bd04:	0800de2d 	.word	0x0800de2d
 800bd08:	3ff80000 	.word	0x3ff80000
 800bd0c:	0800e0d0 	.word	0x0800e0d0
 800bd10:	0800dfd4 	.word	0x0800dfd4
 800bd14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd16:	9a00      	ldr	r2, [sp, #0]
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	2b0e      	cmp	r3, #14
 800bd1e:	f200 80ad 	bhi.w	800be7c <_dtoa_r+0x484>
 800bd22:	2d00      	cmp	r5, #0
 800bd24:	f000 80aa 	beq.w	800be7c <_dtoa_r+0x484>
 800bd28:	f1ba 0f00 	cmp.w	sl, #0
 800bd2c:	dd36      	ble.n	800bd9c <_dtoa_r+0x3a4>
 800bd2e:	4ac3      	ldr	r2, [pc, #780]	; (800c03c <_dtoa_r+0x644>)
 800bd30:	f00a 030f 	and.w	r3, sl, #15
 800bd34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bd38:	ed93 7b00 	vldr	d7, [r3]
 800bd3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bd40:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bd44:	eeb0 8a47 	vmov.f32	s16, s14
 800bd48:	eef0 8a67 	vmov.f32	s17, s15
 800bd4c:	d016      	beq.n	800bd7c <_dtoa_r+0x384>
 800bd4e:	4bbc      	ldr	r3, [pc, #752]	; (800c040 <_dtoa_r+0x648>)
 800bd50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd58:	f7f4 fea8 	bl	8000aac <__aeabi_ddiv>
 800bd5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd60:	f007 070f 	and.w	r7, r7, #15
 800bd64:	2503      	movs	r5, #3
 800bd66:	4eb6      	ldr	r6, [pc, #728]	; (800c040 <_dtoa_r+0x648>)
 800bd68:	b957      	cbnz	r7, 800bd80 <_dtoa_r+0x388>
 800bd6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd6e:	ec53 2b18 	vmov	r2, r3, d8
 800bd72:	f7f4 fe9b 	bl	8000aac <__aeabi_ddiv>
 800bd76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd7a:	e029      	b.n	800bdd0 <_dtoa_r+0x3d8>
 800bd7c:	2502      	movs	r5, #2
 800bd7e:	e7f2      	b.n	800bd66 <_dtoa_r+0x36e>
 800bd80:	07f9      	lsls	r1, r7, #31
 800bd82:	d508      	bpl.n	800bd96 <_dtoa_r+0x39e>
 800bd84:	ec51 0b18 	vmov	r0, r1, d8
 800bd88:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd8c:	f7f4 fd64 	bl	8000858 <__aeabi_dmul>
 800bd90:	ec41 0b18 	vmov	d8, r0, r1
 800bd94:	3501      	adds	r5, #1
 800bd96:	107f      	asrs	r7, r7, #1
 800bd98:	3608      	adds	r6, #8
 800bd9a:	e7e5      	b.n	800bd68 <_dtoa_r+0x370>
 800bd9c:	f000 80a6 	beq.w	800beec <_dtoa_r+0x4f4>
 800bda0:	f1ca 0600 	rsb	r6, sl, #0
 800bda4:	4ba5      	ldr	r3, [pc, #660]	; (800c03c <_dtoa_r+0x644>)
 800bda6:	4fa6      	ldr	r7, [pc, #664]	; (800c040 <_dtoa_r+0x648>)
 800bda8:	f006 020f 	and.w	r2, r6, #15
 800bdac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bdb8:	f7f4 fd4e 	bl	8000858 <__aeabi_dmul>
 800bdbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdc0:	1136      	asrs	r6, r6, #4
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	2502      	movs	r5, #2
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	f040 8085 	bne.w	800bed6 <_dtoa_r+0x4de>
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1d2      	bne.n	800bd76 <_dtoa_r+0x37e>
 800bdd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 808c 	beq.w	800bef0 <_dtoa_r+0x4f8>
 800bdd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bddc:	4b99      	ldr	r3, [pc, #612]	; (800c044 <_dtoa_r+0x64c>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f4 ffaa 	bl	8000d3c <__aeabi_dcmplt>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	f000 8081 	beq.w	800bef0 <_dtoa_r+0x4f8>
 800bdee:	9b01      	ldr	r3, [sp, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d07d      	beq.n	800bef0 <_dtoa_r+0x4f8>
 800bdf4:	f1b9 0f00 	cmp.w	r9, #0
 800bdf8:	dd3c      	ble.n	800be74 <_dtoa_r+0x47c>
 800bdfa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bdfe:	9307      	str	r3, [sp, #28]
 800be00:	2200      	movs	r2, #0
 800be02:	4b91      	ldr	r3, [pc, #580]	; (800c048 <_dtoa_r+0x650>)
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fd26 	bl	8000858 <__aeabi_dmul>
 800be0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be10:	3501      	adds	r5, #1
 800be12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800be16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be1a:	4628      	mov	r0, r5
 800be1c:	f7f4 fcb2 	bl	8000784 <__aeabi_i2d>
 800be20:	4632      	mov	r2, r6
 800be22:	463b      	mov	r3, r7
 800be24:	f7f4 fd18 	bl	8000858 <__aeabi_dmul>
 800be28:	4b88      	ldr	r3, [pc, #544]	; (800c04c <_dtoa_r+0x654>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	f7f4 fb5e 	bl	80004ec <__adddf3>
 800be30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800be34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be38:	9303      	str	r3, [sp, #12]
 800be3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d15c      	bne.n	800befa <_dtoa_r+0x502>
 800be40:	4b83      	ldr	r3, [pc, #524]	; (800c050 <_dtoa_r+0x658>)
 800be42:	2200      	movs	r2, #0
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f7f4 fb4e 	bl	80004e8 <__aeabi_dsub>
 800be4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be50:	4606      	mov	r6, r0
 800be52:	460f      	mov	r7, r1
 800be54:	f7f4 ff90 	bl	8000d78 <__aeabi_dcmpgt>
 800be58:	2800      	cmp	r0, #0
 800be5a:	f040 8296 	bne.w	800c38a <_dtoa_r+0x992>
 800be5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800be62:	4630      	mov	r0, r6
 800be64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be68:	4639      	mov	r1, r7
 800be6a:	f7f4 ff67 	bl	8000d3c <__aeabi_dcmplt>
 800be6e:	2800      	cmp	r0, #0
 800be70:	f040 8288 	bne.w	800c384 <_dtoa_r+0x98c>
 800be74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f2c0 8158 	blt.w	800c134 <_dtoa_r+0x73c>
 800be84:	f1ba 0f0e 	cmp.w	sl, #14
 800be88:	f300 8154 	bgt.w	800c134 <_dtoa_r+0x73c>
 800be8c:	4b6b      	ldr	r3, [pc, #428]	; (800c03c <_dtoa_r+0x644>)
 800be8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be92:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f280 80e3 	bge.w	800c064 <_dtoa_r+0x66c>
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f300 80df 	bgt.w	800c064 <_dtoa_r+0x66c>
 800bea6:	f040 826d 	bne.w	800c384 <_dtoa_r+0x98c>
 800beaa:	4b69      	ldr	r3, [pc, #420]	; (800c050 <_dtoa_r+0x658>)
 800beac:	2200      	movs	r2, #0
 800beae:	4640      	mov	r0, r8
 800beb0:	4649      	mov	r1, r9
 800beb2:	f7f4 fcd1 	bl	8000858 <__aeabi_dmul>
 800beb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800beba:	f7f4 ff53 	bl	8000d64 <__aeabi_dcmpge>
 800bebe:	9e01      	ldr	r6, [sp, #4]
 800bec0:	4637      	mov	r7, r6
 800bec2:	2800      	cmp	r0, #0
 800bec4:	f040 8243 	bne.w	800c34e <_dtoa_r+0x956>
 800bec8:	9d00      	ldr	r5, [sp, #0]
 800beca:	2331      	movs	r3, #49	; 0x31
 800becc:	f805 3b01 	strb.w	r3, [r5], #1
 800bed0:	f10a 0a01 	add.w	sl, sl, #1
 800bed4:	e23f      	b.n	800c356 <_dtoa_r+0x95e>
 800bed6:	07f2      	lsls	r2, r6, #31
 800bed8:	d505      	bpl.n	800bee6 <_dtoa_r+0x4ee>
 800beda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bede:	f7f4 fcbb 	bl	8000858 <__aeabi_dmul>
 800bee2:	3501      	adds	r5, #1
 800bee4:	2301      	movs	r3, #1
 800bee6:	1076      	asrs	r6, r6, #1
 800bee8:	3708      	adds	r7, #8
 800beea:	e76c      	b.n	800bdc6 <_dtoa_r+0x3ce>
 800beec:	2502      	movs	r5, #2
 800beee:	e76f      	b.n	800bdd0 <_dtoa_r+0x3d8>
 800bef0:	9b01      	ldr	r3, [sp, #4]
 800bef2:	f8cd a01c 	str.w	sl, [sp, #28]
 800bef6:	930c      	str	r3, [sp, #48]	; 0x30
 800bef8:	e78d      	b.n	800be16 <_dtoa_r+0x41e>
 800befa:	9900      	ldr	r1, [sp, #0]
 800befc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800befe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf00:	4b4e      	ldr	r3, [pc, #312]	; (800c03c <_dtoa_r+0x644>)
 800bf02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf06:	4401      	add	r1, r0
 800bf08:	9102      	str	r1, [sp, #8]
 800bf0a:	9908      	ldr	r1, [sp, #32]
 800bf0c:	eeb0 8a47 	vmov.f32	s16, s14
 800bf10:	eef0 8a67 	vmov.f32	s17, s15
 800bf14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	d045      	beq.n	800bfac <_dtoa_r+0x5b4>
 800bf20:	494c      	ldr	r1, [pc, #304]	; (800c054 <_dtoa_r+0x65c>)
 800bf22:	2000      	movs	r0, #0
 800bf24:	f7f4 fdc2 	bl	8000aac <__aeabi_ddiv>
 800bf28:	ec53 2b18 	vmov	r2, r3, d8
 800bf2c:	f7f4 fadc 	bl	80004e8 <__aeabi_dsub>
 800bf30:	9d00      	ldr	r5, [sp, #0]
 800bf32:	ec41 0b18 	vmov	d8, r0, r1
 800bf36:	4639      	mov	r1, r7
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f7f4 ff3d 	bl	8000db8 <__aeabi_d2iz>
 800bf3e:	900c      	str	r0, [sp, #48]	; 0x30
 800bf40:	f7f4 fc20 	bl	8000784 <__aeabi_i2d>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4630      	mov	r0, r6
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 facc 	bl	80004e8 <__aeabi_dsub>
 800bf50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf52:	3330      	adds	r3, #48	; 0x30
 800bf54:	f805 3b01 	strb.w	r3, [r5], #1
 800bf58:	ec53 2b18 	vmov	r2, r3, d8
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	460f      	mov	r7, r1
 800bf60:	f7f4 feec 	bl	8000d3c <__aeabi_dcmplt>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d165      	bne.n	800c034 <_dtoa_r+0x63c>
 800bf68:	4632      	mov	r2, r6
 800bf6a:	463b      	mov	r3, r7
 800bf6c:	4935      	ldr	r1, [pc, #212]	; (800c044 <_dtoa_r+0x64c>)
 800bf6e:	2000      	movs	r0, #0
 800bf70:	f7f4 faba 	bl	80004e8 <__aeabi_dsub>
 800bf74:	ec53 2b18 	vmov	r2, r3, d8
 800bf78:	f7f4 fee0 	bl	8000d3c <__aeabi_dcmplt>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f040 80b9 	bne.w	800c0f4 <_dtoa_r+0x6fc>
 800bf82:	9b02      	ldr	r3, [sp, #8]
 800bf84:	429d      	cmp	r5, r3
 800bf86:	f43f af75 	beq.w	800be74 <_dtoa_r+0x47c>
 800bf8a:	4b2f      	ldr	r3, [pc, #188]	; (800c048 <_dtoa_r+0x650>)
 800bf8c:	ec51 0b18 	vmov	r0, r1, d8
 800bf90:	2200      	movs	r2, #0
 800bf92:	f7f4 fc61 	bl	8000858 <__aeabi_dmul>
 800bf96:	4b2c      	ldr	r3, [pc, #176]	; (800c048 <_dtoa_r+0x650>)
 800bf98:	ec41 0b18 	vmov	d8, r0, r1
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	f7f4 fc59 	bl	8000858 <__aeabi_dmul>
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460f      	mov	r7, r1
 800bfaa:	e7c4      	b.n	800bf36 <_dtoa_r+0x53e>
 800bfac:	ec51 0b17 	vmov	r0, r1, d7
 800bfb0:	f7f4 fc52 	bl	8000858 <__aeabi_dmul>
 800bfb4:	9b02      	ldr	r3, [sp, #8]
 800bfb6:	9d00      	ldr	r5, [sp, #0]
 800bfb8:	930c      	str	r3, [sp, #48]	; 0x30
 800bfba:	ec41 0b18 	vmov	d8, r0, r1
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7f4 fef9 	bl	8000db8 <__aeabi_d2iz>
 800bfc6:	9011      	str	r0, [sp, #68]	; 0x44
 800bfc8:	f7f4 fbdc 	bl	8000784 <__aeabi_i2d>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 fa88 	bl	80004e8 <__aeabi_dsub>
 800bfd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfda:	3330      	adds	r3, #48	; 0x30
 800bfdc:	f805 3b01 	strb.w	r3, [r5], #1
 800bfe0:	9b02      	ldr	r3, [sp, #8]
 800bfe2:	429d      	cmp	r5, r3
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	460f      	mov	r7, r1
 800bfe8:	f04f 0200 	mov.w	r2, #0
 800bfec:	d134      	bne.n	800c058 <_dtoa_r+0x660>
 800bfee:	4b19      	ldr	r3, [pc, #100]	; (800c054 <_dtoa_r+0x65c>)
 800bff0:	ec51 0b18 	vmov	r0, r1, d8
 800bff4:	f7f4 fa7a 	bl	80004ec <__adddf3>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	4630      	mov	r0, r6
 800bffe:	4639      	mov	r1, r7
 800c000:	f7f4 feba 	bl	8000d78 <__aeabi_dcmpgt>
 800c004:	2800      	cmp	r0, #0
 800c006:	d175      	bne.n	800c0f4 <_dtoa_r+0x6fc>
 800c008:	ec53 2b18 	vmov	r2, r3, d8
 800c00c:	4911      	ldr	r1, [pc, #68]	; (800c054 <_dtoa_r+0x65c>)
 800c00e:	2000      	movs	r0, #0
 800c010:	f7f4 fa6a 	bl	80004e8 <__aeabi_dsub>
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	4630      	mov	r0, r6
 800c01a:	4639      	mov	r1, r7
 800c01c:	f7f4 fe8e 	bl	8000d3c <__aeabi_dcmplt>
 800c020:	2800      	cmp	r0, #0
 800c022:	f43f af27 	beq.w	800be74 <_dtoa_r+0x47c>
 800c026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c028:	1e6b      	subs	r3, r5, #1
 800c02a:	930c      	str	r3, [sp, #48]	; 0x30
 800c02c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c030:	2b30      	cmp	r3, #48	; 0x30
 800c032:	d0f8      	beq.n	800c026 <_dtoa_r+0x62e>
 800c034:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c038:	e04a      	b.n	800c0d0 <_dtoa_r+0x6d8>
 800c03a:	bf00      	nop
 800c03c:	0800e0d0 	.word	0x0800e0d0
 800c040:	0800e0a8 	.word	0x0800e0a8
 800c044:	3ff00000 	.word	0x3ff00000
 800c048:	40240000 	.word	0x40240000
 800c04c:	401c0000 	.word	0x401c0000
 800c050:	40140000 	.word	0x40140000
 800c054:	3fe00000 	.word	0x3fe00000
 800c058:	4baf      	ldr	r3, [pc, #700]	; (800c318 <_dtoa_r+0x920>)
 800c05a:	f7f4 fbfd 	bl	8000858 <__aeabi_dmul>
 800c05e:	4606      	mov	r6, r0
 800c060:	460f      	mov	r7, r1
 800c062:	e7ac      	b.n	800bfbe <_dtoa_r+0x5c6>
 800c064:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c068:	9d00      	ldr	r5, [sp, #0]
 800c06a:	4642      	mov	r2, r8
 800c06c:	464b      	mov	r3, r9
 800c06e:	4630      	mov	r0, r6
 800c070:	4639      	mov	r1, r7
 800c072:	f7f4 fd1b 	bl	8000aac <__aeabi_ddiv>
 800c076:	f7f4 fe9f 	bl	8000db8 <__aeabi_d2iz>
 800c07a:	9002      	str	r0, [sp, #8]
 800c07c:	f7f4 fb82 	bl	8000784 <__aeabi_i2d>
 800c080:	4642      	mov	r2, r8
 800c082:	464b      	mov	r3, r9
 800c084:	f7f4 fbe8 	bl	8000858 <__aeabi_dmul>
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	4630      	mov	r0, r6
 800c08e:	4639      	mov	r1, r7
 800c090:	f7f4 fa2a 	bl	80004e8 <__aeabi_dsub>
 800c094:	9e02      	ldr	r6, [sp, #8]
 800c096:	9f01      	ldr	r7, [sp, #4]
 800c098:	3630      	adds	r6, #48	; 0x30
 800c09a:	f805 6b01 	strb.w	r6, [r5], #1
 800c09e:	9e00      	ldr	r6, [sp, #0]
 800c0a0:	1bae      	subs	r6, r5, r6
 800c0a2:	42b7      	cmp	r7, r6
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	d137      	bne.n	800c11a <_dtoa_r+0x722>
 800c0aa:	f7f4 fa1f 	bl	80004ec <__adddf3>
 800c0ae:	4642      	mov	r2, r8
 800c0b0:	464b      	mov	r3, r9
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	f7f4 fe5f 	bl	8000d78 <__aeabi_dcmpgt>
 800c0ba:	b9c8      	cbnz	r0, 800c0f0 <_dtoa_r+0x6f8>
 800c0bc:	4642      	mov	r2, r8
 800c0be:	464b      	mov	r3, r9
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fe30 	bl	8000d28 <__aeabi_dcmpeq>
 800c0c8:	b110      	cbz	r0, 800c0d0 <_dtoa_r+0x6d8>
 800c0ca:	9b02      	ldr	r3, [sp, #8]
 800c0cc:	07d9      	lsls	r1, r3, #31
 800c0ce:	d40f      	bmi.n	800c0f0 <_dtoa_r+0x6f8>
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	4659      	mov	r1, fp
 800c0d4:	f000 fbd0 	bl	800c878 <_Bfree>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	702b      	strb	r3, [r5, #0]
 800c0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0de:	f10a 0001 	add.w	r0, sl, #1
 800c0e2:	6018      	str	r0, [r3, #0]
 800c0e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f43f acd8 	beq.w	800ba9c <_dtoa_r+0xa4>
 800c0ec:	601d      	str	r5, [r3, #0]
 800c0ee:	e4d5      	b.n	800ba9c <_dtoa_r+0xa4>
 800c0f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800c0f4:	462b      	mov	r3, r5
 800c0f6:	461d      	mov	r5, r3
 800c0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0fc:	2a39      	cmp	r2, #57	; 0x39
 800c0fe:	d108      	bne.n	800c112 <_dtoa_r+0x71a>
 800c100:	9a00      	ldr	r2, [sp, #0]
 800c102:	429a      	cmp	r2, r3
 800c104:	d1f7      	bne.n	800c0f6 <_dtoa_r+0x6fe>
 800c106:	9a07      	ldr	r2, [sp, #28]
 800c108:	9900      	ldr	r1, [sp, #0]
 800c10a:	3201      	adds	r2, #1
 800c10c:	9207      	str	r2, [sp, #28]
 800c10e:	2230      	movs	r2, #48	; 0x30
 800c110:	700a      	strb	r2, [r1, #0]
 800c112:	781a      	ldrb	r2, [r3, #0]
 800c114:	3201      	adds	r2, #1
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	e78c      	b.n	800c034 <_dtoa_r+0x63c>
 800c11a:	4b7f      	ldr	r3, [pc, #508]	; (800c318 <_dtoa_r+0x920>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	f7f4 fb9b 	bl	8000858 <__aeabi_dmul>
 800c122:	2200      	movs	r2, #0
 800c124:	2300      	movs	r3, #0
 800c126:	4606      	mov	r6, r0
 800c128:	460f      	mov	r7, r1
 800c12a:	f7f4 fdfd 	bl	8000d28 <__aeabi_dcmpeq>
 800c12e:	2800      	cmp	r0, #0
 800c130:	d09b      	beq.n	800c06a <_dtoa_r+0x672>
 800c132:	e7cd      	b.n	800c0d0 <_dtoa_r+0x6d8>
 800c134:	9a08      	ldr	r2, [sp, #32]
 800c136:	2a00      	cmp	r2, #0
 800c138:	f000 80c4 	beq.w	800c2c4 <_dtoa_r+0x8cc>
 800c13c:	9a05      	ldr	r2, [sp, #20]
 800c13e:	2a01      	cmp	r2, #1
 800c140:	f300 80a8 	bgt.w	800c294 <_dtoa_r+0x89c>
 800c144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c146:	2a00      	cmp	r2, #0
 800c148:	f000 80a0 	beq.w	800c28c <_dtoa_r+0x894>
 800c14c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c150:	9e06      	ldr	r6, [sp, #24]
 800c152:	4645      	mov	r5, r8
 800c154:	9a04      	ldr	r2, [sp, #16]
 800c156:	2101      	movs	r1, #1
 800c158:	441a      	add	r2, r3
 800c15a:	4620      	mov	r0, r4
 800c15c:	4498      	add	r8, r3
 800c15e:	9204      	str	r2, [sp, #16]
 800c160:	f000 fc46 	bl	800c9f0 <__i2b>
 800c164:	4607      	mov	r7, r0
 800c166:	2d00      	cmp	r5, #0
 800c168:	dd0b      	ble.n	800c182 <_dtoa_r+0x78a>
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dd08      	ble.n	800c182 <_dtoa_r+0x78a>
 800c170:	42ab      	cmp	r3, r5
 800c172:	9a04      	ldr	r2, [sp, #16]
 800c174:	bfa8      	it	ge
 800c176:	462b      	movge	r3, r5
 800c178:	eba8 0803 	sub.w	r8, r8, r3
 800c17c:	1aed      	subs	r5, r5, r3
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	9304      	str	r3, [sp, #16]
 800c182:	9b06      	ldr	r3, [sp, #24]
 800c184:	b1fb      	cbz	r3, 800c1c6 <_dtoa_r+0x7ce>
 800c186:	9b08      	ldr	r3, [sp, #32]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 809f 	beq.w	800c2cc <_dtoa_r+0x8d4>
 800c18e:	2e00      	cmp	r6, #0
 800c190:	dd11      	ble.n	800c1b6 <_dtoa_r+0x7be>
 800c192:	4639      	mov	r1, r7
 800c194:	4632      	mov	r2, r6
 800c196:	4620      	mov	r0, r4
 800c198:	f000 fce6 	bl	800cb68 <__pow5mult>
 800c19c:	465a      	mov	r2, fp
 800c19e:	4601      	mov	r1, r0
 800c1a0:	4607      	mov	r7, r0
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 fc3a 	bl	800ca1c <__multiply>
 800c1a8:	4659      	mov	r1, fp
 800c1aa:	9007      	str	r0, [sp, #28]
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f000 fb63 	bl	800c878 <_Bfree>
 800c1b2:	9b07      	ldr	r3, [sp, #28]
 800c1b4:	469b      	mov	fp, r3
 800c1b6:	9b06      	ldr	r3, [sp, #24]
 800c1b8:	1b9a      	subs	r2, r3, r6
 800c1ba:	d004      	beq.n	800c1c6 <_dtoa_r+0x7ce>
 800c1bc:	4659      	mov	r1, fp
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f000 fcd2 	bl	800cb68 <__pow5mult>
 800c1c4:	4683      	mov	fp, r0
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f000 fc11 	bl	800c9f0 <__i2b>
 800c1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	dd7c      	ble.n	800c2d0 <_dtoa_r+0x8d8>
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4601      	mov	r1, r0
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 fcc4 	bl	800cb68 <__pow5mult>
 800c1e0:	9b05      	ldr	r3, [sp, #20]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	dd76      	ble.n	800c2d6 <_dtoa_r+0x8de>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9306      	str	r3, [sp, #24]
 800c1ec:	6933      	ldr	r3, [r6, #16]
 800c1ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c1f2:	6918      	ldr	r0, [r3, #16]
 800c1f4:	f000 fbac 	bl	800c950 <__hi0bits>
 800c1f8:	f1c0 0020 	rsb	r0, r0, #32
 800c1fc:	9b04      	ldr	r3, [sp, #16]
 800c1fe:	4418      	add	r0, r3
 800c200:	f010 001f 	ands.w	r0, r0, #31
 800c204:	f000 8086 	beq.w	800c314 <_dtoa_r+0x91c>
 800c208:	f1c0 0320 	rsb	r3, r0, #32
 800c20c:	2b04      	cmp	r3, #4
 800c20e:	dd7f      	ble.n	800c310 <_dtoa_r+0x918>
 800c210:	f1c0 001c 	rsb	r0, r0, #28
 800c214:	9b04      	ldr	r3, [sp, #16]
 800c216:	4403      	add	r3, r0
 800c218:	4480      	add	r8, r0
 800c21a:	4405      	add	r5, r0
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	f1b8 0f00 	cmp.w	r8, #0
 800c222:	dd05      	ble.n	800c230 <_dtoa_r+0x838>
 800c224:	4659      	mov	r1, fp
 800c226:	4642      	mov	r2, r8
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 fcf7 	bl	800cc1c <__lshift>
 800c22e:	4683      	mov	fp, r0
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	dd05      	ble.n	800c242 <_dtoa_r+0x84a>
 800c236:	4631      	mov	r1, r6
 800c238:	461a      	mov	r2, r3
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 fcee 	bl	800cc1c <__lshift>
 800c240:	4606      	mov	r6, r0
 800c242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c244:	2b00      	cmp	r3, #0
 800c246:	d069      	beq.n	800c31c <_dtoa_r+0x924>
 800c248:	4631      	mov	r1, r6
 800c24a:	4658      	mov	r0, fp
 800c24c:	f000 fd52 	bl	800ccf4 <__mcmp>
 800c250:	2800      	cmp	r0, #0
 800c252:	da63      	bge.n	800c31c <_dtoa_r+0x924>
 800c254:	2300      	movs	r3, #0
 800c256:	4659      	mov	r1, fp
 800c258:	220a      	movs	r2, #10
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 fb2e 	bl	800c8bc <__multadd>
 800c260:	9b08      	ldr	r3, [sp, #32]
 800c262:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c266:	4683      	mov	fp, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f000 818f 	beq.w	800c58c <_dtoa_r+0xb94>
 800c26e:	4639      	mov	r1, r7
 800c270:	2300      	movs	r3, #0
 800c272:	220a      	movs	r2, #10
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fb21 	bl	800c8bc <__multadd>
 800c27a:	f1b9 0f00 	cmp.w	r9, #0
 800c27e:	4607      	mov	r7, r0
 800c280:	f300 808e 	bgt.w	800c3a0 <_dtoa_r+0x9a8>
 800c284:	9b05      	ldr	r3, [sp, #20]
 800c286:	2b02      	cmp	r3, #2
 800c288:	dc50      	bgt.n	800c32c <_dtoa_r+0x934>
 800c28a:	e089      	b.n	800c3a0 <_dtoa_r+0x9a8>
 800c28c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c28e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c292:	e75d      	b.n	800c150 <_dtoa_r+0x758>
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	1e5e      	subs	r6, r3, #1
 800c298:	9b06      	ldr	r3, [sp, #24]
 800c29a:	42b3      	cmp	r3, r6
 800c29c:	bfbf      	itttt	lt
 800c29e:	9b06      	ldrlt	r3, [sp, #24]
 800c2a0:	9606      	strlt	r6, [sp, #24]
 800c2a2:	1af2      	sublt	r2, r6, r3
 800c2a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c2a6:	bfb6      	itet	lt
 800c2a8:	189b      	addlt	r3, r3, r2
 800c2aa:	1b9e      	subge	r6, r3, r6
 800c2ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c2ae:	9b01      	ldr	r3, [sp, #4]
 800c2b0:	bfb8      	it	lt
 800c2b2:	2600      	movlt	r6, #0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bfb5      	itete	lt
 800c2b8:	eba8 0503 	sublt.w	r5, r8, r3
 800c2bc:	9b01      	ldrge	r3, [sp, #4]
 800c2be:	2300      	movlt	r3, #0
 800c2c0:	4645      	movge	r5, r8
 800c2c2:	e747      	b.n	800c154 <_dtoa_r+0x75c>
 800c2c4:	9e06      	ldr	r6, [sp, #24]
 800c2c6:	9f08      	ldr	r7, [sp, #32]
 800c2c8:	4645      	mov	r5, r8
 800c2ca:	e74c      	b.n	800c166 <_dtoa_r+0x76e>
 800c2cc:	9a06      	ldr	r2, [sp, #24]
 800c2ce:	e775      	b.n	800c1bc <_dtoa_r+0x7c4>
 800c2d0:	9b05      	ldr	r3, [sp, #20]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	dc18      	bgt.n	800c308 <_dtoa_r+0x910>
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	b9b3      	cbnz	r3, 800c308 <_dtoa_r+0x910>
 800c2da:	9b03      	ldr	r3, [sp, #12]
 800c2dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2e0:	b9a3      	cbnz	r3, 800c30c <_dtoa_r+0x914>
 800c2e2:	9b03      	ldr	r3, [sp, #12]
 800c2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2e8:	0d1b      	lsrs	r3, r3, #20
 800c2ea:	051b      	lsls	r3, r3, #20
 800c2ec:	b12b      	cbz	r3, 800c2fa <_dtoa_r+0x902>
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	f108 0801 	add.w	r8, r8, #1
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	9306      	str	r3, [sp, #24]
 800c2fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f47f af74 	bne.w	800c1ec <_dtoa_r+0x7f4>
 800c304:	2001      	movs	r0, #1
 800c306:	e779      	b.n	800c1fc <_dtoa_r+0x804>
 800c308:	2300      	movs	r3, #0
 800c30a:	e7f6      	b.n	800c2fa <_dtoa_r+0x902>
 800c30c:	9b02      	ldr	r3, [sp, #8]
 800c30e:	e7f4      	b.n	800c2fa <_dtoa_r+0x902>
 800c310:	d085      	beq.n	800c21e <_dtoa_r+0x826>
 800c312:	4618      	mov	r0, r3
 800c314:	301c      	adds	r0, #28
 800c316:	e77d      	b.n	800c214 <_dtoa_r+0x81c>
 800c318:	40240000 	.word	0x40240000
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	dc38      	bgt.n	800c394 <_dtoa_r+0x99c>
 800c322:	9b05      	ldr	r3, [sp, #20]
 800c324:	2b02      	cmp	r3, #2
 800c326:	dd35      	ble.n	800c394 <_dtoa_r+0x99c>
 800c328:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c32c:	f1b9 0f00 	cmp.w	r9, #0
 800c330:	d10d      	bne.n	800c34e <_dtoa_r+0x956>
 800c332:	4631      	mov	r1, r6
 800c334:	464b      	mov	r3, r9
 800c336:	2205      	movs	r2, #5
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fabf 	bl	800c8bc <__multadd>
 800c33e:	4601      	mov	r1, r0
 800c340:	4606      	mov	r6, r0
 800c342:	4658      	mov	r0, fp
 800c344:	f000 fcd6 	bl	800ccf4 <__mcmp>
 800c348:	2800      	cmp	r0, #0
 800c34a:	f73f adbd 	bgt.w	800bec8 <_dtoa_r+0x4d0>
 800c34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c350:	9d00      	ldr	r5, [sp, #0]
 800c352:	ea6f 0a03 	mvn.w	sl, r3
 800c356:	f04f 0800 	mov.w	r8, #0
 800c35a:	4631      	mov	r1, r6
 800c35c:	4620      	mov	r0, r4
 800c35e:	f000 fa8b 	bl	800c878 <_Bfree>
 800c362:	2f00      	cmp	r7, #0
 800c364:	f43f aeb4 	beq.w	800c0d0 <_dtoa_r+0x6d8>
 800c368:	f1b8 0f00 	cmp.w	r8, #0
 800c36c:	d005      	beq.n	800c37a <_dtoa_r+0x982>
 800c36e:	45b8      	cmp	r8, r7
 800c370:	d003      	beq.n	800c37a <_dtoa_r+0x982>
 800c372:	4641      	mov	r1, r8
 800c374:	4620      	mov	r0, r4
 800c376:	f000 fa7f 	bl	800c878 <_Bfree>
 800c37a:	4639      	mov	r1, r7
 800c37c:	4620      	mov	r0, r4
 800c37e:	f000 fa7b 	bl	800c878 <_Bfree>
 800c382:	e6a5      	b.n	800c0d0 <_dtoa_r+0x6d8>
 800c384:	2600      	movs	r6, #0
 800c386:	4637      	mov	r7, r6
 800c388:	e7e1      	b.n	800c34e <_dtoa_r+0x956>
 800c38a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c38c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c390:	4637      	mov	r7, r6
 800c392:	e599      	b.n	800bec8 <_dtoa_r+0x4d0>
 800c394:	9b08      	ldr	r3, [sp, #32]
 800c396:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 80fd 	beq.w	800c59a <_dtoa_r+0xba2>
 800c3a0:	2d00      	cmp	r5, #0
 800c3a2:	dd05      	ble.n	800c3b0 <_dtoa_r+0x9b8>
 800c3a4:	4639      	mov	r1, r7
 800c3a6:	462a      	mov	r2, r5
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 fc37 	bl	800cc1c <__lshift>
 800c3ae:	4607      	mov	r7, r0
 800c3b0:	9b06      	ldr	r3, [sp, #24]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d05c      	beq.n	800c470 <_dtoa_r+0xa78>
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f000 fa1d 	bl	800c7f8 <_Balloc>
 800c3be:	4605      	mov	r5, r0
 800c3c0:	b928      	cbnz	r0, 800c3ce <_dtoa_r+0x9d6>
 800c3c2:	4b80      	ldr	r3, [pc, #512]	; (800c5c4 <_dtoa_r+0xbcc>)
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c3ca:	f7ff bb2e 	b.w	800ba2a <_dtoa_r+0x32>
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	3202      	adds	r2, #2
 800c3d2:	0092      	lsls	r2, r2, #2
 800c3d4:	f107 010c 	add.w	r1, r7, #12
 800c3d8:	300c      	adds	r0, #12
 800c3da:	f000 f9ff 	bl	800c7dc <memcpy>
 800c3de:	2201      	movs	r2, #1
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f000 fc1a 	bl	800cc1c <__lshift>
 800c3e8:	9b00      	ldr	r3, [sp, #0]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	9b00      	ldr	r3, [sp, #0]
 800c3f0:	444b      	add	r3, r9
 800c3f2:	9307      	str	r3, [sp, #28]
 800c3f4:	9b02      	ldr	r3, [sp, #8]
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	46b8      	mov	r8, r7
 800c3fc:	9306      	str	r3, [sp, #24]
 800c3fe:	4607      	mov	r7, r0
 800c400:	9b01      	ldr	r3, [sp, #4]
 800c402:	4631      	mov	r1, r6
 800c404:	3b01      	subs	r3, #1
 800c406:	4658      	mov	r0, fp
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	f7ff fa69 	bl	800b8e0 <quorem>
 800c40e:	4603      	mov	r3, r0
 800c410:	3330      	adds	r3, #48	; 0x30
 800c412:	9004      	str	r0, [sp, #16]
 800c414:	4641      	mov	r1, r8
 800c416:	4658      	mov	r0, fp
 800c418:	9308      	str	r3, [sp, #32]
 800c41a:	f000 fc6b 	bl	800ccf4 <__mcmp>
 800c41e:	463a      	mov	r2, r7
 800c420:	4681      	mov	r9, r0
 800c422:	4631      	mov	r1, r6
 800c424:	4620      	mov	r0, r4
 800c426:	f000 fc81 	bl	800cd2c <__mdiff>
 800c42a:	68c2      	ldr	r2, [r0, #12]
 800c42c:	9b08      	ldr	r3, [sp, #32]
 800c42e:	4605      	mov	r5, r0
 800c430:	bb02      	cbnz	r2, 800c474 <_dtoa_r+0xa7c>
 800c432:	4601      	mov	r1, r0
 800c434:	4658      	mov	r0, fp
 800c436:	f000 fc5d 	bl	800ccf4 <__mcmp>
 800c43a:	9b08      	ldr	r3, [sp, #32]
 800c43c:	4602      	mov	r2, r0
 800c43e:	4629      	mov	r1, r5
 800c440:	4620      	mov	r0, r4
 800c442:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c446:	f000 fa17 	bl	800c878 <_Bfree>
 800c44a:	9b05      	ldr	r3, [sp, #20]
 800c44c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c44e:	9d01      	ldr	r5, [sp, #4]
 800c450:	ea43 0102 	orr.w	r1, r3, r2
 800c454:	9b06      	ldr	r3, [sp, #24]
 800c456:	430b      	orrs	r3, r1
 800c458:	9b08      	ldr	r3, [sp, #32]
 800c45a:	d10d      	bne.n	800c478 <_dtoa_r+0xa80>
 800c45c:	2b39      	cmp	r3, #57	; 0x39
 800c45e:	d029      	beq.n	800c4b4 <_dtoa_r+0xabc>
 800c460:	f1b9 0f00 	cmp.w	r9, #0
 800c464:	dd01      	ble.n	800c46a <_dtoa_r+0xa72>
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	3331      	adds	r3, #49	; 0x31
 800c46a:	9a02      	ldr	r2, [sp, #8]
 800c46c:	7013      	strb	r3, [r2, #0]
 800c46e:	e774      	b.n	800c35a <_dtoa_r+0x962>
 800c470:	4638      	mov	r0, r7
 800c472:	e7b9      	b.n	800c3e8 <_dtoa_r+0x9f0>
 800c474:	2201      	movs	r2, #1
 800c476:	e7e2      	b.n	800c43e <_dtoa_r+0xa46>
 800c478:	f1b9 0f00 	cmp.w	r9, #0
 800c47c:	db06      	blt.n	800c48c <_dtoa_r+0xa94>
 800c47e:	9905      	ldr	r1, [sp, #20]
 800c480:	ea41 0909 	orr.w	r9, r1, r9
 800c484:	9906      	ldr	r1, [sp, #24]
 800c486:	ea59 0101 	orrs.w	r1, r9, r1
 800c48a:	d120      	bne.n	800c4ce <_dtoa_r+0xad6>
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	ddec      	ble.n	800c46a <_dtoa_r+0xa72>
 800c490:	4659      	mov	r1, fp
 800c492:	2201      	movs	r2, #1
 800c494:	4620      	mov	r0, r4
 800c496:	9301      	str	r3, [sp, #4]
 800c498:	f000 fbc0 	bl	800cc1c <__lshift>
 800c49c:	4631      	mov	r1, r6
 800c49e:	4683      	mov	fp, r0
 800c4a0:	f000 fc28 	bl	800ccf4 <__mcmp>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	dc02      	bgt.n	800c4b0 <_dtoa_r+0xab8>
 800c4aa:	d1de      	bne.n	800c46a <_dtoa_r+0xa72>
 800c4ac:	07da      	lsls	r2, r3, #31
 800c4ae:	d5dc      	bpl.n	800c46a <_dtoa_r+0xa72>
 800c4b0:	2b39      	cmp	r3, #57	; 0x39
 800c4b2:	d1d8      	bne.n	800c466 <_dtoa_r+0xa6e>
 800c4b4:	9a02      	ldr	r2, [sp, #8]
 800c4b6:	2339      	movs	r3, #57	; 0x39
 800c4b8:	7013      	strb	r3, [r2, #0]
 800c4ba:	462b      	mov	r3, r5
 800c4bc:	461d      	mov	r5, r3
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c4c4:	2a39      	cmp	r2, #57	; 0x39
 800c4c6:	d050      	beq.n	800c56a <_dtoa_r+0xb72>
 800c4c8:	3201      	adds	r2, #1
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	e745      	b.n	800c35a <_dtoa_r+0x962>
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	dd03      	ble.n	800c4da <_dtoa_r+0xae2>
 800c4d2:	2b39      	cmp	r3, #57	; 0x39
 800c4d4:	d0ee      	beq.n	800c4b4 <_dtoa_r+0xabc>
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	e7c7      	b.n	800c46a <_dtoa_r+0xa72>
 800c4da:	9a01      	ldr	r2, [sp, #4]
 800c4dc:	9907      	ldr	r1, [sp, #28]
 800c4de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c4e2:	428a      	cmp	r2, r1
 800c4e4:	d02a      	beq.n	800c53c <_dtoa_r+0xb44>
 800c4e6:	4659      	mov	r1, fp
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	220a      	movs	r2, #10
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f000 f9e5 	bl	800c8bc <__multadd>
 800c4f2:	45b8      	cmp	r8, r7
 800c4f4:	4683      	mov	fp, r0
 800c4f6:	f04f 0300 	mov.w	r3, #0
 800c4fa:	f04f 020a 	mov.w	r2, #10
 800c4fe:	4641      	mov	r1, r8
 800c500:	4620      	mov	r0, r4
 800c502:	d107      	bne.n	800c514 <_dtoa_r+0xb1c>
 800c504:	f000 f9da 	bl	800c8bc <__multadd>
 800c508:	4680      	mov	r8, r0
 800c50a:	4607      	mov	r7, r0
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	3301      	adds	r3, #1
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	e775      	b.n	800c400 <_dtoa_r+0xa08>
 800c514:	f000 f9d2 	bl	800c8bc <__multadd>
 800c518:	4639      	mov	r1, r7
 800c51a:	4680      	mov	r8, r0
 800c51c:	2300      	movs	r3, #0
 800c51e:	220a      	movs	r2, #10
 800c520:	4620      	mov	r0, r4
 800c522:	f000 f9cb 	bl	800c8bc <__multadd>
 800c526:	4607      	mov	r7, r0
 800c528:	e7f0      	b.n	800c50c <_dtoa_r+0xb14>
 800c52a:	f1b9 0f00 	cmp.w	r9, #0
 800c52e:	9a00      	ldr	r2, [sp, #0]
 800c530:	bfcc      	ite	gt
 800c532:	464d      	movgt	r5, r9
 800c534:	2501      	movle	r5, #1
 800c536:	4415      	add	r5, r2
 800c538:	f04f 0800 	mov.w	r8, #0
 800c53c:	4659      	mov	r1, fp
 800c53e:	2201      	movs	r2, #1
 800c540:	4620      	mov	r0, r4
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	f000 fb6a 	bl	800cc1c <__lshift>
 800c548:	4631      	mov	r1, r6
 800c54a:	4683      	mov	fp, r0
 800c54c:	f000 fbd2 	bl	800ccf4 <__mcmp>
 800c550:	2800      	cmp	r0, #0
 800c552:	dcb2      	bgt.n	800c4ba <_dtoa_r+0xac2>
 800c554:	d102      	bne.n	800c55c <_dtoa_r+0xb64>
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	07db      	lsls	r3, r3, #31
 800c55a:	d4ae      	bmi.n	800c4ba <_dtoa_r+0xac2>
 800c55c:	462b      	mov	r3, r5
 800c55e:	461d      	mov	r5, r3
 800c560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c564:	2a30      	cmp	r2, #48	; 0x30
 800c566:	d0fa      	beq.n	800c55e <_dtoa_r+0xb66>
 800c568:	e6f7      	b.n	800c35a <_dtoa_r+0x962>
 800c56a:	9a00      	ldr	r2, [sp, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d1a5      	bne.n	800c4bc <_dtoa_r+0xac4>
 800c570:	f10a 0a01 	add.w	sl, sl, #1
 800c574:	2331      	movs	r3, #49	; 0x31
 800c576:	e779      	b.n	800c46c <_dtoa_r+0xa74>
 800c578:	4b13      	ldr	r3, [pc, #76]	; (800c5c8 <_dtoa_r+0xbd0>)
 800c57a:	f7ff baaf 	b.w	800badc <_dtoa_r+0xe4>
 800c57e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c580:	2b00      	cmp	r3, #0
 800c582:	f47f aa86 	bne.w	800ba92 <_dtoa_r+0x9a>
 800c586:	4b11      	ldr	r3, [pc, #68]	; (800c5cc <_dtoa_r+0xbd4>)
 800c588:	f7ff baa8 	b.w	800badc <_dtoa_r+0xe4>
 800c58c:	f1b9 0f00 	cmp.w	r9, #0
 800c590:	dc03      	bgt.n	800c59a <_dtoa_r+0xba2>
 800c592:	9b05      	ldr	r3, [sp, #20]
 800c594:	2b02      	cmp	r3, #2
 800c596:	f73f aec9 	bgt.w	800c32c <_dtoa_r+0x934>
 800c59a:	9d00      	ldr	r5, [sp, #0]
 800c59c:	4631      	mov	r1, r6
 800c59e:	4658      	mov	r0, fp
 800c5a0:	f7ff f99e 	bl	800b8e0 <quorem>
 800c5a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c5a8:	f805 3b01 	strb.w	r3, [r5], #1
 800c5ac:	9a00      	ldr	r2, [sp, #0]
 800c5ae:	1aaa      	subs	r2, r5, r2
 800c5b0:	4591      	cmp	r9, r2
 800c5b2:	ddba      	ble.n	800c52a <_dtoa_r+0xb32>
 800c5b4:	4659      	mov	r1, fp
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	220a      	movs	r2, #10
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 f97e 	bl	800c8bc <__multadd>
 800c5c0:	4683      	mov	fp, r0
 800c5c2:	e7eb      	b.n	800c59c <_dtoa_r+0xba4>
 800c5c4:	0800dfd4 	.word	0x0800dfd4
 800c5c8:	0800de2c 	.word	0x0800de2c
 800c5cc:	0800df51 	.word	0x0800df51

0800c5d0 <std>:
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	b510      	push	{r4, lr}
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5de:	6083      	str	r3, [r0, #8]
 800c5e0:	8181      	strh	r1, [r0, #12]
 800c5e2:	6643      	str	r3, [r0, #100]	; 0x64
 800c5e4:	81c2      	strh	r2, [r0, #14]
 800c5e6:	6183      	str	r3, [r0, #24]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	2208      	movs	r2, #8
 800c5ec:	305c      	adds	r0, #92	; 0x5c
 800c5ee:	f7fe fc43 	bl	800ae78 <memset>
 800c5f2:	4b05      	ldr	r3, [pc, #20]	; (800c608 <std+0x38>)
 800c5f4:	6263      	str	r3, [r4, #36]	; 0x24
 800c5f6:	4b05      	ldr	r3, [pc, #20]	; (800c60c <std+0x3c>)
 800c5f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5fa:	4b05      	ldr	r3, [pc, #20]	; (800c610 <std+0x40>)
 800c5fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5fe:	4b05      	ldr	r3, [pc, #20]	; (800c614 <std+0x44>)
 800c600:	6224      	str	r4, [r4, #32]
 800c602:	6323      	str	r3, [r4, #48]	; 0x30
 800c604:	bd10      	pop	{r4, pc}
 800c606:	bf00      	nop
 800c608:	0800d5f5 	.word	0x0800d5f5
 800c60c:	0800d617 	.word	0x0800d617
 800c610:	0800d64f 	.word	0x0800d64f
 800c614:	0800d673 	.word	0x0800d673

0800c618 <_cleanup_r>:
 800c618:	4901      	ldr	r1, [pc, #4]	; (800c620 <_cleanup_r+0x8>)
 800c61a:	f000 b8af 	b.w	800c77c <_fwalk_reent>
 800c61e:	bf00      	nop
 800c620:	0800d989 	.word	0x0800d989

0800c624 <__sfmoreglue>:
 800c624:	b570      	push	{r4, r5, r6, lr}
 800c626:	1e4a      	subs	r2, r1, #1
 800c628:	2568      	movs	r5, #104	; 0x68
 800c62a:	4355      	muls	r5, r2
 800c62c:	460e      	mov	r6, r1
 800c62e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c632:	f000 fcbf 	bl	800cfb4 <_malloc_r>
 800c636:	4604      	mov	r4, r0
 800c638:	b140      	cbz	r0, 800c64c <__sfmoreglue+0x28>
 800c63a:	2100      	movs	r1, #0
 800c63c:	e9c0 1600 	strd	r1, r6, [r0]
 800c640:	300c      	adds	r0, #12
 800c642:	60a0      	str	r0, [r4, #8]
 800c644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c648:	f7fe fc16 	bl	800ae78 <memset>
 800c64c:	4620      	mov	r0, r4
 800c64e:	bd70      	pop	{r4, r5, r6, pc}

0800c650 <__sfp_lock_acquire>:
 800c650:	4801      	ldr	r0, [pc, #4]	; (800c658 <__sfp_lock_acquire+0x8>)
 800c652:	f000 b8b8 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800c656:	bf00      	nop
 800c658:	2000334c 	.word	0x2000334c

0800c65c <__sfp_lock_release>:
 800c65c:	4801      	ldr	r0, [pc, #4]	; (800c664 <__sfp_lock_release+0x8>)
 800c65e:	f000 b8b3 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800c662:	bf00      	nop
 800c664:	2000334c 	.word	0x2000334c

0800c668 <__sinit_lock_acquire>:
 800c668:	4801      	ldr	r0, [pc, #4]	; (800c670 <__sinit_lock_acquire+0x8>)
 800c66a:	f000 b8ac 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800c66e:	bf00      	nop
 800c670:	20003347 	.word	0x20003347

0800c674 <__sinit_lock_release>:
 800c674:	4801      	ldr	r0, [pc, #4]	; (800c67c <__sinit_lock_release+0x8>)
 800c676:	f000 b8a7 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800c67a:	bf00      	nop
 800c67c:	20003347 	.word	0x20003347

0800c680 <__sinit>:
 800c680:	b510      	push	{r4, lr}
 800c682:	4604      	mov	r4, r0
 800c684:	f7ff fff0 	bl	800c668 <__sinit_lock_acquire>
 800c688:	69a3      	ldr	r3, [r4, #24]
 800c68a:	b11b      	cbz	r3, 800c694 <__sinit+0x14>
 800c68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c690:	f7ff bff0 	b.w	800c674 <__sinit_lock_release>
 800c694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c698:	6523      	str	r3, [r4, #80]	; 0x50
 800c69a:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <__sinit+0x68>)
 800c69c:	4a13      	ldr	r2, [pc, #76]	; (800c6ec <__sinit+0x6c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6a2:	42a3      	cmp	r3, r4
 800c6a4:	bf04      	itt	eq
 800c6a6:	2301      	moveq	r3, #1
 800c6a8:	61a3      	streq	r3, [r4, #24]
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f000 f820 	bl	800c6f0 <__sfp>
 800c6b0:	6060      	str	r0, [r4, #4]
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f000 f81c 	bl	800c6f0 <__sfp>
 800c6b8:	60a0      	str	r0, [r4, #8]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 f818 	bl	800c6f0 <__sfp>
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	60e0      	str	r0, [r4, #12]
 800c6c4:	2104      	movs	r1, #4
 800c6c6:	6860      	ldr	r0, [r4, #4]
 800c6c8:	f7ff ff82 	bl	800c5d0 <std>
 800c6cc:	68a0      	ldr	r0, [r4, #8]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	2109      	movs	r1, #9
 800c6d2:	f7ff ff7d 	bl	800c5d0 <std>
 800c6d6:	68e0      	ldr	r0, [r4, #12]
 800c6d8:	2202      	movs	r2, #2
 800c6da:	2112      	movs	r1, #18
 800c6dc:	f7ff ff78 	bl	800c5d0 <std>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	61a3      	str	r3, [r4, #24]
 800c6e4:	e7d2      	b.n	800c68c <__sinit+0xc>
 800c6e6:	bf00      	nop
 800c6e8:	0800de18 	.word	0x0800de18
 800c6ec:	0800c619 	.word	0x0800c619

0800c6f0 <__sfp>:
 800c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f2:	4607      	mov	r7, r0
 800c6f4:	f7ff ffac 	bl	800c650 <__sfp_lock_acquire>
 800c6f8:	4b1e      	ldr	r3, [pc, #120]	; (800c774 <__sfp+0x84>)
 800c6fa:	681e      	ldr	r6, [r3, #0]
 800c6fc:	69b3      	ldr	r3, [r6, #24]
 800c6fe:	b913      	cbnz	r3, 800c706 <__sfp+0x16>
 800c700:	4630      	mov	r0, r6
 800c702:	f7ff ffbd 	bl	800c680 <__sinit>
 800c706:	3648      	adds	r6, #72	; 0x48
 800c708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	d503      	bpl.n	800c718 <__sfp+0x28>
 800c710:	6833      	ldr	r3, [r6, #0]
 800c712:	b30b      	cbz	r3, 800c758 <__sfp+0x68>
 800c714:	6836      	ldr	r6, [r6, #0]
 800c716:	e7f7      	b.n	800c708 <__sfp+0x18>
 800c718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c71c:	b9d5      	cbnz	r5, 800c754 <__sfp+0x64>
 800c71e:	4b16      	ldr	r3, [pc, #88]	; (800c778 <__sfp+0x88>)
 800c720:	60e3      	str	r3, [r4, #12]
 800c722:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c726:	6665      	str	r5, [r4, #100]	; 0x64
 800c728:	f000 f84c 	bl	800c7c4 <__retarget_lock_init_recursive>
 800c72c:	f7ff ff96 	bl	800c65c <__sfp_lock_release>
 800c730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c738:	6025      	str	r5, [r4, #0]
 800c73a:	61a5      	str	r5, [r4, #24]
 800c73c:	2208      	movs	r2, #8
 800c73e:	4629      	mov	r1, r5
 800c740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c744:	f7fe fb98 	bl	800ae78 <memset>
 800c748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c74c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c750:	4620      	mov	r0, r4
 800c752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c754:	3468      	adds	r4, #104	; 0x68
 800c756:	e7d9      	b.n	800c70c <__sfp+0x1c>
 800c758:	2104      	movs	r1, #4
 800c75a:	4638      	mov	r0, r7
 800c75c:	f7ff ff62 	bl	800c624 <__sfmoreglue>
 800c760:	4604      	mov	r4, r0
 800c762:	6030      	str	r0, [r6, #0]
 800c764:	2800      	cmp	r0, #0
 800c766:	d1d5      	bne.n	800c714 <__sfp+0x24>
 800c768:	f7ff ff78 	bl	800c65c <__sfp_lock_release>
 800c76c:	230c      	movs	r3, #12
 800c76e:	603b      	str	r3, [r7, #0]
 800c770:	e7ee      	b.n	800c750 <__sfp+0x60>
 800c772:	bf00      	nop
 800c774:	0800de18 	.word	0x0800de18
 800c778:	ffff0001 	.word	0xffff0001

0800c77c <_fwalk_reent>:
 800c77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c780:	4606      	mov	r6, r0
 800c782:	4688      	mov	r8, r1
 800c784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c788:	2700      	movs	r7, #0
 800c78a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c78e:	f1b9 0901 	subs.w	r9, r9, #1
 800c792:	d505      	bpl.n	800c7a0 <_fwalk_reent+0x24>
 800c794:	6824      	ldr	r4, [r4, #0]
 800c796:	2c00      	cmp	r4, #0
 800c798:	d1f7      	bne.n	800c78a <_fwalk_reent+0xe>
 800c79a:	4638      	mov	r0, r7
 800c79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a0:	89ab      	ldrh	r3, [r5, #12]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d907      	bls.n	800c7b6 <_fwalk_reent+0x3a>
 800c7a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	d003      	beq.n	800c7b6 <_fwalk_reent+0x3a>
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	47c0      	blx	r8
 800c7b4:	4307      	orrs	r7, r0
 800c7b6:	3568      	adds	r5, #104	; 0x68
 800c7b8:	e7e9      	b.n	800c78e <_fwalk_reent+0x12>
	...

0800c7bc <_localeconv_r>:
 800c7bc:	4800      	ldr	r0, [pc, #0]	; (800c7c0 <_localeconv_r+0x4>)
 800c7be:	4770      	bx	lr
 800c7c0:	200003c0 	.word	0x200003c0

0800c7c4 <__retarget_lock_init_recursive>:
 800c7c4:	4770      	bx	lr

0800c7c6 <__retarget_lock_acquire_recursive>:
 800c7c6:	4770      	bx	lr

0800c7c8 <__retarget_lock_release_recursive>:
 800c7c8:	4770      	bx	lr
	...

0800c7cc <malloc>:
 800c7cc:	4b02      	ldr	r3, [pc, #8]	; (800c7d8 <malloc+0xc>)
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	6818      	ldr	r0, [r3, #0]
 800c7d2:	f000 bbef 	b.w	800cfb4 <_malloc_r>
 800c7d6:	bf00      	nop
 800c7d8:	2000026c 	.word	0x2000026c

0800c7dc <memcpy>:
 800c7dc:	440a      	add	r2, r1
 800c7de:	4291      	cmp	r1, r2
 800c7e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c7e4:	d100      	bne.n	800c7e8 <memcpy+0xc>
 800c7e6:	4770      	bx	lr
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7f2:	4291      	cmp	r1, r2
 800c7f4:	d1f9      	bne.n	800c7ea <memcpy+0xe>
 800c7f6:	bd10      	pop	{r4, pc}

0800c7f8 <_Balloc>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	b976      	cbnz	r6, 800c820 <_Balloc+0x28>
 800c802:	2010      	movs	r0, #16
 800c804:	f7ff ffe2 	bl	800c7cc <malloc>
 800c808:	4602      	mov	r2, r0
 800c80a:	6260      	str	r0, [r4, #36]	; 0x24
 800c80c:	b920      	cbnz	r0, 800c818 <_Balloc+0x20>
 800c80e:	4b18      	ldr	r3, [pc, #96]	; (800c870 <_Balloc+0x78>)
 800c810:	4818      	ldr	r0, [pc, #96]	; (800c874 <_Balloc+0x7c>)
 800c812:	2166      	movs	r1, #102	; 0x66
 800c814:	f001 f804 	bl	800d820 <__assert_func>
 800c818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c81c:	6006      	str	r6, [r0, #0]
 800c81e:	60c6      	str	r6, [r0, #12]
 800c820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c822:	68f3      	ldr	r3, [r6, #12]
 800c824:	b183      	cbz	r3, 800c848 <_Balloc+0x50>
 800c826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c82e:	b9b8      	cbnz	r0, 800c860 <_Balloc+0x68>
 800c830:	2101      	movs	r1, #1
 800c832:	fa01 f605 	lsl.w	r6, r1, r5
 800c836:	1d72      	adds	r2, r6, #5
 800c838:	0092      	lsls	r2, r2, #2
 800c83a:	4620      	mov	r0, r4
 800c83c:	f000 fb5a 	bl	800cef4 <_calloc_r>
 800c840:	b160      	cbz	r0, 800c85c <_Balloc+0x64>
 800c842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c846:	e00e      	b.n	800c866 <_Balloc+0x6e>
 800c848:	2221      	movs	r2, #33	; 0x21
 800c84a:	2104      	movs	r1, #4
 800c84c:	4620      	mov	r0, r4
 800c84e:	f000 fb51 	bl	800cef4 <_calloc_r>
 800c852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c854:	60f0      	str	r0, [r6, #12]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e4      	bne.n	800c826 <_Balloc+0x2e>
 800c85c:	2000      	movs	r0, #0
 800c85e:	bd70      	pop	{r4, r5, r6, pc}
 800c860:	6802      	ldr	r2, [r0, #0]
 800c862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c866:	2300      	movs	r3, #0
 800c868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c86c:	e7f7      	b.n	800c85e <_Balloc+0x66>
 800c86e:	bf00      	nop
 800c870:	0800df5e 	.word	0x0800df5e
 800c874:	0800e048 	.word	0x0800e048

0800c878 <_Bfree>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c87c:	4605      	mov	r5, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	b976      	cbnz	r6, 800c8a0 <_Bfree+0x28>
 800c882:	2010      	movs	r0, #16
 800c884:	f7ff ffa2 	bl	800c7cc <malloc>
 800c888:	4602      	mov	r2, r0
 800c88a:	6268      	str	r0, [r5, #36]	; 0x24
 800c88c:	b920      	cbnz	r0, 800c898 <_Bfree+0x20>
 800c88e:	4b09      	ldr	r3, [pc, #36]	; (800c8b4 <_Bfree+0x3c>)
 800c890:	4809      	ldr	r0, [pc, #36]	; (800c8b8 <_Bfree+0x40>)
 800c892:	218a      	movs	r1, #138	; 0x8a
 800c894:	f000 ffc4 	bl	800d820 <__assert_func>
 800c898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c89c:	6006      	str	r6, [r0, #0]
 800c89e:	60c6      	str	r6, [r0, #12]
 800c8a0:	b13c      	cbz	r4, 800c8b2 <_Bfree+0x3a>
 800c8a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8a4:	6862      	ldr	r2, [r4, #4]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8ac:	6021      	str	r1, [r4, #0]
 800c8ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
 800c8b4:	0800df5e 	.word	0x0800df5e
 800c8b8:	0800e048 	.word	0x0800e048

0800c8bc <__multadd>:
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c0:	690e      	ldr	r6, [r1, #16]
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	4698      	mov	r8, r3
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	f101 0014 	add.w	r0, r1, #20
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	6805      	ldr	r5, [r0, #0]
 800c8d0:	b2a9      	uxth	r1, r5
 800c8d2:	fb02 8101 	mla	r1, r2, r1, r8
 800c8d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c8da:	0c2d      	lsrs	r5, r5, #16
 800c8dc:	fb02 c505 	mla	r5, r2, r5, ip
 800c8e0:	b289      	uxth	r1, r1
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c8e8:	429e      	cmp	r6, r3
 800c8ea:	f840 1b04 	str.w	r1, [r0], #4
 800c8ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c8f2:	dcec      	bgt.n	800c8ce <__multadd+0x12>
 800c8f4:	f1b8 0f00 	cmp.w	r8, #0
 800c8f8:	d022      	beq.n	800c940 <__multadd+0x84>
 800c8fa:	68a3      	ldr	r3, [r4, #8]
 800c8fc:	42b3      	cmp	r3, r6
 800c8fe:	dc19      	bgt.n	800c934 <__multadd+0x78>
 800c900:	6861      	ldr	r1, [r4, #4]
 800c902:	4638      	mov	r0, r7
 800c904:	3101      	adds	r1, #1
 800c906:	f7ff ff77 	bl	800c7f8 <_Balloc>
 800c90a:	4605      	mov	r5, r0
 800c90c:	b928      	cbnz	r0, 800c91a <__multadd+0x5e>
 800c90e:	4602      	mov	r2, r0
 800c910:	4b0d      	ldr	r3, [pc, #52]	; (800c948 <__multadd+0x8c>)
 800c912:	480e      	ldr	r0, [pc, #56]	; (800c94c <__multadd+0x90>)
 800c914:	21b5      	movs	r1, #181	; 0xb5
 800c916:	f000 ff83 	bl	800d820 <__assert_func>
 800c91a:	6922      	ldr	r2, [r4, #16]
 800c91c:	3202      	adds	r2, #2
 800c91e:	f104 010c 	add.w	r1, r4, #12
 800c922:	0092      	lsls	r2, r2, #2
 800c924:	300c      	adds	r0, #12
 800c926:	f7ff ff59 	bl	800c7dc <memcpy>
 800c92a:	4621      	mov	r1, r4
 800c92c:	4638      	mov	r0, r7
 800c92e:	f7ff ffa3 	bl	800c878 <_Bfree>
 800c932:	462c      	mov	r4, r5
 800c934:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c938:	3601      	adds	r6, #1
 800c93a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c93e:	6126      	str	r6, [r4, #16]
 800c940:	4620      	mov	r0, r4
 800c942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c946:	bf00      	nop
 800c948:	0800dfd4 	.word	0x0800dfd4
 800c94c:	0800e048 	.word	0x0800e048

0800c950 <__hi0bits>:
 800c950:	0c03      	lsrs	r3, r0, #16
 800c952:	041b      	lsls	r3, r3, #16
 800c954:	b9d3      	cbnz	r3, 800c98c <__hi0bits+0x3c>
 800c956:	0400      	lsls	r0, r0, #16
 800c958:	2310      	movs	r3, #16
 800c95a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c95e:	bf04      	itt	eq
 800c960:	0200      	lsleq	r0, r0, #8
 800c962:	3308      	addeq	r3, #8
 800c964:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c968:	bf04      	itt	eq
 800c96a:	0100      	lsleq	r0, r0, #4
 800c96c:	3304      	addeq	r3, #4
 800c96e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c972:	bf04      	itt	eq
 800c974:	0080      	lsleq	r0, r0, #2
 800c976:	3302      	addeq	r3, #2
 800c978:	2800      	cmp	r0, #0
 800c97a:	db05      	blt.n	800c988 <__hi0bits+0x38>
 800c97c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c980:	f103 0301 	add.w	r3, r3, #1
 800c984:	bf08      	it	eq
 800c986:	2320      	moveq	r3, #32
 800c988:	4618      	mov	r0, r3
 800c98a:	4770      	bx	lr
 800c98c:	2300      	movs	r3, #0
 800c98e:	e7e4      	b.n	800c95a <__hi0bits+0xa>

0800c990 <__lo0bits>:
 800c990:	6803      	ldr	r3, [r0, #0]
 800c992:	f013 0207 	ands.w	r2, r3, #7
 800c996:	4601      	mov	r1, r0
 800c998:	d00b      	beq.n	800c9b2 <__lo0bits+0x22>
 800c99a:	07da      	lsls	r2, r3, #31
 800c99c:	d424      	bmi.n	800c9e8 <__lo0bits+0x58>
 800c99e:	0798      	lsls	r0, r3, #30
 800c9a0:	bf49      	itett	mi
 800c9a2:	085b      	lsrmi	r3, r3, #1
 800c9a4:	089b      	lsrpl	r3, r3, #2
 800c9a6:	2001      	movmi	r0, #1
 800c9a8:	600b      	strmi	r3, [r1, #0]
 800c9aa:	bf5c      	itt	pl
 800c9ac:	600b      	strpl	r3, [r1, #0]
 800c9ae:	2002      	movpl	r0, #2
 800c9b0:	4770      	bx	lr
 800c9b2:	b298      	uxth	r0, r3
 800c9b4:	b9b0      	cbnz	r0, 800c9e4 <__lo0bits+0x54>
 800c9b6:	0c1b      	lsrs	r3, r3, #16
 800c9b8:	2010      	movs	r0, #16
 800c9ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c9be:	bf04      	itt	eq
 800c9c0:	0a1b      	lsreq	r3, r3, #8
 800c9c2:	3008      	addeq	r0, #8
 800c9c4:	071a      	lsls	r2, r3, #28
 800c9c6:	bf04      	itt	eq
 800c9c8:	091b      	lsreq	r3, r3, #4
 800c9ca:	3004      	addeq	r0, #4
 800c9cc:	079a      	lsls	r2, r3, #30
 800c9ce:	bf04      	itt	eq
 800c9d0:	089b      	lsreq	r3, r3, #2
 800c9d2:	3002      	addeq	r0, #2
 800c9d4:	07da      	lsls	r2, r3, #31
 800c9d6:	d403      	bmi.n	800c9e0 <__lo0bits+0x50>
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	f100 0001 	add.w	r0, r0, #1
 800c9de:	d005      	beq.n	800c9ec <__lo0bits+0x5c>
 800c9e0:	600b      	str	r3, [r1, #0]
 800c9e2:	4770      	bx	lr
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	e7e8      	b.n	800c9ba <__lo0bits+0x2a>
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	4770      	bx	lr
 800c9ec:	2020      	movs	r0, #32
 800c9ee:	4770      	bx	lr

0800c9f0 <__i2b>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	f7ff feff 	bl	800c7f8 <_Balloc>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	b928      	cbnz	r0, 800ca0a <__i2b+0x1a>
 800c9fe:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <__i2b+0x24>)
 800ca00:	4805      	ldr	r0, [pc, #20]	; (800ca18 <__i2b+0x28>)
 800ca02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca06:	f000 ff0b 	bl	800d820 <__assert_func>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	6144      	str	r4, [r0, #20]
 800ca0e:	6103      	str	r3, [r0, #16]
 800ca10:	bd10      	pop	{r4, pc}
 800ca12:	bf00      	nop
 800ca14:	0800dfd4 	.word	0x0800dfd4
 800ca18:	0800e048 	.word	0x0800e048

0800ca1c <__multiply>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	4614      	mov	r4, r2
 800ca22:	690a      	ldr	r2, [r1, #16]
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	bfb8      	it	lt
 800ca2a:	460b      	movlt	r3, r1
 800ca2c:	460d      	mov	r5, r1
 800ca2e:	bfbc      	itt	lt
 800ca30:	4625      	movlt	r5, r4
 800ca32:	461c      	movlt	r4, r3
 800ca34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ca38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ca3c:	68ab      	ldr	r3, [r5, #8]
 800ca3e:	6869      	ldr	r1, [r5, #4]
 800ca40:	eb0a 0709 	add.w	r7, sl, r9
 800ca44:	42bb      	cmp	r3, r7
 800ca46:	b085      	sub	sp, #20
 800ca48:	bfb8      	it	lt
 800ca4a:	3101      	addlt	r1, #1
 800ca4c:	f7ff fed4 	bl	800c7f8 <_Balloc>
 800ca50:	b930      	cbnz	r0, 800ca60 <__multiply+0x44>
 800ca52:	4602      	mov	r2, r0
 800ca54:	4b42      	ldr	r3, [pc, #264]	; (800cb60 <__multiply+0x144>)
 800ca56:	4843      	ldr	r0, [pc, #268]	; (800cb64 <__multiply+0x148>)
 800ca58:	f240 115d 	movw	r1, #349	; 0x15d
 800ca5c:	f000 fee0 	bl	800d820 <__assert_func>
 800ca60:	f100 0614 	add.w	r6, r0, #20
 800ca64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ca68:	4633      	mov	r3, r6
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	4543      	cmp	r3, r8
 800ca6e:	d31e      	bcc.n	800caae <__multiply+0x92>
 800ca70:	f105 0c14 	add.w	ip, r5, #20
 800ca74:	f104 0314 	add.w	r3, r4, #20
 800ca78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ca7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ca80:	9202      	str	r2, [sp, #8]
 800ca82:	ebac 0205 	sub.w	r2, ip, r5
 800ca86:	3a15      	subs	r2, #21
 800ca88:	f022 0203 	bic.w	r2, r2, #3
 800ca8c:	3204      	adds	r2, #4
 800ca8e:	f105 0115 	add.w	r1, r5, #21
 800ca92:	458c      	cmp	ip, r1
 800ca94:	bf38      	it	cc
 800ca96:	2204      	movcc	r2, #4
 800ca98:	9201      	str	r2, [sp, #4]
 800ca9a:	9a02      	ldr	r2, [sp, #8]
 800ca9c:	9303      	str	r3, [sp, #12]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d808      	bhi.n	800cab4 <__multiply+0x98>
 800caa2:	2f00      	cmp	r7, #0
 800caa4:	dc55      	bgt.n	800cb52 <__multiply+0x136>
 800caa6:	6107      	str	r7, [r0, #16]
 800caa8:	b005      	add	sp, #20
 800caaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caae:	f843 2b04 	str.w	r2, [r3], #4
 800cab2:	e7db      	b.n	800ca6c <__multiply+0x50>
 800cab4:	f8b3 a000 	ldrh.w	sl, [r3]
 800cab8:	f1ba 0f00 	cmp.w	sl, #0
 800cabc:	d020      	beq.n	800cb00 <__multiply+0xe4>
 800cabe:	f105 0e14 	add.w	lr, r5, #20
 800cac2:	46b1      	mov	r9, r6
 800cac4:	2200      	movs	r2, #0
 800cac6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800caca:	f8d9 b000 	ldr.w	fp, [r9]
 800cace:	b2a1      	uxth	r1, r4
 800cad0:	fa1f fb8b 	uxth.w	fp, fp
 800cad4:	fb0a b101 	mla	r1, sl, r1, fp
 800cad8:	4411      	add	r1, r2
 800cada:	f8d9 2000 	ldr.w	r2, [r9]
 800cade:	0c24      	lsrs	r4, r4, #16
 800cae0:	0c12      	lsrs	r2, r2, #16
 800cae2:	fb0a 2404 	mla	r4, sl, r4, r2
 800cae6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800caea:	b289      	uxth	r1, r1
 800caec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800caf0:	45f4      	cmp	ip, lr
 800caf2:	f849 1b04 	str.w	r1, [r9], #4
 800caf6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cafa:	d8e4      	bhi.n	800cac6 <__multiply+0xaa>
 800cafc:	9901      	ldr	r1, [sp, #4]
 800cafe:	5072      	str	r2, [r6, r1]
 800cb00:	9a03      	ldr	r2, [sp, #12]
 800cb02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb06:	3304      	adds	r3, #4
 800cb08:	f1b9 0f00 	cmp.w	r9, #0
 800cb0c:	d01f      	beq.n	800cb4e <__multiply+0x132>
 800cb0e:	6834      	ldr	r4, [r6, #0]
 800cb10:	f105 0114 	add.w	r1, r5, #20
 800cb14:	46b6      	mov	lr, r6
 800cb16:	f04f 0a00 	mov.w	sl, #0
 800cb1a:	880a      	ldrh	r2, [r1, #0]
 800cb1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cb20:	fb09 b202 	mla	r2, r9, r2, fp
 800cb24:	4492      	add	sl, r2
 800cb26:	b2a4      	uxth	r4, r4
 800cb28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cb2c:	f84e 4b04 	str.w	r4, [lr], #4
 800cb30:	f851 4b04 	ldr.w	r4, [r1], #4
 800cb34:	f8be 2000 	ldrh.w	r2, [lr]
 800cb38:	0c24      	lsrs	r4, r4, #16
 800cb3a:	fb09 2404 	mla	r4, r9, r4, r2
 800cb3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cb42:	458c      	cmp	ip, r1
 800cb44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cb48:	d8e7      	bhi.n	800cb1a <__multiply+0xfe>
 800cb4a:	9a01      	ldr	r2, [sp, #4]
 800cb4c:	50b4      	str	r4, [r6, r2]
 800cb4e:	3604      	adds	r6, #4
 800cb50:	e7a3      	b.n	800ca9a <__multiply+0x7e>
 800cb52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1a5      	bne.n	800caa6 <__multiply+0x8a>
 800cb5a:	3f01      	subs	r7, #1
 800cb5c:	e7a1      	b.n	800caa2 <__multiply+0x86>
 800cb5e:	bf00      	nop
 800cb60:	0800dfd4 	.word	0x0800dfd4
 800cb64:	0800e048 	.word	0x0800e048

0800cb68 <__pow5mult>:
 800cb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb6c:	4615      	mov	r5, r2
 800cb6e:	f012 0203 	ands.w	r2, r2, #3
 800cb72:	4606      	mov	r6, r0
 800cb74:	460f      	mov	r7, r1
 800cb76:	d007      	beq.n	800cb88 <__pow5mult+0x20>
 800cb78:	4c25      	ldr	r4, [pc, #148]	; (800cc10 <__pow5mult+0xa8>)
 800cb7a:	3a01      	subs	r2, #1
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb82:	f7ff fe9b 	bl	800c8bc <__multadd>
 800cb86:	4607      	mov	r7, r0
 800cb88:	10ad      	asrs	r5, r5, #2
 800cb8a:	d03d      	beq.n	800cc08 <__pow5mult+0xa0>
 800cb8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb8e:	b97c      	cbnz	r4, 800cbb0 <__pow5mult+0x48>
 800cb90:	2010      	movs	r0, #16
 800cb92:	f7ff fe1b 	bl	800c7cc <malloc>
 800cb96:	4602      	mov	r2, r0
 800cb98:	6270      	str	r0, [r6, #36]	; 0x24
 800cb9a:	b928      	cbnz	r0, 800cba8 <__pow5mult+0x40>
 800cb9c:	4b1d      	ldr	r3, [pc, #116]	; (800cc14 <__pow5mult+0xac>)
 800cb9e:	481e      	ldr	r0, [pc, #120]	; (800cc18 <__pow5mult+0xb0>)
 800cba0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cba4:	f000 fe3c 	bl	800d820 <__assert_func>
 800cba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbac:	6004      	str	r4, [r0, #0]
 800cbae:	60c4      	str	r4, [r0, #12]
 800cbb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cbb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbb8:	b94c      	cbnz	r4, 800cbce <__pow5mult+0x66>
 800cbba:	f240 2171 	movw	r1, #625	; 0x271
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f7ff ff16 	bl	800c9f0 <__i2b>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbca:	4604      	mov	r4, r0
 800cbcc:	6003      	str	r3, [r0, #0]
 800cbce:	f04f 0900 	mov.w	r9, #0
 800cbd2:	07eb      	lsls	r3, r5, #31
 800cbd4:	d50a      	bpl.n	800cbec <__pow5mult+0x84>
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4622      	mov	r2, r4
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f7ff ff1e 	bl	800ca1c <__multiply>
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	4680      	mov	r8, r0
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	f7ff fe47 	bl	800c878 <_Bfree>
 800cbea:	4647      	mov	r7, r8
 800cbec:	106d      	asrs	r5, r5, #1
 800cbee:	d00b      	beq.n	800cc08 <__pow5mult+0xa0>
 800cbf0:	6820      	ldr	r0, [r4, #0]
 800cbf2:	b938      	cbnz	r0, 800cc04 <__pow5mult+0x9c>
 800cbf4:	4622      	mov	r2, r4
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f7ff ff0f 	bl	800ca1c <__multiply>
 800cbfe:	6020      	str	r0, [r4, #0]
 800cc00:	f8c0 9000 	str.w	r9, [r0]
 800cc04:	4604      	mov	r4, r0
 800cc06:	e7e4      	b.n	800cbd2 <__pow5mult+0x6a>
 800cc08:	4638      	mov	r0, r7
 800cc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0e:	bf00      	nop
 800cc10:	0800e198 	.word	0x0800e198
 800cc14:	0800df5e 	.word	0x0800df5e
 800cc18:	0800e048 	.word	0x0800e048

0800cc1c <__lshift>:
 800cc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc20:	460c      	mov	r4, r1
 800cc22:	6849      	ldr	r1, [r1, #4]
 800cc24:	6923      	ldr	r3, [r4, #16]
 800cc26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc2a:	68a3      	ldr	r3, [r4, #8]
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	4691      	mov	r9, r2
 800cc30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc34:	f108 0601 	add.w	r6, r8, #1
 800cc38:	42b3      	cmp	r3, r6
 800cc3a:	db0b      	blt.n	800cc54 <__lshift+0x38>
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7ff fddb 	bl	800c7f8 <_Balloc>
 800cc42:	4605      	mov	r5, r0
 800cc44:	b948      	cbnz	r0, 800cc5a <__lshift+0x3e>
 800cc46:	4602      	mov	r2, r0
 800cc48:	4b28      	ldr	r3, [pc, #160]	; (800ccec <__lshift+0xd0>)
 800cc4a:	4829      	ldr	r0, [pc, #164]	; (800ccf0 <__lshift+0xd4>)
 800cc4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc50:	f000 fde6 	bl	800d820 <__assert_func>
 800cc54:	3101      	adds	r1, #1
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	e7ee      	b.n	800cc38 <__lshift+0x1c>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	f100 0114 	add.w	r1, r0, #20
 800cc60:	f100 0210 	add.w	r2, r0, #16
 800cc64:	4618      	mov	r0, r3
 800cc66:	4553      	cmp	r3, sl
 800cc68:	db33      	blt.n	800ccd2 <__lshift+0xb6>
 800cc6a:	6920      	ldr	r0, [r4, #16]
 800cc6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc70:	f104 0314 	add.w	r3, r4, #20
 800cc74:	f019 091f 	ands.w	r9, r9, #31
 800cc78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc80:	d02b      	beq.n	800ccda <__lshift+0xbe>
 800cc82:	f1c9 0e20 	rsb	lr, r9, #32
 800cc86:	468a      	mov	sl, r1
 800cc88:	2200      	movs	r2, #0
 800cc8a:	6818      	ldr	r0, [r3, #0]
 800cc8c:	fa00 f009 	lsl.w	r0, r0, r9
 800cc90:	4302      	orrs	r2, r0
 800cc92:	f84a 2b04 	str.w	r2, [sl], #4
 800cc96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc9a:	459c      	cmp	ip, r3
 800cc9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cca0:	d8f3      	bhi.n	800cc8a <__lshift+0x6e>
 800cca2:	ebac 0304 	sub.w	r3, ip, r4
 800cca6:	3b15      	subs	r3, #21
 800cca8:	f023 0303 	bic.w	r3, r3, #3
 800ccac:	3304      	adds	r3, #4
 800ccae:	f104 0015 	add.w	r0, r4, #21
 800ccb2:	4584      	cmp	ip, r0
 800ccb4:	bf38      	it	cc
 800ccb6:	2304      	movcc	r3, #4
 800ccb8:	50ca      	str	r2, [r1, r3]
 800ccba:	b10a      	cbz	r2, 800ccc0 <__lshift+0xa4>
 800ccbc:	f108 0602 	add.w	r6, r8, #2
 800ccc0:	3e01      	subs	r6, #1
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	612e      	str	r6, [r5, #16]
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	f7ff fdd6 	bl	800c878 <_Bfree>
 800cccc:	4628      	mov	r0, r5
 800ccce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	e7c5      	b.n	800cc66 <__lshift+0x4a>
 800ccda:	3904      	subs	r1, #4
 800ccdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cce0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cce4:	459c      	cmp	ip, r3
 800cce6:	d8f9      	bhi.n	800ccdc <__lshift+0xc0>
 800cce8:	e7ea      	b.n	800ccc0 <__lshift+0xa4>
 800ccea:	bf00      	nop
 800ccec:	0800dfd4 	.word	0x0800dfd4
 800ccf0:	0800e048 	.word	0x0800e048

0800ccf4 <__mcmp>:
 800ccf4:	b530      	push	{r4, r5, lr}
 800ccf6:	6902      	ldr	r2, [r0, #16]
 800ccf8:	690c      	ldr	r4, [r1, #16]
 800ccfa:	1b12      	subs	r2, r2, r4
 800ccfc:	d10e      	bne.n	800cd1c <__mcmp+0x28>
 800ccfe:	f100 0314 	add.w	r3, r0, #20
 800cd02:	3114      	adds	r1, #20
 800cd04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd14:	42a5      	cmp	r5, r4
 800cd16:	d003      	beq.n	800cd20 <__mcmp+0x2c>
 800cd18:	d305      	bcc.n	800cd26 <__mcmp+0x32>
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	bd30      	pop	{r4, r5, pc}
 800cd20:	4283      	cmp	r3, r0
 800cd22:	d3f3      	bcc.n	800cd0c <__mcmp+0x18>
 800cd24:	e7fa      	b.n	800cd1c <__mcmp+0x28>
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd2a:	e7f7      	b.n	800cd1c <__mcmp+0x28>

0800cd2c <__mdiff>:
 800cd2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	460c      	mov	r4, r1
 800cd32:	4606      	mov	r6, r0
 800cd34:	4611      	mov	r1, r2
 800cd36:	4620      	mov	r0, r4
 800cd38:	4617      	mov	r7, r2
 800cd3a:	f7ff ffdb 	bl	800ccf4 <__mcmp>
 800cd3e:	1e05      	subs	r5, r0, #0
 800cd40:	d110      	bne.n	800cd64 <__mdiff+0x38>
 800cd42:	4629      	mov	r1, r5
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7ff fd57 	bl	800c7f8 <_Balloc>
 800cd4a:	b930      	cbnz	r0, 800cd5a <__mdiff+0x2e>
 800cd4c:	4b39      	ldr	r3, [pc, #228]	; (800ce34 <__mdiff+0x108>)
 800cd4e:	4602      	mov	r2, r0
 800cd50:	f240 2132 	movw	r1, #562	; 0x232
 800cd54:	4838      	ldr	r0, [pc, #224]	; (800ce38 <__mdiff+0x10c>)
 800cd56:	f000 fd63 	bl	800d820 <__assert_func>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd64:	bfa4      	itt	ge
 800cd66:	463b      	movge	r3, r7
 800cd68:	4627      	movge	r7, r4
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	bfa6      	itte	ge
 800cd70:	461c      	movge	r4, r3
 800cd72:	2500      	movge	r5, #0
 800cd74:	2501      	movlt	r5, #1
 800cd76:	f7ff fd3f 	bl	800c7f8 <_Balloc>
 800cd7a:	b920      	cbnz	r0, 800cd86 <__mdiff+0x5a>
 800cd7c:	4b2d      	ldr	r3, [pc, #180]	; (800ce34 <__mdiff+0x108>)
 800cd7e:	4602      	mov	r2, r0
 800cd80:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cd84:	e7e6      	b.n	800cd54 <__mdiff+0x28>
 800cd86:	693e      	ldr	r6, [r7, #16]
 800cd88:	60c5      	str	r5, [r0, #12]
 800cd8a:	6925      	ldr	r5, [r4, #16]
 800cd8c:	f107 0114 	add.w	r1, r7, #20
 800cd90:	f104 0914 	add.w	r9, r4, #20
 800cd94:	f100 0e14 	add.w	lr, r0, #20
 800cd98:	f107 0210 	add.w	r2, r7, #16
 800cd9c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cda0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cda4:	46f2      	mov	sl, lr
 800cda6:	2700      	movs	r7, #0
 800cda8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cdac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cdb0:	fa1f f883 	uxth.w	r8, r3
 800cdb4:	fa17 f78b 	uxtah	r7, r7, fp
 800cdb8:	0c1b      	lsrs	r3, r3, #16
 800cdba:	eba7 0808 	sub.w	r8, r7, r8
 800cdbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cdc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cdc6:	fa1f f888 	uxth.w	r8, r8
 800cdca:	141f      	asrs	r7, r3, #16
 800cdcc:	454d      	cmp	r5, r9
 800cdce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cdd2:	f84a 3b04 	str.w	r3, [sl], #4
 800cdd6:	d8e7      	bhi.n	800cda8 <__mdiff+0x7c>
 800cdd8:	1b2b      	subs	r3, r5, r4
 800cdda:	3b15      	subs	r3, #21
 800cddc:	f023 0303 	bic.w	r3, r3, #3
 800cde0:	3304      	adds	r3, #4
 800cde2:	3415      	adds	r4, #21
 800cde4:	42a5      	cmp	r5, r4
 800cde6:	bf38      	it	cc
 800cde8:	2304      	movcc	r3, #4
 800cdea:	4419      	add	r1, r3
 800cdec:	4473      	add	r3, lr
 800cdee:	469e      	mov	lr, r3
 800cdf0:	460d      	mov	r5, r1
 800cdf2:	4565      	cmp	r5, ip
 800cdf4:	d30e      	bcc.n	800ce14 <__mdiff+0xe8>
 800cdf6:	f10c 0203 	add.w	r2, ip, #3
 800cdfa:	1a52      	subs	r2, r2, r1
 800cdfc:	f022 0203 	bic.w	r2, r2, #3
 800ce00:	3903      	subs	r1, #3
 800ce02:	458c      	cmp	ip, r1
 800ce04:	bf38      	it	cc
 800ce06:	2200      	movcc	r2, #0
 800ce08:	441a      	add	r2, r3
 800ce0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce0e:	b17b      	cbz	r3, 800ce30 <__mdiff+0x104>
 800ce10:	6106      	str	r6, [r0, #16]
 800ce12:	e7a5      	b.n	800cd60 <__mdiff+0x34>
 800ce14:	f855 8b04 	ldr.w	r8, [r5], #4
 800ce18:	fa17 f488 	uxtah	r4, r7, r8
 800ce1c:	1422      	asrs	r2, r4, #16
 800ce1e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ce22:	b2a4      	uxth	r4, r4
 800ce24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ce28:	f84e 4b04 	str.w	r4, [lr], #4
 800ce2c:	1417      	asrs	r7, r2, #16
 800ce2e:	e7e0      	b.n	800cdf2 <__mdiff+0xc6>
 800ce30:	3e01      	subs	r6, #1
 800ce32:	e7ea      	b.n	800ce0a <__mdiff+0xde>
 800ce34:	0800dfd4 	.word	0x0800dfd4
 800ce38:	0800e048 	.word	0x0800e048

0800ce3c <__d2b>:
 800ce3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce40:	4689      	mov	r9, r1
 800ce42:	2101      	movs	r1, #1
 800ce44:	ec57 6b10 	vmov	r6, r7, d0
 800ce48:	4690      	mov	r8, r2
 800ce4a:	f7ff fcd5 	bl	800c7f8 <_Balloc>
 800ce4e:	4604      	mov	r4, r0
 800ce50:	b930      	cbnz	r0, 800ce60 <__d2b+0x24>
 800ce52:	4602      	mov	r2, r0
 800ce54:	4b25      	ldr	r3, [pc, #148]	; (800ceec <__d2b+0xb0>)
 800ce56:	4826      	ldr	r0, [pc, #152]	; (800cef0 <__d2b+0xb4>)
 800ce58:	f240 310a 	movw	r1, #778	; 0x30a
 800ce5c:	f000 fce0 	bl	800d820 <__assert_func>
 800ce60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ce64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce68:	bb35      	cbnz	r5, 800ceb8 <__d2b+0x7c>
 800ce6a:	2e00      	cmp	r6, #0
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	d028      	beq.n	800cec2 <__d2b+0x86>
 800ce70:	4668      	mov	r0, sp
 800ce72:	9600      	str	r6, [sp, #0]
 800ce74:	f7ff fd8c 	bl	800c990 <__lo0bits>
 800ce78:	9900      	ldr	r1, [sp, #0]
 800ce7a:	b300      	cbz	r0, 800cebe <__d2b+0x82>
 800ce7c:	9a01      	ldr	r2, [sp, #4]
 800ce7e:	f1c0 0320 	rsb	r3, r0, #32
 800ce82:	fa02 f303 	lsl.w	r3, r2, r3
 800ce86:	430b      	orrs	r3, r1
 800ce88:	40c2      	lsrs	r2, r0
 800ce8a:	6163      	str	r3, [r4, #20]
 800ce8c:	9201      	str	r2, [sp, #4]
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	61a3      	str	r3, [r4, #24]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	bf14      	ite	ne
 800ce96:	2202      	movne	r2, #2
 800ce98:	2201      	moveq	r2, #1
 800ce9a:	6122      	str	r2, [r4, #16]
 800ce9c:	b1d5      	cbz	r5, 800ced4 <__d2b+0x98>
 800ce9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cea2:	4405      	add	r5, r0
 800cea4:	f8c9 5000 	str.w	r5, [r9]
 800cea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ceac:	f8c8 0000 	str.w	r0, [r8]
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	b003      	add	sp, #12
 800ceb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cebc:	e7d5      	b.n	800ce6a <__d2b+0x2e>
 800cebe:	6161      	str	r1, [r4, #20]
 800cec0:	e7e5      	b.n	800ce8e <__d2b+0x52>
 800cec2:	a801      	add	r0, sp, #4
 800cec4:	f7ff fd64 	bl	800c990 <__lo0bits>
 800cec8:	9b01      	ldr	r3, [sp, #4]
 800ceca:	6163      	str	r3, [r4, #20]
 800cecc:	2201      	movs	r2, #1
 800cece:	6122      	str	r2, [r4, #16]
 800ced0:	3020      	adds	r0, #32
 800ced2:	e7e3      	b.n	800ce9c <__d2b+0x60>
 800ced4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ced8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cedc:	f8c9 0000 	str.w	r0, [r9]
 800cee0:	6918      	ldr	r0, [r3, #16]
 800cee2:	f7ff fd35 	bl	800c950 <__hi0bits>
 800cee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ceea:	e7df      	b.n	800ceac <__d2b+0x70>
 800ceec:	0800dfd4 	.word	0x0800dfd4
 800cef0:	0800e048 	.word	0x0800e048

0800cef4 <_calloc_r>:
 800cef4:	b513      	push	{r0, r1, r4, lr}
 800cef6:	434a      	muls	r2, r1
 800cef8:	4611      	mov	r1, r2
 800cefa:	9201      	str	r2, [sp, #4]
 800cefc:	f000 f85a 	bl	800cfb4 <_malloc_r>
 800cf00:	4604      	mov	r4, r0
 800cf02:	b118      	cbz	r0, 800cf0c <_calloc_r+0x18>
 800cf04:	9a01      	ldr	r2, [sp, #4]
 800cf06:	2100      	movs	r1, #0
 800cf08:	f7fd ffb6 	bl	800ae78 <memset>
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	b002      	add	sp, #8
 800cf10:	bd10      	pop	{r4, pc}
	...

0800cf14 <_free_r>:
 800cf14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf16:	2900      	cmp	r1, #0
 800cf18:	d048      	beq.n	800cfac <_free_r+0x98>
 800cf1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf1e:	9001      	str	r0, [sp, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f1a1 0404 	sub.w	r4, r1, #4
 800cf26:	bfb8      	it	lt
 800cf28:	18e4      	addlt	r4, r4, r3
 800cf2a:	f000 fe1d 	bl	800db68 <__malloc_lock>
 800cf2e:	4a20      	ldr	r2, [pc, #128]	; (800cfb0 <_free_r+0x9c>)
 800cf30:	9801      	ldr	r0, [sp, #4]
 800cf32:	6813      	ldr	r3, [r2, #0]
 800cf34:	4615      	mov	r5, r2
 800cf36:	b933      	cbnz	r3, 800cf46 <_free_r+0x32>
 800cf38:	6063      	str	r3, [r4, #4]
 800cf3a:	6014      	str	r4, [r2, #0]
 800cf3c:	b003      	add	sp, #12
 800cf3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf42:	f000 be17 	b.w	800db74 <__malloc_unlock>
 800cf46:	42a3      	cmp	r3, r4
 800cf48:	d90b      	bls.n	800cf62 <_free_r+0x4e>
 800cf4a:	6821      	ldr	r1, [r4, #0]
 800cf4c:	1862      	adds	r2, r4, r1
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	bf04      	itt	eq
 800cf52:	681a      	ldreq	r2, [r3, #0]
 800cf54:	685b      	ldreq	r3, [r3, #4]
 800cf56:	6063      	str	r3, [r4, #4]
 800cf58:	bf04      	itt	eq
 800cf5a:	1852      	addeq	r2, r2, r1
 800cf5c:	6022      	streq	r2, [r4, #0]
 800cf5e:	602c      	str	r4, [r5, #0]
 800cf60:	e7ec      	b.n	800cf3c <_free_r+0x28>
 800cf62:	461a      	mov	r2, r3
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	b10b      	cbz	r3, 800cf6c <_free_r+0x58>
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	d9fa      	bls.n	800cf62 <_free_r+0x4e>
 800cf6c:	6811      	ldr	r1, [r2, #0]
 800cf6e:	1855      	adds	r5, r2, r1
 800cf70:	42a5      	cmp	r5, r4
 800cf72:	d10b      	bne.n	800cf8c <_free_r+0x78>
 800cf74:	6824      	ldr	r4, [r4, #0]
 800cf76:	4421      	add	r1, r4
 800cf78:	1854      	adds	r4, r2, r1
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	6011      	str	r1, [r2, #0]
 800cf7e:	d1dd      	bne.n	800cf3c <_free_r+0x28>
 800cf80:	681c      	ldr	r4, [r3, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	6053      	str	r3, [r2, #4]
 800cf86:	4421      	add	r1, r4
 800cf88:	6011      	str	r1, [r2, #0]
 800cf8a:	e7d7      	b.n	800cf3c <_free_r+0x28>
 800cf8c:	d902      	bls.n	800cf94 <_free_r+0x80>
 800cf8e:	230c      	movs	r3, #12
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	e7d3      	b.n	800cf3c <_free_r+0x28>
 800cf94:	6825      	ldr	r5, [r4, #0]
 800cf96:	1961      	adds	r1, r4, r5
 800cf98:	428b      	cmp	r3, r1
 800cf9a:	bf04      	itt	eq
 800cf9c:	6819      	ldreq	r1, [r3, #0]
 800cf9e:	685b      	ldreq	r3, [r3, #4]
 800cfa0:	6063      	str	r3, [r4, #4]
 800cfa2:	bf04      	itt	eq
 800cfa4:	1949      	addeq	r1, r1, r5
 800cfa6:	6021      	streq	r1, [r4, #0]
 800cfa8:	6054      	str	r4, [r2, #4]
 800cfaa:	e7c7      	b.n	800cf3c <_free_r+0x28>
 800cfac:	b003      	add	sp, #12
 800cfae:	bd30      	pop	{r4, r5, pc}
 800cfb0:	200008d0 	.word	0x200008d0

0800cfb4 <_malloc_r>:
 800cfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb6:	1ccd      	adds	r5, r1, #3
 800cfb8:	f025 0503 	bic.w	r5, r5, #3
 800cfbc:	3508      	adds	r5, #8
 800cfbe:	2d0c      	cmp	r5, #12
 800cfc0:	bf38      	it	cc
 800cfc2:	250c      	movcc	r5, #12
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	db01      	blt.n	800cfce <_malloc_r+0x1a>
 800cfca:	42a9      	cmp	r1, r5
 800cfcc:	d903      	bls.n	800cfd6 <_malloc_r+0x22>
 800cfce:	230c      	movs	r3, #12
 800cfd0:	6033      	str	r3, [r6, #0]
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfd6:	f000 fdc7 	bl	800db68 <__malloc_lock>
 800cfda:	4921      	ldr	r1, [pc, #132]	; (800d060 <_malloc_r+0xac>)
 800cfdc:	680a      	ldr	r2, [r1, #0]
 800cfde:	4614      	mov	r4, r2
 800cfe0:	b99c      	cbnz	r4, 800d00a <_malloc_r+0x56>
 800cfe2:	4f20      	ldr	r7, [pc, #128]	; (800d064 <_malloc_r+0xb0>)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	b923      	cbnz	r3, 800cff2 <_malloc_r+0x3e>
 800cfe8:	4621      	mov	r1, r4
 800cfea:	4630      	mov	r0, r6
 800cfec:	f000 faf2 	bl	800d5d4 <_sbrk_r>
 800cff0:	6038      	str	r0, [r7, #0]
 800cff2:	4629      	mov	r1, r5
 800cff4:	4630      	mov	r0, r6
 800cff6:	f000 faed 	bl	800d5d4 <_sbrk_r>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	d123      	bne.n	800d046 <_malloc_r+0x92>
 800cffe:	230c      	movs	r3, #12
 800d000:	6033      	str	r3, [r6, #0]
 800d002:	4630      	mov	r0, r6
 800d004:	f000 fdb6 	bl	800db74 <__malloc_unlock>
 800d008:	e7e3      	b.n	800cfd2 <_malloc_r+0x1e>
 800d00a:	6823      	ldr	r3, [r4, #0]
 800d00c:	1b5b      	subs	r3, r3, r5
 800d00e:	d417      	bmi.n	800d040 <_malloc_r+0x8c>
 800d010:	2b0b      	cmp	r3, #11
 800d012:	d903      	bls.n	800d01c <_malloc_r+0x68>
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	441c      	add	r4, r3
 800d018:	6025      	str	r5, [r4, #0]
 800d01a:	e004      	b.n	800d026 <_malloc_r+0x72>
 800d01c:	6863      	ldr	r3, [r4, #4]
 800d01e:	42a2      	cmp	r2, r4
 800d020:	bf0c      	ite	eq
 800d022:	600b      	streq	r3, [r1, #0]
 800d024:	6053      	strne	r3, [r2, #4]
 800d026:	4630      	mov	r0, r6
 800d028:	f000 fda4 	bl	800db74 <__malloc_unlock>
 800d02c:	f104 000b 	add.w	r0, r4, #11
 800d030:	1d23      	adds	r3, r4, #4
 800d032:	f020 0007 	bic.w	r0, r0, #7
 800d036:	1ac2      	subs	r2, r0, r3
 800d038:	d0cc      	beq.n	800cfd4 <_malloc_r+0x20>
 800d03a:	1a1b      	subs	r3, r3, r0
 800d03c:	50a3      	str	r3, [r4, r2]
 800d03e:	e7c9      	b.n	800cfd4 <_malloc_r+0x20>
 800d040:	4622      	mov	r2, r4
 800d042:	6864      	ldr	r4, [r4, #4]
 800d044:	e7cc      	b.n	800cfe0 <_malloc_r+0x2c>
 800d046:	1cc4      	adds	r4, r0, #3
 800d048:	f024 0403 	bic.w	r4, r4, #3
 800d04c:	42a0      	cmp	r0, r4
 800d04e:	d0e3      	beq.n	800d018 <_malloc_r+0x64>
 800d050:	1a21      	subs	r1, r4, r0
 800d052:	4630      	mov	r0, r6
 800d054:	f000 fabe 	bl	800d5d4 <_sbrk_r>
 800d058:	3001      	adds	r0, #1
 800d05a:	d1dd      	bne.n	800d018 <_malloc_r+0x64>
 800d05c:	e7cf      	b.n	800cffe <_malloc_r+0x4a>
 800d05e:	bf00      	nop
 800d060:	200008d0 	.word	0x200008d0
 800d064:	200008d4 	.word	0x200008d4

0800d068 <__ssputs_r>:
 800d068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d06c:	688e      	ldr	r6, [r1, #8]
 800d06e:	429e      	cmp	r6, r3
 800d070:	4682      	mov	sl, r0
 800d072:	460c      	mov	r4, r1
 800d074:	4690      	mov	r8, r2
 800d076:	461f      	mov	r7, r3
 800d078:	d838      	bhi.n	800d0ec <__ssputs_r+0x84>
 800d07a:	898a      	ldrh	r2, [r1, #12]
 800d07c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d080:	d032      	beq.n	800d0e8 <__ssputs_r+0x80>
 800d082:	6825      	ldr	r5, [r4, #0]
 800d084:	6909      	ldr	r1, [r1, #16]
 800d086:	eba5 0901 	sub.w	r9, r5, r1
 800d08a:	6965      	ldr	r5, [r4, #20]
 800d08c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d094:	3301      	adds	r3, #1
 800d096:	444b      	add	r3, r9
 800d098:	106d      	asrs	r5, r5, #1
 800d09a:	429d      	cmp	r5, r3
 800d09c:	bf38      	it	cc
 800d09e:	461d      	movcc	r5, r3
 800d0a0:	0553      	lsls	r3, r2, #21
 800d0a2:	d531      	bpl.n	800d108 <__ssputs_r+0xa0>
 800d0a4:	4629      	mov	r1, r5
 800d0a6:	f7ff ff85 	bl	800cfb4 <_malloc_r>
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	b950      	cbnz	r0, 800d0c4 <__ssputs_r+0x5c>
 800d0ae:	230c      	movs	r3, #12
 800d0b0:	f8ca 3000 	str.w	r3, [sl]
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ba:	81a3      	strh	r3, [r4, #12]
 800d0bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c4:	6921      	ldr	r1, [r4, #16]
 800d0c6:	464a      	mov	r2, r9
 800d0c8:	f7ff fb88 	bl	800c7dc <memcpy>
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	6126      	str	r6, [r4, #16]
 800d0da:	6165      	str	r5, [r4, #20]
 800d0dc:	444e      	add	r6, r9
 800d0de:	eba5 0509 	sub.w	r5, r5, r9
 800d0e2:	6026      	str	r6, [r4, #0]
 800d0e4:	60a5      	str	r5, [r4, #8]
 800d0e6:	463e      	mov	r6, r7
 800d0e8:	42be      	cmp	r6, r7
 800d0ea:	d900      	bls.n	800d0ee <__ssputs_r+0x86>
 800d0ec:	463e      	mov	r6, r7
 800d0ee:	4632      	mov	r2, r6
 800d0f0:	6820      	ldr	r0, [r4, #0]
 800d0f2:	4641      	mov	r1, r8
 800d0f4:	f000 fd1e 	bl	800db34 <memmove>
 800d0f8:	68a3      	ldr	r3, [r4, #8]
 800d0fa:	6822      	ldr	r2, [r4, #0]
 800d0fc:	1b9b      	subs	r3, r3, r6
 800d0fe:	4432      	add	r2, r6
 800d100:	60a3      	str	r3, [r4, #8]
 800d102:	6022      	str	r2, [r4, #0]
 800d104:	2000      	movs	r0, #0
 800d106:	e7db      	b.n	800d0c0 <__ssputs_r+0x58>
 800d108:	462a      	mov	r2, r5
 800d10a:	f000 fd39 	bl	800db80 <_realloc_r>
 800d10e:	4606      	mov	r6, r0
 800d110:	2800      	cmp	r0, #0
 800d112:	d1e1      	bne.n	800d0d8 <__ssputs_r+0x70>
 800d114:	6921      	ldr	r1, [r4, #16]
 800d116:	4650      	mov	r0, sl
 800d118:	f7ff fefc 	bl	800cf14 <_free_r>
 800d11c:	e7c7      	b.n	800d0ae <__ssputs_r+0x46>
	...

0800d120 <_svfiprintf_r>:
 800d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	4698      	mov	r8, r3
 800d126:	898b      	ldrh	r3, [r1, #12]
 800d128:	061b      	lsls	r3, r3, #24
 800d12a:	b09d      	sub	sp, #116	; 0x74
 800d12c:	4607      	mov	r7, r0
 800d12e:	460d      	mov	r5, r1
 800d130:	4614      	mov	r4, r2
 800d132:	d50e      	bpl.n	800d152 <_svfiprintf_r+0x32>
 800d134:	690b      	ldr	r3, [r1, #16]
 800d136:	b963      	cbnz	r3, 800d152 <_svfiprintf_r+0x32>
 800d138:	2140      	movs	r1, #64	; 0x40
 800d13a:	f7ff ff3b 	bl	800cfb4 <_malloc_r>
 800d13e:	6028      	str	r0, [r5, #0]
 800d140:	6128      	str	r0, [r5, #16]
 800d142:	b920      	cbnz	r0, 800d14e <_svfiprintf_r+0x2e>
 800d144:	230c      	movs	r3, #12
 800d146:	603b      	str	r3, [r7, #0]
 800d148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d14c:	e0d1      	b.n	800d2f2 <_svfiprintf_r+0x1d2>
 800d14e:	2340      	movs	r3, #64	; 0x40
 800d150:	616b      	str	r3, [r5, #20]
 800d152:	2300      	movs	r3, #0
 800d154:	9309      	str	r3, [sp, #36]	; 0x24
 800d156:	2320      	movs	r3, #32
 800d158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d15c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d160:	2330      	movs	r3, #48	; 0x30
 800d162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d30c <_svfiprintf_r+0x1ec>
 800d166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d16a:	f04f 0901 	mov.w	r9, #1
 800d16e:	4623      	mov	r3, r4
 800d170:	469a      	mov	sl, r3
 800d172:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d176:	b10a      	cbz	r2, 800d17c <_svfiprintf_r+0x5c>
 800d178:	2a25      	cmp	r2, #37	; 0x25
 800d17a:	d1f9      	bne.n	800d170 <_svfiprintf_r+0x50>
 800d17c:	ebba 0b04 	subs.w	fp, sl, r4
 800d180:	d00b      	beq.n	800d19a <_svfiprintf_r+0x7a>
 800d182:	465b      	mov	r3, fp
 800d184:	4622      	mov	r2, r4
 800d186:	4629      	mov	r1, r5
 800d188:	4638      	mov	r0, r7
 800d18a:	f7ff ff6d 	bl	800d068 <__ssputs_r>
 800d18e:	3001      	adds	r0, #1
 800d190:	f000 80aa 	beq.w	800d2e8 <_svfiprintf_r+0x1c8>
 800d194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d196:	445a      	add	r2, fp
 800d198:	9209      	str	r2, [sp, #36]	; 0x24
 800d19a:	f89a 3000 	ldrb.w	r3, [sl]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 80a2 	beq.w	800d2e8 <_svfiprintf_r+0x1c8>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1ae:	f10a 0a01 	add.w	sl, sl, #1
 800d1b2:	9304      	str	r3, [sp, #16]
 800d1b4:	9307      	str	r3, [sp, #28]
 800d1b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ba:	931a      	str	r3, [sp, #104]	; 0x68
 800d1bc:	4654      	mov	r4, sl
 800d1be:	2205      	movs	r2, #5
 800d1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c4:	4851      	ldr	r0, [pc, #324]	; (800d30c <_svfiprintf_r+0x1ec>)
 800d1c6:	f7f3 f93b 	bl	8000440 <memchr>
 800d1ca:	9a04      	ldr	r2, [sp, #16]
 800d1cc:	b9d8      	cbnz	r0, 800d206 <_svfiprintf_r+0xe6>
 800d1ce:	06d0      	lsls	r0, r2, #27
 800d1d0:	bf44      	itt	mi
 800d1d2:	2320      	movmi	r3, #32
 800d1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d8:	0711      	lsls	r1, r2, #28
 800d1da:	bf44      	itt	mi
 800d1dc:	232b      	movmi	r3, #43	; 0x2b
 800d1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d1e8:	d015      	beq.n	800d216 <_svfiprintf_r+0xf6>
 800d1ea:	9a07      	ldr	r2, [sp, #28]
 800d1ec:	4654      	mov	r4, sl
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	f04f 0c0a 	mov.w	ip, #10
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1fa:	3b30      	subs	r3, #48	; 0x30
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	d94e      	bls.n	800d29e <_svfiprintf_r+0x17e>
 800d200:	b1b0      	cbz	r0, 800d230 <_svfiprintf_r+0x110>
 800d202:	9207      	str	r2, [sp, #28]
 800d204:	e014      	b.n	800d230 <_svfiprintf_r+0x110>
 800d206:	eba0 0308 	sub.w	r3, r0, r8
 800d20a:	fa09 f303 	lsl.w	r3, r9, r3
 800d20e:	4313      	orrs	r3, r2
 800d210:	9304      	str	r3, [sp, #16]
 800d212:	46a2      	mov	sl, r4
 800d214:	e7d2      	b.n	800d1bc <_svfiprintf_r+0x9c>
 800d216:	9b03      	ldr	r3, [sp, #12]
 800d218:	1d19      	adds	r1, r3, #4
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	9103      	str	r1, [sp, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	bfbb      	ittet	lt
 800d222:	425b      	neglt	r3, r3
 800d224:	f042 0202 	orrlt.w	r2, r2, #2
 800d228:	9307      	strge	r3, [sp, #28]
 800d22a:	9307      	strlt	r3, [sp, #28]
 800d22c:	bfb8      	it	lt
 800d22e:	9204      	strlt	r2, [sp, #16]
 800d230:	7823      	ldrb	r3, [r4, #0]
 800d232:	2b2e      	cmp	r3, #46	; 0x2e
 800d234:	d10c      	bne.n	800d250 <_svfiprintf_r+0x130>
 800d236:	7863      	ldrb	r3, [r4, #1]
 800d238:	2b2a      	cmp	r3, #42	; 0x2a
 800d23a:	d135      	bne.n	800d2a8 <_svfiprintf_r+0x188>
 800d23c:	9b03      	ldr	r3, [sp, #12]
 800d23e:	1d1a      	adds	r2, r3, #4
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	9203      	str	r2, [sp, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	bfb8      	it	lt
 800d248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d24c:	3402      	adds	r4, #2
 800d24e:	9305      	str	r3, [sp, #20]
 800d250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d31c <_svfiprintf_r+0x1fc>
 800d254:	7821      	ldrb	r1, [r4, #0]
 800d256:	2203      	movs	r2, #3
 800d258:	4650      	mov	r0, sl
 800d25a:	f7f3 f8f1 	bl	8000440 <memchr>
 800d25e:	b140      	cbz	r0, 800d272 <_svfiprintf_r+0x152>
 800d260:	2340      	movs	r3, #64	; 0x40
 800d262:	eba0 000a 	sub.w	r0, r0, sl
 800d266:	fa03 f000 	lsl.w	r0, r3, r0
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	4303      	orrs	r3, r0
 800d26e:	3401      	adds	r4, #1
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d276:	4826      	ldr	r0, [pc, #152]	; (800d310 <_svfiprintf_r+0x1f0>)
 800d278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d27c:	2206      	movs	r2, #6
 800d27e:	f7f3 f8df 	bl	8000440 <memchr>
 800d282:	2800      	cmp	r0, #0
 800d284:	d038      	beq.n	800d2f8 <_svfiprintf_r+0x1d8>
 800d286:	4b23      	ldr	r3, [pc, #140]	; (800d314 <_svfiprintf_r+0x1f4>)
 800d288:	bb1b      	cbnz	r3, 800d2d2 <_svfiprintf_r+0x1b2>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	3307      	adds	r3, #7
 800d28e:	f023 0307 	bic.w	r3, r3, #7
 800d292:	3308      	adds	r3, #8
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	4433      	add	r3, r6
 800d29a:	9309      	str	r3, [sp, #36]	; 0x24
 800d29c:	e767      	b.n	800d16e <_svfiprintf_r+0x4e>
 800d29e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	2001      	movs	r0, #1
 800d2a6:	e7a5      	b.n	800d1f4 <_svfiprintf_r+0xd4>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	3401      	adds	r4, #1
 800d2ac:	9305      	str	r3, [sp, #20]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	f04f 0c0a 	mov.w	ip, #10
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ba:	3a30      	subs	r2, #48	; 0x30
 800d2bc:	2a09      	cmp	r2, #9
 800d2be:	d903      	bls.n	800d2c8 <_svfiprintf_r+0x1a8>
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d0c5      	beq.n	800d250 <_svfiprintf_r+0x130>
 800d2c4:	9105      	str	r1, [sp, #20]
 800d2c6:	e7c3      	b.n	800d250 <_svfiprintf_r+0x130>
 800d2c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e7f0      	b.n	800d2b4 <_svfiprintf_r+0x194>
 800d2d2:	ab03      	add	r3, sp, #12
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	462a      	mov	r2, r5
 800d2d8:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <_svfiprintf_r+0x1f8>)
 800d2da:	a904      	add	r1, sp, #16
 800d2dc:	4638      	mov	r0, r7
 800d2de:	f7fd fe73 	bl	800afc8 <_printf_float>
 800d2e2:	1c42      	adds	r2, r0, #1
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	d1d6      	bne.n	800d296 <_svfiprintf_r+0x176>
 800d2e8:	89ab      	ldrh	r3, [r5, #12]
 800d2ea:	065b      	lsls	r3, r3, #25
 800d2ec:	f53f af2c 	bmi.w	800d148 <_svfiprintf_r+0x28>
 800d2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f2:	b01d      	add	sp, #116	; 0x74
 800d2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	4b06      	ldr	r3, [pc, #24]	; (800d318 <_svfiprintf_r+0x1f8>)
 800d300:	a904      	add	r1, sp, #16
 800d302:	4638      	mov	r0, r7
 800d304:	f7fe f904 	bl	800b510 <_printf_i>
 800d308:	e7eb      	b.n	800d2e2 <_svfiprintf_r+0x1c2>
 800d30a:	bf00      	nop
 800d30c:	0800e1a4 	.word	0x0800e1a4
 800d310:	0800e1ae 	.word	0x0800e1ae
 800d314:	0800afc9 	.word	0x0800afc9
 800d318:	0800d069 	.word	0x0800d069
 800d31c:	0800e1aa 	.word	0x0800e1aa

0800d320 <__sfputc_r>:
 800d320:	6893      	ldr	r3, [r2, #8]
 800d322:	3b01      	subs	r3, #1
 800d324:	2b00      	cmp	r3, #0
 800d326:	b410      	push	{r4}
 800d328:	6093      	str	r3, [r2, #8]
 800d32a:	da08      	bge.n	800d33e <__sfputc_r+0x1e>
 800d32c:	6994      	ldr	r4, [r2, #24]
 800d32e:	42a3      	cmp	r3, r4
 800d330:	db01      	blt.n	800d336 <__sfputc_r+0x16>
 800d332:	290a      	cmp	r1, #10
 800d334:	d103      	bne.n	800d33e <__sfputc_r+0x1e>
 800d336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d33a:	f000 b99f 	b.w	800d67c <__swbuf_r>
 800d33e:	6813      	ldr	r3, [r2, #0]
 800d340:	1c58      	adds	r0, r3, #1
 800d342:	6010      	str	r0, [r2, #0]
 800d344:	7019      	strb	r1, [r3, #0]
 800d346:	4608      	mov	r0, r1
 800d348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d34c:	4770      	bx	lr

0800d34e <__sfputs_r>:
 800d34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d350:	4606      	mov	r6, r0
 800d352:	460f      	mov	r7, r1
 800d354:	4614      	mov	r4, r2
 800d356:	18d5      	adds	r5, r2, r3
 800d358:	42ac      	cmp	r4, r5
 800d35a:	d101      	bne.n	800d360 <__sfputs_r+0x12>
 800d35c:	2000      	movs	r0, #0
 800d35e:	e007      	b.n	800d370 <__sfputs_r+0x22>
 800d360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d364:	463a      	mov	r2, r7
 800d366:	4630      	mov	r0, r6
 800d368:	f7ff ffda 	bl	800d320 <__sfputc_r>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d1f3      	bne.n	800d358 <__sfputs_r+0xa>
 800d370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d374 <_vfiprintf_r>:
 800d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	460d      	mov	r5, r1
 800d37a:	b09d      	sub	sp, #116	; 0x74
 800d37c:	4614      	mov	r4, r2
 800d37e:	4698      	mov	r8, r3
 800d380:	4606      	mov	r6, r0
 800d382:	b118      	cbz	r0, 800d38c <_vfiprintf_r+0x18>
 800d384:	6983      	ldr	r3, [r0, #24]
 800d386:	b90b      	cbnz	r3, 800d38c <_vfiprintf_r+0x18>
 800d388:	f7ff f97a 	bl	800c680 <__sinit>
 800d38c:	4b89      	ldr	r3, [pc, #548]	; (800d5b4 <_vfiprintf_r+0x240>)
 800d38e:	429d      	cmp	r5, r3
 800d390:	d11b      	bne.n	800d3ca <_vfiprintf_r+0x56>
 800d392:	6875      	ldr	r5, [r6, #4]
 800d394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d396:	07d9      	lsls	r1, r3, #31
 800d398:	d405      	bmi.n	800d3a6 <_vfiprintf_r+0x32>
 800d39a:	89ab      	ldrh	r3, [r5, #12]
 800d39c:	059a      	lsls	r2, r3, #22
 800d39e:	d402      	bmi.n	800d3a6 <_vfiprintf_r+0x32>
 800d3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3a2:	f7ff fa10 	bl	800c7c6 <__retarget_lock_acquire_recursive>
 800d3a6:	89ab      	ldrh	r3, [r5, #12]
 800d3a8:	071b      	lsls	r3, r3, #28
 800d3aa:	d501      	bpl.n	800d3b0 <_vfiprintf_r+0x3c>
 800d3ac:	692b      	ldr	r3, [r5, #16]
 800d3ae:	b9eb      	cbnz	r3, 800d3ec <_vfiprintf_r+0x78>
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f000 f9c6 	bl	800d744 <__swsetup_r>
 800d3b8:	b1c0      	cbz	r0, 800d3ec <_vfiprintf_r+0x78>
 800d3ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3bc:	07dc      	lsls	r4, r3, #31
 800d3be:	d50e      	bpl.n	800d3de <_vfiprintf_r+0x6a>
 800d3c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3c4:	b01d      	add	sp, #116	; 0x74
 800d3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ca:	4b7b      	ldr	r3, [pc, #492]	; (800d5b8 <_vfiprintf_r+0x244>)
 800d3cc:	429d      	cmp	r5, r3
 800d3ce:	d101      	bne.n	800d3d4 <_vfiprintf_r+0x60>
 800d3d0:	68b5      	ldr	r5, [r6, #8]
 800d3d2:	e7df      	b.n	800d394 <_vfiprintf_r+0x20>
 800d3d4:	4b79      	ldr	r3, [pc, #484]	; (800d5bc <_vfiprintf_r+0x248>)
 800d3d6:	429d      	cmp	r5, r3
 800d3d8:	bf08      	it	eq
 800d3da:	68f5      	ldreq	r5, [r6, #12]
 800d3dc:	e7da      	b.n	800d394 <_vfiprintf_r+0x20>
 800d3de:	89ab      	ldrh	r3, [r5, #12]
 800d3e0:	0598      	lsls	r0, r3, #22
 800d3e2:	d4ed      	bmi.n	800d3c0 <_vfiprintf_r+0x4c>
 800d3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3e6:	f7ff f9ef 	bl	800c7c8 <__retarget_lock_release_recursive>
 800d3ea:	e7e9      	b.n	800d3c0 <_vfiprintf_r+0x4c>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f0:	2320      	movs	r3, #32
 800d3f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3fa:	2330      	movs	r3, #48	; 0x30
 800d3fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d5c0 <_vfiprintf_r+0x24c>
 800d400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d404:	f04f 0901 	mov.w	r9, #1
 800d408:	4623      	mov	r3, r4
 800d40a:	469a      	mov	sl, r3
 800d40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d410:	b10a      	cbz	r2, 800d416 <_vfiprintf_r+0xa2>
 800d412:	2a25      	cmp	r2, #37	; 0x25
 800d414:	d1f9      	bne.n	800d40a <_vfiprintf_r+0x96>
 800d416:	ebba 0b04 	subs.w	fp, sl, r4
 800d41a:	d00b      	beq.n	800d434 <_vfiprintf_r+0xc0>
 800d41c:	465b      	mov	r3, fp
 800d41e:	4622      	mov	r2, r4
 800d420:	4629      	mov	r1, r5
 800d422:	4630      	mov	r0, r6
 800d424:	f7ff ff93 	bl	800d34e <__sfputs_r>
 800d428:	3001      	adds	r0, #1
 800d42a:	f000 80aa 	beq.w	800d582 <_vfiprintf_r+0x20e>
 800d42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d430:	445a      	add	r2, fp
 800d432:	9209      	str	r2, [sp, #36]	; 0x24
 800d434:	f89a 3000 	ldrb.w	r3, [sl]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 80a2 	beq.w	800d582 <_vfiprintf_r+0x20e>
 800d43e:	2300      	movs	r3, #0
 800d440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d448:	f10a 0a01 	add.w	sl, sl, #1
 800d44c:	9304      	str	r3, [sp, #16]
 800d44e:	9307      	str	r3, [sp, #28]
 800d450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d454:	931a      	str	r3, [sp, #104]	; 0x68
 800d456:	4654      	mov	r4, sl
 800d458:	2205      	movs	r2, #5
 800d45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d45e:	4858      	ldr	r0, [pc, #352]	; (800d5c0 <_vfiprintf_r+0x24c>)
 800d460:	f7f2 ffee 	bl	8000440 <memchr>
 800d464:	9a04      	ldr	r2, [sp, #16]
 800d466:	b9d8      	cbnz	r0, 800d4a0 <_vfiprintf_r+0x12c>
 800d468:	06d1      	lsls	r1, r2, #27
 800d46a:	bf44      	itt	mi
 800d46c:	2320      	movmi	r3, #32
 800d46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d472:	0713      	lsls	r3, r2, #28
 800d474:	bf44      	itt	mi
 800d476:	232b      	movmi	r3, #43	; 0x2b
 800d478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d47c:	f89a 3000 	ldrb.w	r3, [sl]
 800d480:	2b2a      	cmp	r3, #42	; 0x2a
 800d482:	d015      	beq.n	800d4b0 <_vfiprintf_r+0x13c>
 800d484:	9a07      	ldr	r2, [sp, #28]
 800d486:	4654      	mov	r4, sl
 800d488:	2000      	movs	r0, #0
 800d48a:	f04f 0c0a 	mov.w	ip, #10
 800d48e:	4621      	mov	r1, r4
 800d490:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d494:	3b30      	subs	r3, #48	; 0x30
 800d496:	2b09      	cmp	r3, #9
 800d498:	d94e      	bls.n	800d538 <_vfiprintf_r+0x1c4>
 800d49a:	b1b0      	cbz	r0, 800d4ca <_vfiprintf_r+0x156>
 800d49c:	9207      	str	r2, [sp, #28]
 800d49e:	e014      	b.n	800d4ca <_vfiprintf_r+0x156>
 800d4a0:	eba0 0308 	sub.w	r3, r0, r8
 800d4a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	46a2      	mov	sl, r4
 800d4ae:	e7d2      	b.n	800d456 <_vfiprintf_r+0xe2>
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	1d19      	adds	r1, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	9103      	str	r1, [sp, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bfbb      	ittet	lt
 800d4bc:	425b      	neglt	r3, r3
 800d4be:	f042 0202 	orrlt.w	r2, r2, #2
 800d4c2:	9307      	strge	r3, [sp, #28]
 800d4c4:	9307      	strlt	r3, [sp, #28]
 800d4c6:	bfb8      	it	lt
 800d4c8:	9204      	strlt	r2, [sp, #16]
 800d4ca:	7823      	ldrb	r3, [r4, #0]
 800d4cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d4ce:	d10c      	bne.n	800d4ea <_vfiprintf_r+0x176>
 800d4d0:	7863      	ldrb	r3, [r4, #1]
 800d4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d4:	d135      	bne.n	800d542 <_vfiprintf_r+0x1ce>
 800d4d6:	9b03      	ldr	r3, [sp, #12]
 800d4d8:	1d1a      	adds	r2, r3, #4
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	9203      	str	r2, [sp, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	bfb8      	it	lt
 800d4e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d4e6:	3402      	adds	r4, #2
 800d4e8:	9305      	str	r3, [sp, #20]
 800d4ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d5d0 <_vfiprintf_r+0x25c>
 800d4ee:	7821      	ldrb	r1, [r4, #0]
 800d4f0:	2203      	movs	r2, #3
 800d4f2:	4650      	mov	r0, sl
 800d4f4:	f7f2 ffa4 	bl	8000440 <memchr>
 800d4f8:	b140      	cbz	r0, 800d50c <_vfiprintf_r+0x198>
 800d4fa:	2340      	movs	r3, #64	; 0x40
 800d4fc:	eba0 000a 	sub.w	r0, r0, sl
 800d500:	fa03 f000 	lsl.w	r0, r3, r0
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	4303      	orrs	r3, r0
 800d508:	3401      	adds	r4, #1
 800d50a:	9304      	str	r3, [sp, #16]
 800d50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d510:	482c      	ldr	r0, [pc, #176]	; (800d5c4 <_vfiprintf_r+0x250>)
 800d512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d516:	2206      	movs	r2, #6
 800d518:	f7f2 ff92 	bl	8000440 <memchr>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d03f      	beq.n	800d5a0 <_vfiprintf_r+0x22c>
 800d520:	4b29      	ldr	r3, [pc, #164]	; (800d5c8 <_vfiprintf_r+0x254>)
 800d522:	bb1b      	cbnz	r3, 800d56c <_vfiprintf_r+0x1f8>
 800d524:	9b03      	ldr	r3, [sp, #12]
 800d526:	3307      	adds	r3, #7
 800d528:	f023 0307 	bic.w	r3, r3, #7
 800d52c:	3308      	adds	r3, #8
 800d52e:	9303      	str	r3, [sp, #12]
 800d530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d532:	443b      	add	r3, r7
 800d534:	9309      	str	r3, [sp, #36]	; 0x24
 800d536:	e767      	b.n	800d408 <_vfiprintf_r+0x94>
 800d538:	fb0c 3202 	mla	r2, ip, r2, r3
 800d53c:	460c      	mov	r4, r1
 800d53e:	2001      	movs	r0, #1
 800d540:	e7a5      	b.n	800d48e <_vfiprintf_r+0x11a>
 800d542:	2300      	movs	r3, #0
 800d544:	3401      	adds	r4, #1
 800d546:	9305      	str	r3, [sp, #20]
 800d548:	4619      	mov	r1, r3
 800d54a:	f04f 0c0a 	mov.w	ip, #10
 800d54e:	4620      	mov	r0, r4
 800d550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d554:	3a30      	subs	r2, #48	; 0x30
 800d556:	2a09      	cmp	r2, #9
 800d558:	d903      	bls.n	800d562 <_vfiprintf_r+0x1ee>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d0c5      	beq.n	800d4ea <_vfiprintf_r+0x176>
 800d55e:	9105      	str	r1, [sp, #20]
 800d560:	e7c3      	b.n	800d4ea <_vfiprintf_r+0x176>
 800d562:	fb0c 2101 	mla	r1, ip, r1, r2
 800d566:	4604      	mov	r4, r0
 800d568:	2301      	movs	r3, #1
 800d56a:	e7f0      	b.n	800d54e <_vfiprintf_r+0x1da>
 800d56c:	ab03      	add	r3, sp, #12
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	462a      	mov	r2, r5
 800d572:	4b16      	ldr	r3, [pc, #88]	; (800d5cc <_vfiprintf_r+0x258>)
 800d574:	a904      	add	r1, sp, #16
 800d576:	4630      	mov	r0, r6
 800d578:	f7fd fd26 	bl	800afc8 <_printf_float>
 800d57c:	4607      	mov	r7, r0
 800d57e:	1c78      	adds	r0, r7, #1
 800d580:	d1d6      	bne.n	800d530 <_vfiprintf_r+0x1bc>
 800d582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d584:	07d9      	lsls	r1, r3, #31
 800d586:	d405      	bmi.n	800d594 <_vfiprintf_r+0x220>
 800d588:	89ab      	ldrh	r3, [r5, #12]
 800d58a:	059a      	lsls	r2, r3, #22
 800d58c:	d402      	bmi.n	800d594 <_vfiprintf_r+0x220>
 800d58e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d590:	f7ff f91a 	bl	800c7c8 <__retarget_lock_release_recursive>
 800d594:	89ab      	ldrh	r3, [r5, #12]
 800d596:	065b      	lsls	r3, r3, #25
 800d598:	f53f af12 	bmi.w	800d3c0 <_vfiprintf_r+0x4c>
 800d59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d59e:	e711      	b.n	800d3c4 <_vfiprintf_r+0x50>
 800d5a0:	ab03      	add	r3, sp, #12
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	462a      	mov	r2, r5
 800d5a6:	4b09      	ldr	r3, [pc, #36]	; (800d5cc <_vfiprintf_r+0x258>)
 800d5a8:	a904      	add	r1, sp, #16
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7fd ffb0 	bl	800b510 <_printf_i>
 800d5b0:	e7e4      	b.n	800d57c <_vfiprintf_r+0x208>
 800d5b2:	bf00      	nop
 800d5b4:	0800e008 	.word	0x0800e008
 800d5b8:	0800e028 	.word	0x0800e028
 800d5bc:	0800dfe8 	.word	0x0800dfe8
 800d5c0:	0800e1a4 	.word	0x0800e1a4
 800d5c4:	0800e1ae 	.word	0x0800e1ae
 800d5c8:	0800afc9 	.word	0x0800afc9
 800d5cc:	0800d34f 	.word	0x0800d34f
 800d5d0:	0800e1aa 	.word	0x0800e1aa

0800d5d4 <_sbrk_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d06      	ldr	r5, [pc, #24]	; (800d5f0 <_sbrk_r+0x1c>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	602b      	str	r3, [r5, #0]
 800d5e0:	f7f4 f9ce 	bl	8001980 <_sbrk>
 800d5e4:	1c43      	adds	r3, r0, #1
 800d5e6:	d102      	bne.n	800d5ee <_sbrk_r+0x1a>
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	b103      	cbz	r3, 800d5ee <_sbrk_r+0x1a>
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	20003350 	.word	0x20003350

0800d5f4 <__sread>:
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5fc:	f000 fae6 	bl	800dbcc <_read_r>
 800d600:	2800      	cmp	r0, #0
 800d602:	bfab      	itete	ge
 800d604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d606:	89a3      	ldrhlt	r3, [r4, #12]
 800d608:	181b      	addge	r3, r3, r0
 800d60a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d60e:	bfac      	ite	ge
 800d610:	6563      	strge	r3, [r4, #84]	; 0x54
 800d612:	81a3      	strhlt	r3, [r4, #12]
 800d614:	bd10      	pop	{r4, pc}

0800d616 <__swrite>:
 800d616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d61a:	461f      	mov	r7, r3
 800d61c:	898b      	ldrh	r3, [r1, #12]
 800d61e:	05db      	lsls	r3, r3, #23
 800d620:	4605      	mov	r5, r0
 800d622:	460c      	mov	r4, r1
 800d624:	4616      	mov	r6, r2
 800d626:	d505      	bpl.n	800d634 <__swrite+0x1e>
 800d628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62c:	2302      	movs	r3, #2
 800d62e:	2200      	movs	r2, #0
 800d630:	f000 f9f8 	bl	800da24 <_lseek_r>
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d63a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d63e:	81a3      	strh	r3, [r4, #12]
 800d640:	4632      	mov	r2, r6
 800d642:	463b      	mov	r3, r7
 800d644:	4628      	mov	r0, r5
 800d646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d64a:	f000 b869 	b.w	800d720 <_write_r>

0800d64e <__sseek>:
 800d64e:	b510      	push	{r4, lr}
 800d650:	460c      	mov	r4, r1
 800d652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d656:	f000 f9e5 	bl	800da24 <_lseek_r>
 800d65a:	1c43      	adds	r3, r0, #1
 800d65c:	89a3      	ldrh	r3, [r4, #12]
 800d65e:	bf15      	itete	ne
 800d660:	6560      	strne	r0, [r4, #84]	; 0x54
 800d662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d66a:	81a3      	strheq	r3, [r4, #12]
 800d66c:	bf18      	it	ne
 800d66e:	81a3      	strhne	r3, [r4, #12]
 800d670:	bd10      	pop	{r4, pc}

0800d672 <__sclose>:
 800d672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d676:	f000 b8f1 	b.w	800d85c <_close_r>
	...

0800d67c <__swbuf_r>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	460e      	mov	r6, r1
 800d680:	4614      	mov	r4, r2
 800d682:	4605      	mov	r5, r0
 800d684:	b118      	cbz	r0, 800d68e <__swbuf_r+0x12>
 800d686:	6983      	ldr	r3, [r0, #24]
 800d688:	b90b      	cbnz	r3, 800d68e <__swbuf_r+0x12>
 800d68a:	f7fe fff9 	bl	800c680 <__sinit>
 800d68e:	4b21      	ldr	r3, [pc, #132]	; (800d714 <__swbuf_r+0x98>)
 800d690:	429c      	cmp	r4, r3
 800d692:	d12b      	bne.n	800d6ec <__swbuf_r+0x70>
 800d694:	686c      	ldr	r4, [r5, #4]
 800d696:	69a3      	ldr	r3, [r4, #24]
 800d698:	60a3      	str	r3, [r4, #8]
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	071a      	lsls	r2, r3, #28
 800d69e:	d52f      	bpl.n	800d700 <__swbuf_r+0x84>
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	b36b      	cbz	r3, 800d700 <__swbuf_r+0x84>
 800d6a4:	6923      	ldr	r3, [r4, #16]
 800d6a6:	6820      	ldr	r0, [r4, #0]
 800d6a8:	1ac0      	subs	r0, r0, r3
 800d6aa:	6963      	ldr	r3, [r4, #20]
 800d6ac:	b2f6      	uxtb	r6, r6
 800d6ae:	4283      	cmp	r3, r0
 800d6b0:	4637      	mov	r7, r6
 800d6b2:	dc04      	bgt.n	800d6be <__swbuf_r+0x42>
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	f000 f966 	bl	800d988 <_fflush_r>
 800d6bc:	bb30      	cbnz	r0, 800d70c <__swbuf_r+0x90>
 800d6be:	68a3      	ldr	r3, [r4, #8]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	60a3      	str	r3, [r4, #8]
 800d6c4:	6823      	ldr	r3, [r4, #0]
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	6022      	str	r2, [r4, #0]
 800d6ca:	701e      	strb	r6, [r3, #0]
 800d6cc:	6963      	ldr	r3, [r4, #20]
 800d6ce:	3001      	adds	r0, #1
 800d6d0:	4283      	cmp	r3, r0
 800d6d2:	d004      	beq.n	800d6de <__swbuf_r+0x62>
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	07db      	lsls	r3, r3, #31
 800d6d8:	d506      	bpl.n	800d6e8 <__swbuf_r+0x6c>
 800d6da:	2e0a      	cmp	r6, #10
 800d6dc:	d104      	bne.n	800d6e8 <__swbuf_r+0x6c>
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	f000 f951 	bl	800d988 <_fflush_r>
 800d6e6:	b988      	cbnz	r0, 800d70c <__swbuf_r+0x90>
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ec:	4b0a      	ldr	r3, [pc, #40]	; (800d718 <__swbuf_r+0x9c>)
 800d6ee:	429c      	cmp	r4, r3
 800d6f0:	d101      	bne.n	800d6f6 <__swbuf_r+0x7a>
 800d6f2:	68ac      	ldr	r4, [r5, #8]
 800d6f4:	e7cf      	b.n	800d696 <__swbuf_r+0x1a>
 800d6f6:	4b09      	ldr	r3, [pc, #36]	; (800d71c <__swbuf_r+0xa0>)
 800d6f8:	429c      	cmp	r4, r3
 800d6fa:	bf08      	it	eq
 800d6fc:	68ec      	ldreq	r4, [r5, #12]
 800d6fe:	e7ca      	b.n	800d696 <__swbuf_r+0x1a>
 800d700:	4621      	mov	r1, r4
 800d702:	4628      	mov	r0, r5
 800d704:	f000 f81e 	bl	800d744 <__swsetup_r>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d0cb      	beq.n	800d6a4 <__swbuf_r+0x28>
 800d70c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d710:	e7ea      	b.n	800d6e8 <__swbuf_r+0x6c>
 800d712:	bf00      	nop
 800d714:	0800e008 	.word	0x0800e008
 800d718:	0800e028 	.word	0x0800e028
 800d71c:	0800dfe8 	.word	0x0800dfe8

0800d720 <_write_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d07      	ldr	r5, [pc, #28]	; (800d740 <_write_r+0x20>)
 800d724:	4604      	mov	r4, r0
 800d726:	4608      	mov	r0, r1
 800d728:	4611      	mov	r1, r2
 800d72a:	2200      	movs	r2, #0
 800d72c:	602a      	str	r2, [r5, #0]
 800d72e:	461a      	mov	r2, r3
 800d730:	f7f4 f8d5 	bl	80018de <_write>
 800d734:	1c43      	adds	r3, r0, #1
 800d736:	d102      	bne.n	800d73e <_write_r+0x1e>
 800d738:	682b      	ldr	r3, [r5, #0]
 800d73a:	b103      	cbz	r3, 800d73e <_write_r+0x1e>
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	bd38      	pop	{r3, r4, r5, pc}
 800d740:	20003350 	.word	0x20003350

0800d744 <__swsetup_r>:
 800d744:	4b32      	ldr	r3, [pc, #200]	; (800d810 <__swsetup_r+0xcc>)
 800d746:	b570      	push	{r4, r5, r6, lr}
 800d748:	681d      	ldr	r5, [r3, #0]
 800d74a:	4606      	mov	r6, r0
 800d74c:	460c      	mov	r4, r1
 800d74e:	b125      	cbz	r5, 800d75a <__swsetup_r+0x16>
 800d750:	69ab      	ldr	r3, [r5, #24]
 800d752:	b913      	cbnz	r3, 800d75a <__swsetup_r+0x16>
 800d754:	4628      	mov	r0, r5
 800d756:	f7fe ff93 	bl	800c680 <__sinit>
 800d75a:	4b2e      	ldr	r3, [pc, #184]	; (800d814 <__swsetup_r+0xd0>)
 800d75c:	429c      	cmp	r4, r3
 800d75e:	d10f      	bne.n	800d780 <__swsetup_r+0x3c>
 800d760:	686c      	ldr	r4, [r5, #4]
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d768:	0719      	lsls	r1, r3, #28
 800d76a:	d42c      	bmi.n	800d7c6 <__swsetup_r+0x82>
 800d76c:	06dd      	lsls	r5, r3, #27
 800d76e:	d411      	bmi.n	800d794 <__swsetup_r+0x50>
 800d770:	2309      	movs	r3, #9
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d778:	81a3      	strh	r3, [r4, #12]
 800d77a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d77e:	e03e      	b.n	800d7fe <__swsetup_r+0xba>
 800d780:	4b25      	ldr	r3, [pc, #148]	; (800d818 <__swsetup_r+0xd4>)
 800d782:	429c      	cmp	r4, r3
 800d784:	d101      	bne.n	800d78a <__swsetup_r+0x46>
 800d786:	68ac      	ldr	r4, [r5, #8]
 800d788:	e7eb      	b.n	800d762 <__swsetup_r+0x1e>
 800d78a:	4b24      	ldr	r3, [pc, #144]	; (800d81c <__swsetup_r+0xd8>)
 800d78c:	429c      	cmp	r4, r3
 800d78e:	bf08      	it	eq
 800d790:	68ec      	ldreq	r4, [r5, #12]
 800d792:	e7e6      	b.n	800d762 <__swsetup_r+0x1e>
 800d794:	0758      	lsls	r0, r3, #29
 800d796:	d512      	bpl.n	800d7be <__swsetup_r+0x7a>
 800d798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d79a:	b141      	cbz	r1, 800d7ae <__swsetup_r+0x6a>
 800d79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7a0:	4299      	cmp	r1, r3
 800d7a2:	d002      	beq.n	800d7aa <__swsetup_r+0x66>
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f7ff fbb5 	bl	800cf14 <_free_r>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	6363      	str	r3, [r4, #52]	; 0x34
 800d7ae:	89a3      	ldrh	r3, [r4, #12]
 800d7b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7b4:	81a3      	strh	r3, [r4, #12]
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	6063      	str	r3, [r4, #4]
 800d7ba:	6923      	ldr	r3, [r4, #16]
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	89a3      	ldrh	r3, [r4, #12]
 800d7c0:	f043 0308 	orr.w	r3, r3, #8
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	b94b      	cbnz	r3, 800d7de <__swsetup_r+0x9a>
 800d7ca:	89a3      	ldrh	r3, [r4, #12]
 800d7cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7d4:	d003      	beq.n	800d7de <__swsetup_r+0x9a>
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f000 f959 	bl	800da90 <__smakebuf_r>
 800d7de:	89a0      	ldrh	r0, [r4, #12]
 800d7e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7e4:	f010 0301 	ands.w	r3, r0, #1
 800d7e8:	d00a      	beq.n	800d800 <__swsetup_r+0xbc>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60a3      	str	r3, [r4, #8]
 800d7ee:	6963      	ldr	r3, [r4, #20]
 800d7f0:	425b      	negs	r3, r3
 800d7f2:	61a3      	str	r3, [r4, #24]
 800d7f4:	6923      	ldr	r3, [r4, #16]
 800d7f6:	b943      	cbnz	r3, 800d80a <__swsetup_r+0xc6>
 800d7f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7fc:	d1ba      	bne.n	800d774 <__swsetup_r+0x30>
 800d7fe:	bd70      	pop	{r4, r5, r6, pc}
 800d800:	0781      	lsls	r1, r0, #30
 800d802:	bf58      	it	pl
 800d804:	6963      	ldrpl	r3, [r4, #20]
 800d806:	60a3      	str	r3, [r4, #8]
 800d808:	e7f4      	b.n	800d7f4 <__swsetup_r+0xb0>
 800d80a:	2000      	movs	r0, #0
 800d80c:	e7f7      	b.n	800d7fe <__swsetup_r+0xba>
 800d80e:	bf00      	nop
 800d810:	2000026c 	.word	0x2000026c
 800d814:	0800e008 	.word	0x0800e008
 800d818:	0800e028 	.word	0x0800e028
 800d81c:	0800dfe8 	.word	0x0800dfe8

0800d820 <__assert_func>:
 800d820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d822:	4614      	mov	r4, r2
 800d824:	461a      	mov	r2, r3
 800d826:	4b09      	ldr	r3, [pc, #36]	; (800d84c <__assert_func+0x2c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4605      	mov	r5, r0
 800d82c:	68d8      	ldr	r0, [r3, #12]
 800d82e:	b14c      	cbz	r4, 800d844 <__assert_func+0x24>
 800d830:	4b07      	ldr	r3, [pc, #28]	; (800d850 <__assert_func+0x30>)
 800d832:	9100      	str	r1, [sp, #0]
 800d834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d838:	4906      	ldr	r1, [pc, #24]	; (800d854 <__assert_func+0x34>)
 800d83a:	462b      	mov	r3, r5
 800d83c:	f000 f8e0 	bl	800da00 <fiprintf>
 800d840:	f000 f9e3 	bl	800dc0a <abort>
 800d844:	4b04      	ldr	r3, [pc, #16]	; (800d858 <__assert_func+0x38>)
 800d846:	461c      	mov	r4, r3
 800d848:	e7f3      	b.n	800d832 <__assert_func+0x12>
 800d84a:	bf00      	nop
 800d84c:	2000026c 	.word	0x2000026c
 800d850:	0800e1b5 	.word	0x0800e1b5
 800d854:	0800e1c2 	.word	0x0800e1c2
 800d858:	0800e1f0 	.word	0x0800e1f0

0800d85c <_close_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4d06      	ldr	r5, [pc, #24]	; (800d878 <_close_r+0x1c>)
 800d860:	2300      	movs	r3, #0
 800d862:	4604      	mov	r4, r0
 800d864:	4608      	mov	r0, r1
 800d866:	602b      	str	r3, [r5, #0]
 800d868:	f7f4 f855 	bl	8001916 <_close>
 800d86c:	1c43      	adds	r3, r0, #1
 800d86e:	d102      	bne.n	800d876 <_close_r+0x1a>
 800d870:	682b      	ldr	r3, [r5, #0]
 800d872:	b103      	cbz	r3, 800d876 <_close_r+0x1a>
 800d874:	6023      	str	r3, [r4, #0]
 800d876:	bd38      	pop	{r3, r4, r5, pc}
 800d878:	20003350 	.word	0x20003350

0800d87c <__sflush_r>:
 800d87c:	898a      	ldrh	r2, [r1, #12]
 800d87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d882:	4605      	mov	r5, r0
 800d884:	0710      	lsls	r0, r2, #28
 800d886:	460c      	mov	r4, r1
 800d888:	d458      	bmi.n	800d93c <__sflush_r+0xc0>
 800d88a:	684b      	ldr	r3, [r1, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	dc05      	bgt.n	800d89c <__sflush_r+0x20>
 800d890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d892:	2b00      	cmp	r3, #0
 800d894:	dc02      	bgt.n	800d89c <__sflush_r+0x20>
 800d896:	2000      	movs	r0, #0
 800d898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d89e:	2e00      	cmp	r6, #0
 800d8a0:	d0f9      	beq.n	800d896 <__sflush_r+0x1a>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8a8:	682f      	ldr	r7, [r5, #0]
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	d032      	beq.n	800d914 <__sflush_r+0x98>
 800d8ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8b0:	89a3      	ldrh	r3, [r4, #12]
 800d8b2:	075a      	lsls	r2, r3, #29
 800d8b4:	d505      	bpl.n	800d8c2 <__sflush_r+0x46>
 800d8b6:	6863      	ldr	r3, [r4, #4]
 800d8b8:	1ac0      	subs	r0, r0, r3
 800d8ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8bc:	b10b      	cbz	r3, 800d8c2 <__sflush_r+0x46>
 800d8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8c0:	1ac0      	subs	r0, r0, r3
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8c8:	6a21      	ldr	r1, [r4, #32]
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	47b0      	blx	r6
 800d8ce:	1c43      	adds	r3, r0, #1
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	d106      	bne.n	800d8e2 <__sflush_r+0x66>
 800d8d4:	6829      	ldr	r1, [r5, #0]
 800d8d6:	291d      	cmp	r1, #29
 800d8d8:	d82c      	bhi.n	800d934 <__sflush_r+0xb8>
 800d8da:	4a2a      	ldr	r2, [pc, #168]	; (800d984 <__sflush_r+0x108>)
 800d8dc:	40ca      	lsrs	r2, r1
 800d8de:	07d6      	lsls	r6, r2, #31
 800d8e0:	d528      	bpl.n	800d934 <__sflush_r+0xb8>
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	6062      	str	r2, [r4, #4]
 800d8e6:	04d9      	lsls	r1, r3, #19
 800d8e8:	6922      	ldr	r2, [r4, #16]
 800d8ea:	6022      	str	r2, [r4, #0]
 800d8ec:	d504      	bpl.n	800d8f8 <__sflush_r+0x7c>
 800d8ee:	1c42      	adds	r2, r0, #1
 800d8f0:	d101      	bne.n	800d8f6 <__sflush_r+0x7a>
 800d8f2:	682b      	ldr	r3, [r5, #0]
 800d8f4:	b903      	cbnz	r3, 800d8f8 <__sflush_r+0x7c>
 800d8f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8fa:	602f      	str	r7, [r5, #0]
 800d8fc:	2900      	cmp	r1, #0
 800d8fe:	d0ca      	beq.n	800d896 <__sflush_r+0x1a>
 800d900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d904:	4299      	cmp	r1, r3
 800d906:	d002      	beq.n	800d90e <__sflush_r+0x92>
 800d908:	4628      	mov	r0, r5
 800d90a:	f7ff fb03 	bl	800cf14 <_free_r>
 800d90e:	2000      	movs	r0, #0
 800d910:	6360      	str	r0, [r4, #52]	; 0x34
 800d912:	e7c1      	b.n	800d898 <__sflush_r+0x1c>
 800d914:	6a21      	ldr	r1, [r4, #32]
 800d916:	2301      	movs	r3, #1
 800d918:	4628      	mov	r0, r5
 800d91a:	47b0      	blx	r6
 800d91c:	1c41      	adds	r1, r0, #1
 800d91e:	d1c7      	bne.n	800d8b0 <__sflush_r+0x34>
 800d920:	682b      	ldr	r3, [r5, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d0c4      	beq.n	800d8b0 <__sflush_r+0x34>
 800d926:	2b1d      	cmp	r3, #29
 800d928:	d001      	beq.n	800d92e <__sflush_r+0xb2>
 800d92a:	2b16      	cmp	r3, #22
 800d92c:	d101      	bne.n	800d932 <__sflush_r+0xb6>
 800d92e:	602f      	str	r7, [r5, #0]
 800d930:	e7b1      	b.n	800d896 <__sflush_r+0x1a>
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d938:	81a3      	strh	r3, [r4, #12]
 800d93a:	e7ad      	b.n	800d898 <__sflush_r+0x1c>
 800d93c:	690f      	ldr	r7, [r1, #16]
 800d93e:	2f00      	cmp	r7, #0
 800d940:	d0a9      	beq.n	800d896 <__sflush_r+0x1a>
 800d942:	0793      	lsls	r3, r2, #30
 800d944:	680e      	ldr	r6, [r1, #0]
 800d946:	bf08      	it	eq
 800d948:	694b      	ldreq	r3, [r1, #20]
 800d94a:	600f      	str	r7, [r1, #0]
 800d94c:	bf18      	it	ne
 800d94e:	2300      	movne	r3, #0
 800d950:	eba6 0807 	sub.w	r8, r6, r7
 800d954:	608b      	str	r3, [r1, #8]
 800d956:	f1b8 0f00 	cmp.w	r8, #0
 800d95a:	dd9c      	ble.n	800d896 <__sflush_r+0x1a>
 800d95c:	6a21      	ldr	r1, [r4, #32]
 800d95e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d960:	4643      	mov	r3, r8
 800d962:	463a      	mov	r2, r7
 800d964:	4628      	mov	r0, r5
 800d966:	47b0      	blx	r6
 800d968:	2800      	cmp	r0, #0
 800d96a:	dc06      	bgt.n	800d97a <__sflush_r+0xfe>
 800d96c:	89a3      	ldrh	r3, [r4, #12]
 800d96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d972:	81a3      	strh	r3, [r4, #12]
 800d974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d978:	e78e      	b.n	800d898 <__sflush_r+0x1c>
 800d97a:	4407      	add	r7, r0
 800d97c:	eba8 0800 	sub.w	r8, r8, r0
 800d980:	e7e9      	b.n	800d956 <__sflush_r+0xda>
 800d982:	bf00      	nop
 800d984:	20400001 	.word	0x20400001

0800d988 <_fflush_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	690b      	ldr	r3, [r1, #16]
 800d98c:	4605      	mov	r5, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	b913      	cbnz	r3, 800d998 <_fflush_r+0x10>
 800d992:	2500      	movs	r5, #0
 800d994:	4628      	mov	r0, r5
 800d996:	bd38      	pop	{r3, r4, r5, pc}
 800d998:	b118      	cbz	r0, 800d9a2 <_fflush_r+0x1a>
 800d99a:	6983      	ldr	r3, [r0, #24]
 800d99c:	b90b      	cbnz	r3, 800d9a2 <_fflush_r+0x1a>
 800d99e:	f7fe fe6f 	bl	800c680 <__sinit>
 800d9a2:	4b14      	ldr	r3, [pc, #80]	; (800d9f4 <_fflush_r+0x6c>)
 800d9a4:	429c      	cmp	r4, r3
 800d9a6:	d11b      	bne.n	800d9e0 <_fflush_r+0x58>
 800d9a8:	686c      	ldr	r4, [r5, #4]
 800d9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d0ef      	beq.n	800d992 <_fflush_r+0xa>
 800d9b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9b4:	07d0      	lsls	r0, r2, #31
 800d9b6:	d404      	bmi.n	800d9c2 <_fflush_r+0x3a>
 800d9b8:	0599      	lsls	r1, r3, #22
 800d9ba:	d402      	bmi.n	800d9c2 <_fflush_r+0x3a>
 800d9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9be:	f7fe ff02 	bl	800c7c6 <__retarget_lock_acquire_recursive>
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	f7ff ff59 	bl	800d87c <__sflush_r>
 800d9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9cc:	07da      	lsls	r2, r3, #31
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	d4e0      	bmi.n	800d994 <_fflush_r+0xc>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	059b      	lsls	r3, r3, #22
 800d9d6:	d4dd      	bmi.n	800d994 <_fflush_r+0xc>
 800d9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9da:	f7fe fef5 	bl	800c7c8 <__retarget_lock_release_recursive>
 800d9de:	e7d9      	b.n	800d994 <_fflush_r+0xc>
 800d9e0:	4b05      	ldr	r3, [pc, #20]	; (800d9f8 <_fflush_r+0x70>)
 800d9e2:	429c      	cmp	r4, r3
 800d9e4:	d101      	bne.n	800d9ea <_fflush_r+0x62>
 800d9e6:	68ac      	ldr	r4, [r5, #8]
 800d9e8:	e7df      	b.n	800d9aa <_fflush_r+0x22>
 800d9ea:	4b04      	ldr	r3, [pc, #16]	; (800d9fc <_fflush_r+0x74>)
 800d9ec:	429c      	cmp	r4, r3
 800d9ee:	bf08      	it	eq
 800d9f0:	68ec      	ldreq	r4, [r5, #12]
 800d9f2:	e7da      	b.n	800d9aa <_fflush_r+0x22>
 800d9f4:	0800e008 	.word	0x0800e008
 800d9f8:	0800e028 	.word	0x0800e028
 800d9fc:	0800dfe8 	.word	0x0800dfe8

0800da00 <fiprintf>:
 800da00:	b40e      	push	{r1, r2, r3}
 800da02:	b503      	push	{r0, r1, lr}
 800da04:	4601      	mov	r1, r0
 800da06:	ab03      	add	r3, sp, #12
 800da08:	4805      	ldr	r0, [pc, #20]	; (800da20 <fiprintf+0x20>)
 800da0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da0e:	6800      	ldr	r0, [r0, #0]
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	f7ff fcaf 	bl	800d374 <_vfiprintf_r>
 800da16:	b002      	add	sp, #8
 800da18:	f85d eb04 	ldr.w	lr, [sp], #4
 800da1c:	b003      	add	sp, #12
 800da1e:	4770      	bx	lr
 800da20:	2000026c 	.word	0x2000026c

0800da24 <_lseek_r>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4d07      	ldr	r5, [pc, #28]	; (800da44 <_lseek_r+0x20>)
 800da28:	4604      	mov	r4, r0
 800da2a:	4608      	mov	r0, r1
 800da2c:	4611      	mov	r1, r2
 800da2e:	2200      	movs	r2, #0
 800da30:	602a      	str	r2, [r5, #0]
 800da32:	461a      	mov	r2, r3
 800da34:	f7f3 ff96 	bl	8001964 <_lseek>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_lseek_r+0x1e>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_lseek_r+0x1e>
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	20003350 	.word	0x20003350

0800da48 <__swhatbuf_r>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	460e      	mov	r6, r1
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	2900      	cmp	r1, #0
 800da52:	b096      	sub	sp, #88	; 0x58
 800da54:	4614      	mov	r4, r2
 800da56:	461d      	mov	r5, r3
 800da58:	da07      	bge.n	800da6a <__swhatbuf_r+0x22>
 800da5a:	2300      	movs	r3, #0
 800da5c:	602b      	str	r3, [r5, #0]
 800da5e:	89b3      	ldrh	r3, [r6, #12]
 800da60:	061a      	lsls	r2, r3, #24
 800da62:	d410      	bmi.n	800da86 <__swhatbuf_r+0x3e>
 800da64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da68:	e00e      	b.n	800da88 <__swhatbuf_r+0x40>
 800da6a:	466a      	mov	r2, sp
 800da6c:	f000 f8d4 	bl	800dc18 <_fstat_r>
 800da70:	2800      	cmp	r0, #0
 800da72:	dbf2      	blt.n	800da5a <__swhatbuf_r+0x12>
 800da74:	9a01      	ldr	r2, [sp, #4]
 800da76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da7e:	425a      	negs	r2, r3
 800da80:	415a      	adcs	r2, r3
 800da82:	602a      	str	r2, [r5, #0]
 800da84:	e7ee      	b.n	800da64 <__swhatbuf_r+0x1c>
 800da86:	2340      	movs	r3, #64	; 0x40
 800da88:	2000      	movs	r0, #0
 800da8a:	6023      	str	r3, [r4, #0]
 800da8c:	b016      	add	sp, #88	; 0x58
 800da8e:	bd70      	pop	{r4, r5, r6, pc}

0800da90 <__smakebuf_r>:
 800da90:	898b      	ldrh	r3, [r1, #12]
 800da92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da94:	079d      	lsls	r5, r3, #30
 800da96:	4606      	mov	r6, r0
 800da98:	460c      	mov	r4, r1
 800da9a:	d507      	bpl.n	800daac <__smakebuf_r+0x1c>
 800da9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	6123      	str	r3, [r4, #16]
 800daa4:	2301      	movs	r3, #1
 800daa6:	6163      	str	r3, [r4, #20]
 800daa8:	b002      	add	sp, #8
 800daaa:	bd70      	pop	{r4, r5, r6, pc}
 800daac:	ab01      	add	r3, sp, #4
 800daae:	466a      	mov	r2, sp
 800dab0:	f7ff ffca 	bl	800da48 <__swhatbuf_r>
 800dab4:	9900      	ldr	r1, [sp, #0]
 800dab6:	4605      	mov	r5, r0
 800dab8:	4630      	mov	r0, r6
 800daba:	f7ff fa7b 	bl	800cfb4 <_malloc_r>
 800dabe:	b948      	cbnz	r0, 800dad4 <__smakebuf_r+0x44>
 800dac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dac4:	059a      	lsls	r2, r3, #22
 800dac6:	d4ef      	bmi.n	800daa8 <__smakebuf_r+0x18>
 800dac8:	f023 0303 	bic.w	r3, r3, #3
 800dacc:	f043 0302 	orr.w	r3, r3, #2
 800dad0:	81a3      	strh	r3, [r4, #12]
 800dad2:	e7e3      	b.n	800da9c <__smakebuf_r+0xc>
 800dad4:	4b0d      	ldr	r3, [pc, #52]	; (800db0c <__smakebuf_r+0x7c>)
 800dad6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	6020      	str	r0, [r4, #0]
 800dadc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dae0:	81a3      	strh	r3, [r4, #12]
 800dae2:	9b00      	ldr	r3, [sp, #0]
 800dae4:	6163      	str	r3, [r4, #20]
 800dae6:	9b01      	ldr	r3, [sp, #4]
 800dae8:	6120      	str	r0, [r4, #16]
 800daea:	b15b      	cbz	r3, 800db04 <__smakebuf_r+0x74>
 800daec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daf0:	4630      	mov	r0, r6
 800daf2:	f000 f8a3 	bl	800dc3c <_isatty_r>
 800daf6:	b128      	cbz	r0, 800db04 <__smakebuf_r+0x74>
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	f023 0303 	bic.w	r3, r3, #3
 800dafe:	f043 0301 	orr.w	r3, r3, #1
 800db02:	81a3      	strh	r3, [r4, #12]
 800db04:	89a0      	ldrh	r0, [r4, #12]
 800db06:	4305      	orrs	r5, r0
 800db08:	81a5      	strh	r5, [r4, #12]
 800db0a:	e7cd      	b.n	800daa8 <__smakebuf_r+0x18>
 800db0c:	0800c619 	.word	0x0800c619

0800db10 <__ascii_mbtowc>:
 800db10:	b082      	sub	sp, #8
 800db12:	b901      	cbnz	r1, 800db16 <__ascii_mbtowc+0x6>
 800db14:	a901      	add	r1, sp, #4
 800db16:	b142      	cbz	r2, 800db2a <__ascii_mbtowc+0x1a>
 800db18:	b14b      	cbz	r3, 800db2e <__ascii_mbtowc+0x1e>
 800db1a:	7813      	ldrb	r3, [r2, #0]
 800db1c:	600b      	str	r3, [r1, #0]
 800db1e:	7812      	ldrb	r2, [r2, #0]
 800db20:	1e10      	subs	r0, r2, #0
 800db22:	bf18      	it	ne
 800db24:	2001      	movne	r0, #1
 800db26:	b002      	add	sp, #8
 800db28:	4770      	bx	lr
 800db2a:	4610      	mov	r0, r2
 800db2c:	e7fb      	b.n	800db26 <__ascii_mbtowc+0x16>
 800db2e:	f06f 0001 	mvn.w	r0, #1
 800db32:	e7f8      	b.n	800db26 <__ascii_mbtowc+0x16>

0800db34 <memmove>:
 800db34:	4288      	cmp	r0, r1
 800db36:	b510      	push	{r4, lr}
 800db38:	eb01 0402 	add.w	r4, r1, r2
 800db3c:	d902      	bls.n	800db44 <memmove+0x10>
 800db3e:	4284      	cmp	r4, r0
 800db40:	4623      	mov	r3, r4
 800db42:	d807      	bhi.n	800db54 <memmove+0x20>
 800db44:	1e43      	subs	r3, r0, #1
 800db46:	42a1      	cmp	r1, r4
 800db48:	d008      	beq.n	800db5c <memmove+0x28>
 800db4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db52:	e7f8      	b.n	800db46 <memmove+0x12>
 800db54:	4402      	add	r2, r0
 800db56:	4601      	mov	r1, r0
 800db58:	428a      	cmp	r2, r1
 800db5a:	d100      	bne.n	800db5e <memmove+0x2a>
 800db5c:	bd10      	pop	{r4, pc}
 800db5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db66:	e7f7      	b.n	800db58 <memmove+0x24>

0800db68 <__malloc_lock>:
 800db68:	4801      	ldr	r0, [pc, #4]	; (800db70 <__malloc_lock+0x8>)
 800db6a:	f7fe be2c 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800db6e:	bf00      	nop
 800db70:	20003348 	.word	0x20003348

0800db74 <__malloc_unlock>:
 800db74:	4801      	ldr	r0, [pc, #4]	; (800db7c <__malloc_unlock+0x8>)
 800db76:	f7fe be27 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800db7a:	bf00      	nop
 800db7c:	20003348 	.word	0x20003348

0800db80 <_realloc_r>:
 800db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db82:	4607      	mov	r7, r0
 800db84:	4614      	mov	r4, r2
 800db86:	460e      	mov	r6, r1
 800db88:	b921      	cbnz	r1, 800db94 <_realloc_r+0x14>
 800db8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db8e:	4611      	mov	r1, r2
 800db90:	f7ff ba10 	b.w	800cfb4 <_malloc_r>
 800db94:	b922      	cbnz	r2, 800dba0 <_realloc_r+0x20>
 800db96:	f7ff f9bd 	bl	800cf14 <_free_r>
 800db9a:	4625      	mov	r5, r4
 800db9c:	4628      	mov	r0, r5
 800db9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dba0:	f000 f85c 	bl	800dc5c <_malloc_usable_size_r>
 800dba4:	42a0      	cmp	r0, r4
 800dba6:	d20f      	bcs.n	800dbc8 <_realloc_r+0x48>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4638      	mov	r0, r7
 800dbac:	f7ff fa02 	bl	800cfb4 <_malloc_r>
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d0f2      	beq.n	800db9c <_realloc_r+0x1c>
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	4622      	mov	r2, r4
 800dbba:	f7fe fe0f 	bl	800c7dc <memcpy>
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	f7ff f9a7 	bl	800cf14 <_free_r>
 800dbc6:	e7e9      	b.n	800db9c <_realloc_r+0x1c>
 800dbc8:	4635      	mov	r5, r6
 800dbca:	e7e7      	b.n	800db9c <_realloc_r+0x1c>

0800dbcc <_read_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d07      	ldr	r5, [pc, #28]	; (800dbec <_read_r+0x20>)
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	4608      	mov	r0, r1
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	602a      	str	r2, [r5, #0]
 800dbda:	461a      	mov	r2, r3
 800dbdc:	f7f3 fe62 	bl	80018a4 <_read>
 800dbe0:	1c43      	adds	r3, r0, #1
 800dbe2:	d102      	bne.n	800dbea <_read_r+0x1e>
 800dbe4:	682b      	ldr	r3, [r5, #0]
 800dbe6:	b103      	cbz	r3, 800dbea <_read_r+0x1e>
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	20003350 	.word	0x20003350

0800dbf0 <__ascii_wctomb>:
 800dbf0:	b149      	cbz	r1, 800dc06 <__ascii_wctomb+0x16>
 800dbf2:	2aff      	cmp	r2, #255	; 0xff
 800dbf4:	bf85      	ittet	hi
 800dbf6:	238a      	movhi	r3, #138	; 0x8a
 800dbf8:	6003      	strhi	r3, [r0, #0]
 800dbfa:	700a      	strbls	r2, [r1, #0]
 800dbfc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dc00:	bf98      	it	ls
 800dc02:	2001      	movls	r0, #1
 800dc04:	4770      	bx	lr
 800dc06:	4608      	mov	r0, r1
 800dc08:	4770      	bx	lr

0800dc0a <abort>:
 800dc0a:	b508      	push	{r3, lr}
 800dc0c:	2006      	movs	r0, #6
 800dc0e:	f000 f855 	bl	800dcbc <raise>
 800dc12:	2001      	movs	r0, #1
 800dc14:	f7f3 fe3c 	bl	8001890 <_exit>

0800dc18 <_fstat_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d07      	ldr	r5, [pc, #28]	; (800dc38 <_fstat_r+0x20>)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4604      	mov	r4, r0
 800dc20:	4608      	mov	r0, r1
 800dc22:	4611      	mov	r1, r2
 800dc24:	602b      	str	r3, [r5, #0]
 800dc26:	f7f3 fe82 	bl	800192e <_fstat>
 800dc2a:	1c43      	adds	r3, r0, #1
 800dc2c:	d102      	bne.n	800dc34 <_fstat_r+0x1c>
 800dc2e:	682b      	ldr	r3, [r5, #0]
 800dc30:	b103      	cbz	r3, 800dc34 <_fstat_r+0x1c>
 800dc32:	6023      	str	r3, [r4, #0]
 800dc34:	bd38      	pop	{r3, r4, r5, pc}
 800dc36:	bf00      	nop
 800dc38:	20003350 	.word	0x20003350

0800dc3c <_isatty_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d06      	ldr	r5, [pc, #24]	; (800dc58 <_isatty_r+0x1c>)
 800dc40:	2300      	movs	r3, #0
 800dc42:	4604      	mov	r4, r0
 800dc44:	4608      	mov	r0, r1
 800dc46:	602b      	str	r3, [r5, #0]
 800dc48:	f7f3 fe81 	bl	800194e <_isatty>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	d102      	bne.n	800dc56 <_isatty_r+0x1a>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b103      	cbz	r3, 800dc56 <_isatty_r+0x1a>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	20003350 	.word	0x20003350

0800dc5c <_malloc_usable_size_r>:
 800dc5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc60:	1f18      	subs	r0, r3, #4
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	bfbc      	itt	lt
 800dc66:	580b      	ldrlt	r3, [r1, r0]
 800dc68:	18c0      	addlt	r0, r0, r3
 800dc6a:	4770      	bx	lr

0800dc6c <_raise_r>:
 800dc6c:	291f      	cmp	r1, #31
 800dc6e:	b538      	push	{r3, r4, r5, lr}
 800dc70:	4604      	mov	r4, r0
 800dc72:	460d      	mov	r5, r1
 800dc74:	d904      	bls.n	800dc80 <_raise_r+0x14>
 800dc76:	2316      	movs	r3, #22
 800dc78:	6003      	str	r3, [r0, #0]
 800dc7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc82:	b112      	cbz	r2, 800dc8a <_raise_r+0x1e>
 800dc84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc88:	b94b      	cbnz	r3, 800dc9e <_raise_r+0x32>
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f000 f830 	bl	800dcf0 <_getpid_r>
 800dc90:	462a      	mov	r2, r5
 800dc92:	4601      	mov	r1, r0
 800dc94:	4620      	mov	r0, r4
 800dc96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc9a:	f000 b817 	b.w	800dccc <_kill_r>
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d00a      	beq.n	800dcb8 <_raise_r+0x4c>
 800dca2:	1c59      	adds	r1, r3, #1
 800dca4:	d103      	bne.n	800dcae <_raise_r+0x42>
 800dca6:	2316      	movs	r3, #22
 800dca8:	6003      	str	r3, [r0, #0]
 800dcaa:	2001      	movs	r0, #1
 800dcac:	e7e7      	b.n	800dc7e <_raise_r+0x12>
 800dcae:	2400      	movs	r4, #0
 800dcb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	4798      	blx	r3
 800dcb8:	2000      	movs	r0, #0
 800dcba:	e7e0      	b.n	800dc7e <_raise_r+0x12>

0800dcbc <raise>:
 800dcbc:	4b02      	ldr	r3, [pc, #8]	; (800dcc8 <raise+0xc>)
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	6818      	ldr	r0, [r3, #0]
 800dcc2:	f7ff bfd3 	b.w	800dc6c <_raise_r>
 800dcc6:	bf00      	nop
 800dcc8:	2000026c 	.word	0x2000026c

0800dccc <_kill_r>:
 800dccc:	b538      	push	{r3, r4, r5, lr}
 800dcce:	4d07      	ldr	r5, [pc, #28]	; (800dcec <_kill_r+0x20>)
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	602b      	str	r3, [r5, #0]
 800dcda:	f7f3 fdc9 	bl	8001870 <_kill>
 800dcde:	1c43      	adds	r3, r0, #1
 800dce0:	d102      	bne.n	800dce8 <_kill_r+0x1c>
 800dce2:	682b      	ldr	r3, [r5, #0]
 800dce4:	b103      	cbz	r3, 800dce8 <_kill_r+0x1c>
 800dce6:	6023      	str	r3, [r4, #0]
 800dce8:	bd38      	pop	{r3, r4, r5, pc}
 800dcea:	bf00      	nop
 800dcec:	20003350 	.word	0x20003350

0800dcf0 <_getpid_r>:
 800dcf0:	f7f3 bdb6 	b.w	8001860 <_getpid>

0800dcf4 <_init>:
 800dcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf6:	bf00      	nop
 800dcf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcfa:	bc08      	pop	{r3}
 800dcfc:	469e      	mov	lr, r3
 800dcfe:	4770      	bx	lr

0800dd00 <_fini>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr
